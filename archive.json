{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2024-03-26T00:49:37.414308+00:00",
  "repo": "cfrg/draft-irtf-cfrg-voprf",
  "labels": [
    {
      "name": "bug",
      "description": null,
      "color": "ee0701"
    },
    {
      "name": "duplicate",
      "description": null,
      "color": "cccccc"
    },
    {
      "name": "enhancement",
      "description": null,
      "color": "84b6eb"
    },
    {
      "name": "good first issue",
      "description": null,
      "color": "7057ff"
    },
    {
      "name": "help wanted",
      "description": null,
      "color": "33aa3f"
    },
    {
      "name": "invalid",
      "description": null,
      "color": "e6e6e6"
    },
    {
      "name": "question",
      "description": null,
      "color": "cc317c"
    },
    {
      "name": "wontfix",
      "description": null,
      "color": "ffffff"
    },
    {
      "name": "ready-for-text",
      "description": "Ready for text",
      "color": "070D83"
    }
  ],
  "issues": [
    {
      "number": 3,
      "id": "MDU6SXNzdWUzMDYyMjQ2NjU=",
      "title": "Clean up DLEQ notation, adopt that of PrivacyPass",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/3",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "r & \\gets \\mathbb{Z}_p \\\\\r\nA &= rG \\\\\r\nB &= rM \\\\\r\nc &= H(G,Y,Z,A,B) \\\\\r\ns &= (r - ck) (\\text{mod} p) \\\\\r\n& \\mathsf{Output } \\; (c, s) \r\n\r\n\r\nA' &= sG + cY \\\\\r\nB' &= sM + cZ \\\\\r\nc' &= H(G,Y,Z,A',B') \\\\\r\n& \\mathsf{Output } \\; c == c'\r\n\r\n\\log_G(Y) =? \\log_M(Z)\r\nY = kG, Z = kM\r\n\r\n\\mathsf{DLEQVerify}(G, Y, M, Z, (c, s))\r\n\r\n\\mathsf{DLEQGenerate}(G, Y, M, Z)",
      "createdAt": "2018-03-18T09:15:06Z",
      "updatedAt": "2018-06-21T00:47:57Z",
      "closedAt": "2018-06-21T00:47:56Z",
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm happy to have a go at doing this",
          "createdAt": "2018-06-16T02:38:39Z",
          "updatedAt": "2018-06-16T02:38:39Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed by #9.",
          "createdAt": "2018-06-21T00:47:56Z",
          "updatedAt": "2018-06-21T00:47:56Z"
        }
      ]
    },
    {
      "number": 4,
      "id": "MDU6SXNzdWUzMDY1NTQ0ODk=",
      "title": "Document title should be \"ecvoprf,\" not \"voprf.\"",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/4",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2018-03-19T17:15:48Z",
      "updatedAt": "2018-06-05T21:28:40Z",
      "closedAt": "2018-06-05T21:28:39Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed",
          "createdAt": "2018-06-05T21:28:39Z",
          "updatedAt": "2018-06-05T21:28:39Z"
        }
      ]
    },
    {
      "number": 5,
      "id": "MDU6SXNzdWUzMDcxNjI4Mzc=",
      "title": "Add \"parameter commitment\" support",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/5",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chris-wood"
      ],
      "labels": [],
      "body": "In some cases, it may be desirable for P to force V to only redeem its PRF value for specific set of \"parameters.\" For example, imagine P and V could use the PRF output to derive an encryption key for encrypting data to the server, though V is free to use whatever encryption algorithm it likes. V tells P which algorithm it's using in its redemption+data message to P. Currently, P cannot restrict the algorithm V uses since the only thing P commits to is the keying material during the VOPRF protocol. \r\n\r\nOne way to address this problem is as follows. Let _params_ be the parameters that P wishes V to use when redeeming its PRF value. (In the example above, it might be a canonical representation of the encryption algorithm cipher suite.) When multiplying V's blinded message M by its scalar, P also mixes in t = H(_params_ || k2), where k2 is another secret scalar != k, and H is a full-domain hash function that maps to curve base field (e.g., Z_p). The resulting blinded and \"signed\" message is then Z = tkM = rkrX. \r\n\r\nWhen redeeming the PRF value, V supplies the PRF input *and* _params_. P can then recompute t as above and mix it into the computation. Moreover, since t is computed by appending a secret to the parameters and hashing the result, V cannot remove it from Z without knowledge of k2. ",
      "createdAt": "2018-03-21T09:03:04Z",
      "updatedAt": "2018-06-21T00:47:46Z",
      "closedAt": "2018-06-21T00:47:46Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Alternatively: Have a separate public set of commitments for each param value published somewhere and return the current VOPRF value plus a DLEQ with respect to the committed value.",
          "createdAt": "2018-06-05T21:29:27Z",
          "updatedAt": "2018-06-05T21:29:27Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm not certain on how providing a DLEQ proof wrt the params forces V to redeem PRF values wrt these same params. The DLEQ proof certainly cannot be verified without using the same params, but it seems like the blinded tokens should also be signed in such a way that the params are implicitly embedded -- as in the first idea.\r\n\r\nMaybe I am mistaken though?",
          "createdAt": "2018-06-16T02:48:16Z",
          "updatedAt": "2018-06-16T02:48:37Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed by #7.",
          "createdAt": "2018-06-21T00:47:46Z",
          "updatedAt": "2018-06-21T00:47:46Z"
        }
      ]
    },
    {
      "number": 6,
      "id": "MDU6SXNzdWUzMzI5OTgxNjM=",
      "title": "Expand test vectors with DLEQ proof outputs",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/6",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chris-wood"
      ],
      "labels": [],
      "body": "",
      "createdAt": "2018-06-16T16:21:39Z",
      "updatedAt": "2019-03-06T16:50:26Z",
      "closedAt": "2019-03-06T14:19:41Z",
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "@chris-wood I was planning to add the DLEQ test vectors as part of the work that I am doing and I was wondering how exactly SHA-512 is used for curves P-384 and P-256 (and likewise SHA-256 for P-384 and P-512)? If I'm not mistaken, if you just take the hash output mod p then this will be biased, or am I missing something?\r\n\r\nAlso do you happen to have the code that you used to generate these?",
          "createdAt": "2019-02-22T15:50:40Z",
          "updatedAt": "2019-02-22T15:50:40Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "Think this is done now so I am going to close it.",
          "createdAt": "2019-03-06T14:19:40Z",
          "updatedAt": "2019-03-06T14:19:40Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Works for me!",
          "createdAt": "2019-03-06T16:50:26Z",
          "updatedAt": "2019-03-06T16:50:26Z"
        }
      ]
    },
    {
      "number": 7,
      "id": "MDU6SXNzdWUzMzI5OTgxNzA=",
      "title": "Add a section on use cases",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/7",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2018-06-16T16:21:50Z",
      "updatedAt": "2018-06-21T00:47:12Z",
      "closedAt": "2018-06-21T00:47:12Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Addressed by #5.",
          "createdAt": "2018-06-21T00:47:12Z",
          "updatedAt": "2018-06-21T00:47:12Z"
        }
      ]
    },
    {
      "number": 10,
      "id": "MDU6SXNzdWUzMzMxMDIyNzI=",
      "title": "Add more references",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/10",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "https://eprint.iacr.org/2016/144\r\nhttp://webee.technion.ac.il/~hugo/sphinx.pdf",
      "createdAt": "2018-06-17T23:41:39Z",
      "updatedAt": "2018-09-25T00:26:52Z",
      "closedAt": "2018-09-25T00:26:52Z",
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "https://eprint.iacr.org/2014/650",
          "createdAt": "2018-06-18T00:45:38Z",
          "updatedAt": "2018-06-18T00:45:38Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "will do this",
          "createdAt": "2018-06-18T00:45:57Z",
          "updatedAt": "2018-06-18T00:45:57Z"
        }
      ]
    },
    {
      "number": 13,
      "id": "MDU6SXNzdWUzNzE4NTg4NDA=",
      "title": "Change \"curve\" to \"prime-order group\"",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/13",
      "state": "CLOSED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "The VOPRF is generic and can be designed in any prime-order group so we should probably refer to it as such. We can then talk specifically about the various instantiations of prime-order groups including elliptic curves.\r\n\r\n@chris-wood If you're happy with this, then I am happy to make the change.",
      "createdAt": "2018-10-19T08:36:58Z",
      "updatedAt": "2018-10-22T13:27:16Z",
      "closedAt": "2018-10-22T13:27:16Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@alxdavids Yep, please give it a go!",
          "createdAt": "2018-10-20T01:46:18Z",
          "updatedAt": "2018-10-20T01:46:18Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "This is merged so closing",
          "createdAt": "2018-10-22T13:27:16Z",
          "updatedAt": "2018-10-22T13:27:16Z"
        }
      ]
    },
    {
      "number": 15,
      "id": "MDU6SXNzdWU0MDkzOTg2NjU=",
      "title": "Making verifiability optional",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/15",
      "state": "CLOSED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "@chris-wood I spoke to Hugo Krawczyk at RWC and he mentioned being more general in this draft so that we cover OPRFs as well as VOPRFs (i.e. make verifiability optional). This would allow us to cover additional use-cases such as that of OPAQUE (https://eprint.iacr.org/2018/163.pdf) and SPHINCS (https://eprint.iacr.org/2018/695.pdf). It may also help to differentiate the techniques that we use from VRFs without obliviousness.\r\n\r\nWhat do you think? I would be happy to write up the necessary changes.",
      "createdAt": "2019-02-12T16:51:44Z",
      "updatedAt": "2019-02-27T11:41:55Z",
      "closedAt": "2019-02-27T11:41:54Z",
      "comments": [
        {
          "author": "grittygrease",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm on board.",
          "createdAt": "2019-02-12T19:48:17Z",
          "updatedAt": "2019-02-12T19:48:17Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "\ud83d\udc4d sounds great!",
          "createdAt": "2019-02-12T19:52:00Z",
          "updatedAt": "2019-02-12T19:52:00Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@alxdavids do you think you'll be able to do this before Prague? ",
          "createdAt": "2019-02-13T14:26:49Z",
          "updatedAt": "2019-02-13T14:26:49Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "Yeah I think it would be good to get the changes in before then, so I'm happy to aim for that. ",
          "createdAt": "2019-02-13T14:30:55Z",
          "updatedAt": "2019-02-13T14:30:55Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "DOne",
          "createdAt": "2019-02-27T11:41:54Z",
          "updatedAt": "2019-02-27T11:41:54Z"
        }
      ]
    },
    {
      "number": 16,
      "id": "MDU6SXNzdWU0MDkzOTk0MjQ=",
      "title": "Add batched proofs for multiple client inputs",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/16",
      "state": "CLOSED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The draft currently only covers DLEQ proof generation for input query from the client. It would be good to integrate the batching mechanism that we use in Privacy Pass when the client makes n>1 input queries.",
      "createdAt": "2019-02-12T16:53:26Z",
      "updatedAt": "2019-02-27T11:41:44Z",
      "closedAt": "2019-02-27T11:41:44Z",
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "Done",
          "createdAt": "2019-02-27T11:41:44Z",
          "updatedAt": "2019-02-27T11:41:44Z"
        }
      ]
    },
    {
      "number": 17,
      "id": "MDU6SXNzdWU0MDk0MDEyNTg=",
      "title": "DLEQ_Generate should take the secret key as an input",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/17",
      "state": "CLOSED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2019-02-12T16:57:16Z",
      "updatedAt": "2019-02-13T14:26:29Z",
      "closedAt": "2019-02-13T14:26:29Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed in #18.",
          "createdAt": "2019-02-13T14:26:29Z",
          "updatedAt": "2019-02-13T14:26:29Z"
        }
      ]
    },
    {
      "number": 20,
      "id": "MDU6SXNzdWU0MTQ3Mjk3ODQ=",
      "title": "Rename document to draft-davidson-cfrg-oprf?",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/20",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2019-02-26T17:27:47Z",
      "updatedAt": "2019-07-04T01:22:25Z",
      "closedAt": "2019-07-04T01:22:25Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "The ship has sailed!",
          "createdAt": "2019-07-04T01:22:25Z",
          "updatedAt": "2019-07-04T01:22:25Z"
        }
      ]
    },
    {
      "number": 27,
      "id": "MDU6SXNzdWU0MjQ0MTM3NzU=",
      "title": "nit on reduction modulo p",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/27",
      "state": "CLOSED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "At section 5.1.  DLEQ_Generate\r\n~~~\r\n4. s := (r - ck) (mod p)  \r\n~~~\r\nIt must be reduced modulo the order of the curve.\r\n",
      "createdAt": "2019-03-22T21:54:20Z",
      "updatedAt": "2020-01-30T17:51:43Z",
      "closedAt": "2020-01-30T17:51:43Z",
      "comments": [
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "\r\nAt Section 5.1.  DLEQ_Generate,\r\n~~~\r\n3. c <- H_3(G,Y,M,Z,A,B)\r\n~~~\r\nand Section 5.2.  DLEQ_Verify:\r\n~~~\r\n3. c' <- H_3(G,Y,M,Z,A',B')\r\n~~~\r\nmust be reduced modulo the order of the curve.",
          "createdAt": "2019-03-22T22:05:29Z",
          "updatedAt": "2019-03-22T22:05:29Z"
        }
      ]
    },
    {
      "number": 28,
      "id": "MDU6SXNzdWU0NjQxMzU2OTE=",
      "title": "Replace additive vs multiplicative blinding terminology",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/28",
      "state": "CLOSED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "From Hugo:\r\n```\r\nA note on terminology: additive vs multiplicative is problematic since in the\r\ncase of multiplicative notation this becomes multiplicative vs exponential with\r\nmultiplicative playing two different meanings. I thought maybe calling them\r\nFixed-base blinding (FBB) vs Variable-base blinding (VBB).\r\n```\r\ni.e. we should replace additive blinding with FBB, and multiplicative with VBB.",
      "createdAt": "2019-07-04T08:30:19Z",
      "updatedAt": "2019-07-05T13:45:07Z",
      "closedAt": "2019-07-05T13:45:07Z",
      "comments": []
    },
    {
      "number": 29,
      "id": "MDU6SXNzdWU0NjQxNDQ3Mjg=",
      "title": "Certified public key",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/29",
      "state": "CLOSED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "In our protocol, the public key is `(G, Y)` where `Y = kG` for the Server's key `k`.\r\n\r\nFrom Hugo:\r\n\r\n```\r\nThe reason is that when Y is not certified (namely, the client gets it from the\r\nserver but cannot verify it - as in OPAQUE settings where the client does not\r\nstore Y), there are some \"attacks\" that we have identified that do not seem to\r\nhave a practical effect but suffice to show that the OPRF with additive blinding\r\ndoes not satisfy our UC definition of OPRF (this is noted in the OPAQUE paper). \r\nWe are working on this now to show that one can weaken the UC functionality to\r\naccept the additive blinding as secure and showing that this definition suffices\r\nfor OPAQUE. But we don't have the full results yet. The reason I prefer NOT to\r\ninclude Y under the hash is that if you do multiplicative blinding in the\r\nnon-verifiable case then you don't need Y at all, and if you are in a verifiable\r\ncase with certified Y then the \"attack\" does not work. Still, for the\r\nnon-certified Y case and additive blinding, the issue is not fully resolved. For\r\nOPAQUE I was hoping that by the time we standardize on it, we will have a better\r\nunderstanding of this issue and will be able to eliminate Y under the hash but\r\nnow it is a bit premature to have 100% confidence.\r\n```\r\n\r\nSo I think the way to resolve this is to either specify that `Y` is certified in the additive case, or we could include `Y` in the hash (i.e. compute `H(x,Y,H1(x)^k)`). It's true that we don't need to do this in the multiplicative case so maybe including in the hash is overkill, and we should just go with certification?\r\n\r\n@chris-wood for opinion.",
      "createdAt": "2019-07-04T08:49:04Z",
      "updatedAt": "2020-03-09T12:25:06Z",
      "closedAt": "2020-03-09T12:25:06Z",
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm not sure what the best way to tackle this is? It seems like quite an involved change and so maybe we should keep this open for a future issue?",
          "createdAt": "2019-07-08T10:29:02Z",
          "updatedAt": "2019-07-08T10:29:02Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Sorry for the extreme delay, @alxdavids! I think including `Y` in the hash is a fine path forward. Even in the (non-verifiable) OPRF case, it seems strange to not include some representation of the server's public key. Can we do that?",
          "createdAt": "2020-03-05T22:48:48Z",
          "updatedAt": "2020-03-05T22:48:48Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "Sure, that sounds fine to me. I'll write up the change.",
          "createdAt": "2020-03-06T11:25:29Z",
          "updatedAt": "2020-03-06T11:25:29Z"
        }
      ]
    },
    {
      "number": 30,
      "id": "MDU6SXNzdWU0NjQxNDUwNzU=",
      "title": "Correct sections",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/30",
      "state": "CLOSED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "Hugo noted that some of the Sections are incorrectly labelled.",
      "createdAt": "2019-07-04T08:49:47Z",
      "updatedAt": "2019-07-08T13:00:55Z",
      "closedAt": "2019-07-08T13:00:55Z",
      "comments": []
    },
    {
      "number": 31,
      "id": "MDU6SXNzdWU0NjQxNDY0OTc=",
      "title": "Clarify RSA blind signature scheme in intro",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/31",
      "state": "CLOSED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "From Hugo:\r\n\r\n```\r\n> This schemes does not work with RSA. You cannot compute the inverse of r\r\n> without knowing the factorization of N. Chaum's scheme uses multiplicative\r\n> blinding (see my comments on this issue).  \r\n```\r\n\r\nMaybe we should just remove this section, it's probably not that helpful anyway?",
      "createdAt": "2019-07-04T08:52:56Z",
      "updatedAt": "2019-07-08T13:06:08Z",
      "closedAt": "2019-07-08T13:06:08Z",
      "comments": []
    },
    {
      "number": 32,
      "id": "MDU6SXNzdWU0NjQxNDgyODk=",
      "title": "Clean up security properties for OPRF",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/32",
      "state": "CLOSED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "The pseudorandomness of the function dictates that it is unlinkable and non-malleable, so we can remove these properties. There are some other things that Hugo brought up:\r\n\r\n```\r\n   o  The output distribution of y = F(k, x) is indistinguishable from\r\n      the uniform distribution in the domain of the function F.\r\n\r\n> domain -> range\r\n\r\n> It is more general and \"more correct\" to define PRF as in the introduction\r\n> \"F is pseudorandom if the output y = F(k, x) is indistinguishable from\r\n> uniformly sampling any element in F's range for random choice of k.\"\r\n> From this all the properties you list follow (including the \"additional ones\")\r\n```\r\n\r\n```\r\n   Additionally, we require the following additional properties:\r\n\r\n> additional twice\r\n```\r\n\r\n```\r\n   o  Oblivious: P must learn nothing about V's input, and V must learn\r\n      nothing about P's private key.\r\n\r\n> Oblivious should include also \"P learns nothing about the output of the\r\n> function\". Formally, this is redundant but it is a very important consequence\r\n> of the definition and it is better to say it explicitly.\r\n```\r\n\r\n```\r\n   o  Verifiable: V must only complete execution of the protocol if it\r\n      can successfully assert that P used its secret key k.\r\n\r\n> \"used its key\" is a bit too vague. Maybe: if it can successfully assert that\r\n> the OPRF output V computes is correct with respect to the OPRF key k held by\r\n> P.\r\n```\r\n\r\n```\r\n   In practice, the notion of verifiability requires that P commits to\r\n   the key k before the actual protocol execution takes place.  Then V\r\n   verifies that P has used k in the protocol using this commitment.\r\n\r\n> We could add: Below we will refer to this commitment to k as a \"public key\".\r\n```",
      "createdAt": "2019-07-04T08:56:58Z",
      "updatedAt": "2019-07-08T16:51:09Z",
      "closedAt": "2019-07-08T16:51:09Z",
      "comments": []
    },
    {
      "number": 33,
      "id": "MDU6SXNzdWU0NjQxNDk3MDY=",
      "title": "Clarify generator description",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/33",
      "state": "CLOSED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "We should clarify whether the generator `G` is fixed as part of the parameters of the group `GG`, or whether it is sampled randomly is specified as part of the OPRFs parameters. I would prefer the first.",
      "createdAt": "2019-07-04T08:59:46Z",
      "updatedAt": "2019-07-05T13:51:30Z",
      "closedAt": "2019-07-05T13:51:30Z",
      "comments": []
    },
    {
      "number": 34,
      "id": "MDU6SXNzdWU0NjQxNTEwODg=",
      "title": "OPRF_Sign -> OPRF_Eval",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/34",
      "state": "CLOSED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "It may be more accurate to replace \"signing\" terminology with \"evaluation\". Signing is asymmetric terminology and so this may be confusing, since (V)OPRFs are essentially symmetric primitives.\r\n\r\nFrom Hugo:\r\n\r\n```\r\n   o  OPRF_Sign(k,M,h): Sign input M using secret key k to produce Z,\r\n      the input h is optional and equal to the cofactor of an elliptic\r\n      curve.  If h is not provided then it defaults to 1.\r\n\r\n> Using \"Sign\" may be confusing, especially in the non-verifiable OPRFs.\r\n> Maybe OPRF_Eval?  Signer/Verifier would be Server/Client (one can still \r\n> use signer/verifier in the context of V-OPRF).\r\n```",
      "createdAt": "2019-07-04T09:02:29Z",
      "updatedAt": "2019-07-05T13:46:59Z",
      "closedAt": "2019-07-05T13:46:59Z",
      "comments": []
    },
    {
      "number": 35,
      "id": "MDU6SXNzdWU0NjQxNTM1NzE=",
      "title": "Minor comments from Hugo",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/35",
      "state": "CLOSED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "Fix the following:\r\n```\r\n        Verifier              Prover\r\n     ------------------------------------\r\n        r <-$ GG\r\n\r\n> r is chosen randomly from GF(p) not GG\r\n\r\n        M = rH_1(x)\r\n                      M\r\n                   ------->\r\n                              Z = kM\r\n                              [D = DLEQ_Generate(k,G,Y,M,Z)]\r\n                     Z[,D]\r\n                   <-------\r\n       [b = DLEQ_Verify(G,Y,M,Z,D)]\r\n       N = Zr^(-1)\r\n\r\n > It may be a good idea to say explicitly that the inverse of r is modulo the\r\n > group order p.\r\n```\r\n```\r\n  l: Some suitable choice of key-length (e.g. as described in {{NIST}}).\r\n\r\n> {{NIST}} should be formatted as [ ]\r\n```\r\n```\r\n   Steps:\r\n\r\n    1. N := (1/r)Z\r\n\r\n> It was r^(-1) before - use same notation everwhere\r\n```\r\n```\r\n   If the client preprocesses values of the form rG, then computing\r\n\r\n> you don't need to pre-process values rG to get the computational advantage.\r\n> This comes from the cost of a fixed-base vs variable base exponentiation.\r\n> The only thing you need to pre-process is some tables for the specific G\r\n> (this applies to the public key if you have it and use it often).\r\n```\r\n```\r\n    1. A' := (sG + cY)\r\n    2. B' := (sM + cZ)\r\n    3. c' <- H_3(G,Y,M,Z,A',B')\r\n    4. Output c == c'\r\n\r\n> It may be prudent remarking that, as in the case of Schnorr/(EC)DSA, revealing\r\n> or reusing r lead to the leakage of the secret OPRF key k.\r\n```\r\n```\r\n   o  Proof verification is much more efficient, from 4m modular\r\n\r\n> I guess this should be 4n?\r\n\r\n      exponentiations to 2n+4.\r\n```\r\n```\r\nMoreover, it each key should be generated from a source of\r\n> remove 'it'\r\n   safe, cryptographic randomness.\r\n\r\n   Another critical aspect of this protocol is reliance on\r\n> Replace \"Another\" with \"A\" (rotation of k is good but not critical in general)\r\n```\r\n```\r\n   VOPRF sessions for a given user and thus compromises their privacy.\r\n\r\n> compromise (not compromises)\r\n```\r\n```\r\n   This VOPRF protocol is used by Privacy Pass system \r\n> add reference here\r\n```\r\n```\r\n   [SJKS17]   \"SPHINX, A Password Store that Perfectly Hides from\r\n              Itself\", n.d.,\r\n              <http://webee.technion.ac.il/%7Ehugo/sphinx.pdf>.\r\n> Replace with this URL:\r\n> https://eprint.iacr.org/2018/695.pdf\r\n```\r\n",
      "createdAt": "2019-07-04T09:08:00Z",
      "updatedAt": "2019-07-08T13:43:26Z",
      "closedAt": "2019-07-08T13:43:26Z",
      "comments": []
    },
    {
      "number": 36,
      "id": "MDU6SXNzdWU0NjQxNTQyODQ=",
      "title": "Replace PRNG with RO for batched proof",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/36",
      "state": "CLOSED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "As Hugo notes:\r\n```\r\n 2. d1,...dn <- PRNG(seed,salt,info,n)\r\n\r\n> PRNGs inputs are just a seed, usually a secret one. There are no guarantees\r\n> about the pseudorandomness of the output for a public seed. Additional items\r\n> such as salt, info, n, are not accommodated at all in a PRNG. You could put\r\n> these under H_4 or use a (variable-length output) PRF instead of PRNG.\r\n> But also in the PRF case, non-secret key does not guarantee pseudorandomness.\r\n> What you seem to need is a RO which on inputs G,Y,[Mi,Zi],salt,info,n outputs \r\n> d1,...dn (is there a proof that batching is secure when both parties derive d_i\r\n> using a RO?)\r\n\r\n> Btw, independently of the above issues, if you let the prover choose the salt,\r\n> this can help him (at least in theory) to cheat - i.e., finding a set of\r\n> \"misleading\"  d's.\r\n```\r\nI think it will be easiest to introduce an additional RO `H_4` that handles the generation of `d1,...,d4` here.\r\n\r\nWe would also need to clarify the best instantiations for doing this, it may be that we stick with SHAKE-SHA256 and HKDF-Expand-SHA256 (this should also be clarified as we currently just say HKDF-256). The notion of the `salt` should be replaced with a domain separation label.",
      "createdAt": "2019-07-04T09:09:30Z",
      "updatedAt": "2019-07-08T13:18:31Z",
      "closedAt": "2019-07-08T13:18:31Z",
      "comments": []
    },
    {
      "number": 37,
      "id": "MDU6SXNzdWU0NjQxNTc1NTU=",
      "title": "Fix OPRF password applications",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/37",
      "state": "CLOSED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "From Hugo:\r\n```\r\n   Examples of such password checkers already exist, for example:\r\n   [JKKX16], [JKK14] and [SJKS17].\r\n\r\n> The above papers do not propose a use for password checker. They do present\r\n> some important applications of OPRFs in the password domain: password-protected\r\n> storage [JKK14,JKKX16] and a password manager that secures passwords against \r\n> offline dictionary attacks even when the password store is compromised [SJKS17].\r\n\r\n> You may also want to note the OPRF functions presented here admit very\r\n> efficient threshold schemes where the key is shared between n servers, \r\n> t of which need to be broken into to compromise the OPRF, and where the key \r\n> never exists in a single place, neither during generation nor for computing \r\n> the OPRF function [JKKX17].\r\n> [JKKX17] TOPPSS: Cost-minimal Password-Protected Secret Sharing based on \r\n> Threshold OPRF https://eprint.iacr.org/2017/363.pdf\r\n```",
      "createdAt": "2019-07-04T09:16:21Z",
      "updatedAt": "2019-07-05T13:36:18Z",
      "closedAt": "2019-07-05T13:36:18Z",
      "comments": []
    },
    {
      "number": 50,
      "id": "MDU6SXNzdWU0OTk1MDk4OTQ=",
      "title": "Add to security considerations",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/50",
      "state": "CLOSED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "- We need to discuss the effectiveness of using OPRFs as an oracle for producing q-Strong-DH samples\r\n- Go into more depth on key rotation and how it can be used to prevent token hoarding\r\n- Discuss the impact on client privacy from having small or segregated user bases",
      "createdAt": "2019-09-27T15:27:25Z",
      "updatedAt": "2019-11-14T17:34:54Z",
      "closedAt": "2019-11-14T17:34:54Z",
      "comments": []
    },
    {
      "number": 51,
      "id": "MDU6SXNzdWU1MDAyNTQ3MzM=",
      "title": "Create new test vectors",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/51",
      "state": "CLOSED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chris-wood"
      ],
      "labels": [],
      "body": "- OPRF evaluations for new ciphersuites\r\n- DLEQ evaluations\r\n- Batched DLEQ evaluations",
      "createdAt": "2019-09-30T12:48:12Z",
      "updatedAt": "2020-11-10T23:08:38Z",
      "closedAt": "2020-11-10T23:08:38Z",
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "I've written a proof-of-concept implementation of draft-02 in Go here: https://github.com/alxdavids/voprf-poc. I can use this to generate test vectors for all of the different cases.",
          "createdAt": "2020-01-28T16:20:19Z",
          "updatedAt": "2020-01-28T16:20:19Z"
        },
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "So, I think probably the POC in sage can generate the test vectors; but it needs some changes.",
          "createdAt": "2020-10-16T13:32:56Z",
          "updatedAt": "2020-10-16T13:32:56Z"
        }
      ]
    },
    {
      "number": 52,
      "id": "MDU6SXNzdWU1MDAyNjIxNjI=",
      "title": "Establish new ciphersuites",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/52",
      "state": "CLOSED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "Since OPRFs can be used to instantiate q-Strong-DH oracles, they are susceptible to attacks that reduce security by log_2(m), where m is the number of queries.\r\n\r\nWe should establish new ciphersuites that use underlying curves with > 128 bits of security (e.g. using Curve448) to protect against these attacks. Proposed ciphersuites:\r\n\r\nP384:\r\n```\r\n## ECVOPRF-P384-HKDF-SHA512:\r\n\r\n- GG: secp384r1 {{SEC2}}\r\n- H_1: P384-SHA512-ICART-RO {{I-D.irtf-cfrg-hash-to-curve}}\r\n  - label: voprf_h2c_p384\r\n- H_2: SHA512\r\n- H_3: SHA512\r\n- H_4: SHA512\r\n- H_5: HKDF-Expand-SHA512 {{RFC5869}}\r\n```\r\n\r\nCurve448:\r\n```\r\n## ECVOPRF-Curve448-HKDF-SHA512:\r\n\r\n- GG: curve448 {{RFC7748}}\r\n- H_1: curve448-SHA512-ICART-RO {{I-D.irtf-cfrg-hash-to-curve}}\r\n  - label: voprf_h2c_c448\r\n- H_2: SHA512\r\n- H_3: SHA512\r\n- H_4: SHA512\r\n- H_5: HKDF-Expand-SHA512 {{RFC5869}}\r\n```\r\n\r\nP521:\r\n```\r\n## ECVOPRF-P521-HKDF-SHA512:\r\n\r\n- GG: secp521r {{SEC2}}\r\n- H_1: P521-SHA512-SSWU-RO {{I-D.irtf-cfrg-hash-to-curve}}\r\n  - label: voprf_h2c_p521\r\n- H_2: SHA512\r\n- H_3: SHA512\r\n- H_4: SHA512\r\n- H_5: HKDF-Expand-SHA512 {{RFC5869}}\r\n```",
      "createdAt": "2019-09-30T13:01:29Z",
      "updatedAt": "2019-11-14T17:34:46Z",
      "closedAt": "2019-11-14T17:34:46Z",
      "comments": []
    },
    {
      "number": 53,
      "id": "MDU6SXNzdWU1MDAyNjQ4ODQ=",
      "title": "Domain separation",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/53",
      "state": "CLOSED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chris-wood"
      ],
      "labels": [],
      "body": "We should add a section that provides clarity on the domain separation interface and how it is introduced to the OPRF.",
      "createdAt": "2019-09-30T13:06:18Z",
      "updatedAt": "2020-03-06T11:24:55Z",
      "closedAt": "2020-03-06T11:24:55Z",
      "comments": []
    },
    {
      "number": 54,
      "id": "MDU6SXNzdWU1MDAyNjg2MTE=",
      "title": "Protocol integration",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/54",
      "state": "CLOSED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "We should add a section that discusses the OPRF API that should be used when using OPRFs as part of another protocol. We should present both descriptions and suggestions around how the functionality should be integrated.\r\n",
      "createdAt": "2019-09-30T13:12:53Z",
      "updatedAt": "2019-11-14T17:34:06Z",
      "closedAt": "2019-11-14T17:34:06Z",
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "This was addressed in https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/57",
          "createdAt": "2019-11-14T17:34:04Z",
          "updatedAt": "2019-11-14T17:34:04Z"
        }
      ]
    },
    {
      "number": 56,
      "id": "MDU6SXNzdWU1MDI3MDM5MTk=",
      "title": "Better specification of batched DLEQ proof algorithm",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/56",
      "state": "CLOSED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "We need to specify the random oracle instantiation in Section 6.3 more concretely.",
      "createdAt": "2019-10-04T15:31:50Z",
      "updatedAt": "2019-11-14T17:33:26Z",
      "closedAt": "2019-11-14T17:33:26Z",
      "comments": []
    },
    {
      "number": 58,
      "id": "MDU6SXNzdWU1MDQxNDMyNzk=",
      "title": "Allow specifying auxiliary data in OPRF_Finalize",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/58",
      "state": "CLOSED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "We should modify the OPRF_Finalize procedure to run:\r\n\r\n```\r\ndk = H_2(lbl, x .. N)\r\ny = H_2(dk, aux)\r\n```\r\n\r\nwhere aux is arbitrary auxiliary data that is also stored by the client. This is closer to current implementations of the Privacy Pass protocol and likely to be useful in applications where there is a later redemption step that needs to be bound to specific request data.",
      "createdAt": "2019-10-08T16:17:00Z",
      "updatedAt": "2019-11-14T17:34:36Z",
      "closedAt": "2019-11-14T17:34:35Z",
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "addressed in https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/60",
          "createdAt": "2019-11-14T17:34:35Z",
          "updatedAt": "2019-11-14T17:34:35Z"
        }
      ]
    },
    {
      "number": 62,
      "id": "MDU6SXNzdWU1NDUwMzg0MzM=",
      "title": "Batched algorithms for blinding/unblinding",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/62",
      "state": "CLOSED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "We need to concretely lay out the modified versions of VOPRF_Blind and VOPRF_Unblind in the batched execution mode. We should also provide better instructions for modifying the protocol in Section 5.3.3.",
      "createdAt": "2020-01-03T15:27:57Z",
      "updatedAt": "2020-03-01T21:14:36Z",
      "closedAt": "2020-03-01T21:14:36Z",
      "comments": []
    },
    {
      "number": 66,
      "id": "MDU6SXNzdWU1NjE3ODE1MTk=",
      "title": "Fix sampling of DLEQ challenge",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/66",
      "state": "CLOSED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "The sampling of the DLEQ challenge value (c) is currently performed as the output of a SHA-512 evaluation for all supported ciphersuites. However, in the case of P-521, this is incorrect, as the size of the field is 521 bits.\r\n\r\nWe should update the draft specification to output this challenge as the output of an HKDF-Expand so that we can expand the output arbirtarily to the required number of bytes.",
      "createdAt": "2020-02-07T17:45:59Z",
      "updatedAt": "2020-03-03T10:41:53Z",
      "closedAt": "2020-03-03T10:41:53Z",
      "comments": [
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "A similar discussion is currently running in the hash-to-curve draft. In there, the hash-to-field function is being designed.\r\n\r\nhttps://github.com/cfrg/draft-irtf-cfrg-hash-to-curve/issues/202",
          "createdAt": "2020-02-07T18:30:43Z",
          "updatedAt": "2020-02-07T18:30:43Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "@armfazh It would be good to get consensus on the best approach once the discussion is concluded. Until then I've written a PR that just uses HKDF-Expand-SHA512 instead of sampling using SHA512.",
          "createdAt": "2020-02-10T11:40:35Z",
          "updatedAt": "2020-02-10T11:41:00Z"
        }
      ]
    },
    {
      "number": 76,
      "id": "MDU6SXNzdWU2MDk0MjExOTQ=",
      "title": "Improve VOPRF API",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/76",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "PrivacyPass, for example, requires clients to run Setup() and use its results, somehow. There isn't currently a clean API one can use for operating on this private key. We should spend some time here to make integration into other protocols simpler. ",
      "createdAt": "2020-04-29T23:05:27Z",
      "updatedAt": "2020-06-22T08:25:15Z",
      "closedAt": "2020-06-22T08:25:15Z",
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "I think this is likely to be addressed in #91 ",
          "createdAt": "2020-06-02T14:59:34Z",
          "updatedAt": "2020-06-02T14:59:34Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "OPAQUE needs the following APIs:\r\n\r\n- GenerateKeyPair()\r\n- Blind(x)\r\n- Evaluate(k, M)\r\n- Unblind(r, Z)\r\n- Finalize(x, N, dst)\r\n- Serialize(x)\r\n- Decode(enc)\r\n\r\nWe don't have GenerateKeyPair(). I'll add that.  ",
          "createdAt": "2020-06-04T20:43:37Z",
          "updatedAt": "2020-06-04T20:43:48Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "Would there be any room in OPAQUE to rename `GenerateKeyPair` to `KeyGen`? This is mostly because I think this is a nicer name, so no worries if not.",
          "createdAt": "2020-06-19T11:43:51Z",
          "updatedAt": "2020-06-19T11:43:51Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Yeah, that works for me. ",
          "createdAt": "2020-06-19T14:52:39Z",
          "updatedAt": "2020-06-19T14:52:39Z"
        }
      ]
    },
    {
      "number": 77,
      "id": "MDU6SXNzdWU2MTUwMDA0MTY=",
      "title": "Specify Serialize/Deserialize APIs",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/77",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "This will make integration in PrivacyPass (and elsewhere) much easier. For example, rather than say \"parse these opaque bytes and turn them into curve points,\" for example, we can say \"element = Deserialize(bytes).\" In general, the more we can hide curve details from higher-level documents, the better.",
      "createdAt": "2020-05-08T21:37:27Z",
      "updatedAt": "2020-06-04T20:08:25Z",
      "closedAt": "2020-06-04T20:08:25Z",
      "comments": [
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "Agree, each group must specify how to encode/decode group elements into binary strings.",
          "createdAt": "2020-05-29T00:47:16Z",
          "updatedAt": "2020-05-29T00:47:16Z"
        }
      ]
    },
    {
      "number": 79,
      "id": "MDU6SXNzdWU2MjY4OTUyODY=",
      "title": "Specify domain-separated hashes",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/79",
      "state": "CLOSED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "By following the recommendations given in the hash to curve draft, this draft must specify how to domain-separate all the hash functions required.\r\n",
      "createdAt": "2020-05-28T23:44:46Z",
      "updatedAt": "2020-06-22T14:54:09Z",
      "closedAt": "2020-06-22T14:54:09Z",
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "Seems related to #89 and #83, @chris-wood would you be able to take this one as well?",
          "createdAt": "2020-06-03T10:03:57Z",
          "updatedAt": "2020-06-03T10:03:57Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "We need to make sure the hashes are handled correctly for the proof cases",
          "createdAt": "2020-06-18T14:25:09Z",
          "updatedAt": "2020-06-18T14:25:09Z"
        }
      ]
    },
    {
      "number": 80,
      "id": "MDU6SXNzdWU2MjY5MTc0NDY=",
      "title": "Unifies the name of actors V and P to longer names",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/80",
      "state": "CLOSED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "V and P refer to the participants of a zero-knowledge proofs. Consider give a more familiar name to this actors, Verifier/Prover, Victor/Peggy\r\n",
      "createdAt": "2020-05-29T00:31:58Z",
      "updatedAt": "2020-06-05T14:13:21Z",
      "closedAt": "2020-06-05T14:13:21Z",
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "I think expanding to their full titles is fine. I'm personally against using human names for protocol participants, but I'm willing to reconsider if it is believed that is a much better way of representing them.",
          "createdAt": "2020-06-02T14:58:44Z",
          "updatedAt": "2020-06-02T14:58:44Z"
        }
      ]
    },
    {
      "number": 81,
      "id": "MDU6SXNzdWU2MjY5MTgyNTc=",
      "title": "Improve group properties and descriptions",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/81",
      "state": "CLOSED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "This document requires the use of prime-order groups.\r\nThe document does not emphasize how to generate these groups nor how to choose them between some existing groups.\r\n\r\n",
      "createdAt": "2020-05-29T00:34:37Z",
      "updatedAt": "2020-06-04T20:08:25Z",
      "closedAt": "2020-06-04T20:08:25Z",
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "Also need to remove all elliptic-curve specific notation outside of ciphersuite specification and recommendations for instantiating a prime-order group.",
          "createdAt": "2020-05-29T11:04:17Z",
          "updatedAt": "2020-05-29T11:04:17Z"
        }
      ]
    },
    {
      "number": 82,
      "id": "MDU6SXNzdWU2MjY5MTg4OTk=",
      "title": "Key Generation for Prover",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/82",
      "state": "CLOSED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "Currently, the Prover's key `k` is calculated during the Setup phase. \r\nUsually, the setup phase happens in a public environment.\r\nThen, there is required a GenerateKey step only for the Prover.",
      "createdAt": "2020-05-29T00:36:50Z",
      "updatedAt": "2020-06-04T20:08:26Z",
      "closedAt": "2020-06-04T20:08:26Z",
      "comments": []
    },
    {
      "number": 83,
      "id": "MDU6SXNzdWU2MjY5MTk4MjE=",
      "title": "aux additional data",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/83",
      "state": "CLOSED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chris-wood"
      ],
      "labels": [],
      "body": "If the only purpose of `aux` additional info is to provide domain separation, then this can be re-engineered and unified together with the other hash functions. Related #79 \r\n\r\n",
      "createdAt": "2020-05-29T00:39:43Z",
      "updatedAt": "2020-06-18T14:24:27Z",
      "closedAt": "2020-06-18T14:24:27Z",
      "comments": [
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "_Originally posted by @chris-wood in https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/78_\r\nShould we unify around DST instead of `aux`?\r\n\r\n",
          "createdAt": "2020-06-01T17:08:58Z",
          "updatedAt": "2020-06-01T17:08:58Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "I think we need multiple DSTs. One for the DLEQ proof generation, and then `aux`. However, I think capturing all DST usages under a specific set of guidelines makes sense. The only difference is that Finalize depends on client properties, where as the DLEQ DST should probably be fixed (to something VOPRF ciphersuite-specific) so that the client & server are in agreement.",
          "createdAt": "2020-06-02T14:49:56Z",
          "updatedAt": "2020-06-02T14:49:56Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "Assigning to @chris-wood to do as it is related to #89",
          "createdAt": "2020-06-03T10:03:06Z",
          "updatedAt": "2020-06-03T10:03:06Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "Done: #102 ",
          "createdAt": "2020-06-18T14:24:27Z",
          "updatedAt": "2020-06-18T14:24:27Z"
        }
      ]
    },
    {
      "number": 84,
      "id": "MDU6SXNzdWU2MjY5MjEwMTk=",
      "title": "Define parameters based on the security parameter",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/84",
      "state": "CLOSED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "Define group parameters based on the security parameter.\r\n\r\n",
      "createdAt": "2020-05-29T00:43:51Z",
      "updatedAt": "2020-06-05T14:35:24Z",
      "closedAt": "2020-06-05T14:35:24Z",
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "I would like to remove mention of the security parameter altogether.",
          "createdAt": "2020-06-02T14:30:44Z",
          "updatedAt": "2020-06-02T14:30:44Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "Curious to see these changes.",
          "createdAt": "2020-06-02T17:26:14Z",
          "updatedAt": "2020-06-02T17:26:14Z"
        }
      ]
    },
    {
      "number": 85,
      "id": "MDU6SXNzdWU2MjY5MjI2MDM=",
      "title": "Unify DLEQ for n>=1 or n>=0.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/85",
      "state": "CLOSED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "I was curious if there is a way to unify the description of DLEQ for n>=1, or even for n>=0.\r\nIf this will be possible, we end up with a single set of algorithms, so a shorter description. \r\n",
      "createdAt": "2020-05-29T00:49:42Z",
      "updatedAt": "2020-06-04T20:08:25Z",
      "closedAt": "2020-06-04T20:08:25Z",
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "We could unify the algorithms, but the specific DLEQ algorithm for n=1 is much more efficient than running batched DLEQ for n>=1. So it depends if we want to preserve that efficiency in the n=1 case. I agree that unifying for simplicity's sake would be nice.",
          "createdAt": "2020-05-29T10:58:29Z",
          "updatedAt": "2020-05-29T10:58:29Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "One way to unify is avoiding the calculation of the scalar multiplication by c1.",
          "createdAt": "2020-05-29T18:04:31Z",
          "updatedAt": "2020-05-29T18:04:31Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "Hmmm good idea, we could also just set `c1 = 1` in the n=1 case. Let me investigate further.",
          "createdAt": "2020-06-01T12:38:14Z",
          "updatedAt": "2020-06-01T12:38:14Z"
        }
      ]
    },
    {
      "number": 86,
      "id": "MDU6SXNzdWU2MjY5MjUzODY=",
      "title": "Allowing blinding variants?",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/86",
      "state": "CLOSED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "the document mentioned two blinding methods: rH1(x) and rG+H1(x). \r\nHowever, it wasn't mentioned which one to use at suite level.",
      "createdAt": "2020-05-29T00:59:34Z",
      "updatedAt": "2020-06-18T14:23:51Z",
      "closedAt": "2020-06-18T14:23:51Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@armfazh is that something we need to bake into a suite? I'm not so sure. It seems like an implementation detail to me.",
          "createdAt": "2020-06-01T15:21:08Z",
          "updatedAt": "2020-06-01T15:21:08Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "My understanding is that defining a suite implies test vectors, which implies that everyone must follow the same procedure.\r\nSo, almost every variant in the construction introduces a parameter in the suite.\r\n",
          "createdAt": "2020-06-01T16:52:27Z",
          "updatedAt": "2020-06-01T16:52:27Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "The test vectors for the output of the protocol do not depend on the blinding method. However, the test vectors for the proof values will be different as they are evaluated over whatever the client sends. \r\n\r\nI would rather not state the blinding method as part of the suite though. I think it may be better to also implement fixed-base blinding as part of the proof-of-concept implementation, and then specify proof values for both blinding types.",
          "createdAt": "2020-06-02T14:47:40Z",
          "updatedAt": "2020-06-03T10:06:29Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "That means the proof must encode which blinding is used ?",
          "createdAt": "2020-06-02T17:15:53Z",
          "updatedAt": "2020-06-02T17:15:53Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "(originally thought that I had replied by email, but it seems that it didn't make it here)\r\n\r\nNo, the proof test vector values will change because the client inputs will change. The proof doesn't care what blinding is used.",
          "createdAt": "2020-06-03T10:05:05Z",
          "updatedAt": "2020-06-03T10:05:33Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "I got it now. The blinding method is orthogonal to the suite used.",
          "createdAt": "2020-06-03T17:29:51Z",
          "updatedAt": "2020-06-03T17:29:51Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "Okay, I'm going to close this as its an implementation detail.",
          "createdAt": "2020-06-18T14:23:51Z",
          "updatedAt": "2020-06-18T14:23:51Z"
        }
      ]
    },
    {
      "number": 87,
      "id": "MDU6SXNzdWU2MjcxODQ5MTI=",
      "title": "Replace mention of security parameter with ciphersuite ID",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/87",
      "state": "CLOSED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "Currently the Setup algorithm takes a security parameter as input indicating the size of the group that is used. We should replace this with an identifier indicating which ciphersuite to use.",
      "createdAt": "2020-05-29T11:01:50Z",
      "updatedAt": "2020-06-05T14:35:12Z",
      "closedAt": "2020-06-05T14:35:12Z",
      "comments": []
    },
    {
      "number": 88,
      "id": "MDU6SXNzdWU2MjcxODc4OTM=",
      "title": "Remove OPRF Setup phase of protocol",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/88",
      "state": "CLOSED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "Just mention that the server should run whatever it needs to and then publishes the results publicly.",
      "createdAt": "2020-05-29T11:07:42Z",
      "updatedAt": "2020-06-04T20:08:26Z",
      "closedAt": "2020-06-04T20:08:26Z",
      "comments": []
    },
    {
      "number": 89,
      "id": "MDU6SXNzdWU2Mjg1MTM0ODU=",
      "title": "Finalize is underspecified",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/89",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chris-wood"
      ],
      "labels": [],
      "body": "Finalize uses `H_2` like so:\r\n\r\n```\r\nH_2(DST, x .. N)\r\n```\r\n\r\nThe reference implementation basically uses `DST` as a keyed hash, yet we define it as a hash function. Maybe we should just say this is a PRF, and then concretely say it's HMAC-H (with H depending on the suite) keyed by `DST`? (That works fine for HMAC as it's a dualPRF, but perhaps not other PRFs, so I might suggest swapping the input orders.)\r\n\r\nAlso, for what it's worth, 2HashDH doesn't require H_2 to be a PRF, so maybe this is a bit much. Maybe we should just use a normal hash (SHA2) and define an encoding of the inputs?",
      "createdAt": "2020-06-01T15:09:05Z",
      "updatedAt": "2020-06-18T14:22:13Z",
      "closedAt": "2020-06-18T14:22:13Z",
      "comments": [
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "_Originally posted by @chris-wood in https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/78_\r\n> Unrelated to this change, but what is `u` here? Is DST guaranteed to be of size `u`? (2HashDH doesn't specify the hash this way. Maybe we ought to go back to what's in the original paper?)\r\n\r\n",
          "createdAt": "2020-06-01T17:08:16Z",
          "updatedAt": "2020-06-01T17:08:16Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "This was done #97",
          "createdAt": "2020-06-18T14:22:12Z",
          "updatedAt": "2020-06-18T14:22:12Z"
        }
      ]
    },
    {
      "number": 90,
      "id": "MDU6SXNzdWU2Mjg1OTUyMDU=",
      "title": "Consider to add a table of groups and their parameters",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/90",
      "state": "CLOSED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "_Originally posted by @chris-wood in https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/78_\r\n\r\nShould we include a table that lists the group (name) and its parameters, e.g., the generator, base field prime order, etc.?\r\n",
      "createdAt": "2020-06-01T17:10:08Z",
      "updatedAt": "2020-06-24T08:42:17Z",
      "closedAt": "2020-06-24T08:42:17Z",
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "@chris-wood This is actually going to be pretty difficult due to the trade-offs that can be chosen with the static DH oracle. Essentially, due to Brown-Gallant & Cheon the strength of breaking DLP is:\r\n![image](https://user-images.githubusercontent.com/7470539/85149143-db02ba80-b248-11ea-9921-d816bde109aa.png)\r\n(taken from Section 21.5 of https://www.math.auckland.ac.nz/~sgal018/crypto-book/main.pdf). This translates, for example, to:\r\n![image](https://user-images.githubusercontent.com/7470539/85149258-fc63a680-b248-11ea-9ca2-357b2b995feb.png)\r\nBut each curve comes with its own `r-1` factors. There are also variants of the attack that can be done for `r+1`, see this email for a good summary: https://mailarchive.ietf.org/arch/msg/cfrg/YDVS5Trpr6suig_VCFEOH6SOn8Q/.\r\n\r\nThe problem is that for each curve we can choose different trade-offs based on the factor itself. For example, if you can tolerate more queries you can choose a bigger factor and the group loses more security. But if this query tolerance is stricter, then the amount of security loss is also restricted. With all of this in mind, and because there are so many combinations of factors for each of the curves. I think the table here would be too complex to offer much value.\r\n\r\nWhat do you think?\r\n\r\ncc @armfazh  also.",
          "createdAt": "2020-06-19T15:25:36Z",
          "updatedAt": "2020-06-19T15:34:40Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "FWIW, I think this could be a separate CFRG draft",
          "createdAt": "2020-06-19T15:35:18Z",
          "updatedAt": "2020-06-19T15:35:18Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> FWIW, I think this could be a separate CFRG draft\r\n\r\nThat's an interesting idea -- is this something you and Taylor could work on?",
          "createdAt": "2020-06-19T15:39:40Z",
          "updatedAt": "2020-06-19T15:39:40Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't think I visualize the table yet, so I can't speak to its supposed complexity, but you do make a compelling argument against it :-) How about we just keep the static DH oracle section separate and point to it from the ciphersuite section? That is, each ciphersuite could list the effective security level in the absence of these oracles, but then we point to another section which explains the oracle problem.",
          "createdAt": "2020-06-19T15:41:40Z",
          "updatedAt": "2020-06-19T15:41:40Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "> That's an interesting idea -- is this something you and Taylor could work on?\r\n\r\nI think that's something I can definitely explore.\r\n\r\n> I don't think I visualize the table yet, so I can't speak to its supposed complexity, but you do make a compelling argument against it :-) How about we just keep the static DH oracle section separate and point to it from the ciphersuite section? That is, each ciphersuite could list the effective security level in the absence of these oracles, but then we point to another section which explains the oracle problem.\r\n\r\nYeah I think that will probably be the best approach. I'll write a candidate PR.",
          "createdAt": "2020-06-19T15:44:41Z",
          "updatedAt": "2020-06-19T15:44:41Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "Well, let's keep it simple. The purpose of listing the groups is to have a clear vision of all the parameters involved. Listing the security level is probably not required. We are adopting state-of-the-art group instances with well-known security bounds.\r\n  \r\nI think Section 7.1.4 gives a good explantion of security levels without going into the details.",
          "createdAt": "2020-06-19T21:48:26Z",
          "updatedAt": "2020-06-19T21:48:26Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "This will be fixed in #121 ",
          "createdAt": "2020-06-23T09:29:41Z",
          "updatedAt": "2020-06-23T09:29:41Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "#121 was merged, so I don't think we have to worry any more about this.",
          "createdAt": "2020-06-24T08:42:17Z",
          "updatedAt": "2020-06-24T08:42:17Z"
        }
      ]
    },
    {
      "number": 94,
      "id": "MDU6SXNzdWU2MzExMTE0NTU=",
      "title": "Use consistent casing ",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/94",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/91#discussion_r435514276",
      "createdAt": "2020-06-04T20:06:33Z",
      "updatedAt": "2020-06-19T15:37:29Z",
      "closedAt": "2020-06-19T15:37:29Z",
      "comments": []
    },
    {
      "number": 95,
      "id": "MDU6SXNzdWU2MzExMTIxODQ=",
      "title": "Do not require serialization when publishing keys",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/95",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/91#discussion_r435516340",
      "createdAt": "2020-06-04T20:07:21Z",
      "updatedAt": "2020-06-18T14:17:30Z",
      "closedAt": "2020-06-18T14:17:30Z",
      "comments": []
    },
    {
      "number": 100,
      "id": "MDU6SXNzdWU2Mzk3MDgwNjg=",
      "title": "Add prime-order group instantiation advice for ciphersuites",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/100",
      "state": "CLOSED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "",
      "createdAt": "2020-06-16T14:20:23Z",
      "updatedAt": "2020-06-24T08:41:37Z",
      "closedAt": "2020-06-24T08:41:37Z",
      "comments": []
    },
    {
      "number": 101,
      "id": "MDU6SXNzdWU2Mzk3MzE2Mzk=",
      "title": "Compressed or uncompressed point encoding?",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/101",
      "state": "CLOSED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "Should we support both, or just one?",
      "createdAt": "2020-06-16T14:50:43Z",
      "updatedAt": "2020-06-19T16:14:02Z",
      "closedAt": "2020-06-19T16:14:02Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Let's pick only one per ciphersuite, and let's be consistent across ciphersuites. I prefer the uncompressed format, if only because that's what other standards tend to use (TLS, HPKE, etc). ",
          "createdAt": "2020-06-16T15:04:00Z",
          "updatedAt": "2020-06-16T15:04:00Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "We'll go with compressed based on conversation, will change sage serialization code.",
          "createdAt": "2020-06-18T14:08:44Z",
          "updatedAt": "2020-06-18T14:08:44Z"
        }
      ]
    },
    {
      "number": 103,
      "id": "MDU6SXNzdWU2NDA0NDgxMzM=",
      "title": "Add verifiable support to Sage PoC",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/103",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chris-wood"
      ],
      "labels": [],
      "body": "I'm not sure if we should also include batch support. @alxdavids, what do you think?",
      "createdAt": "2020-06-17T13:34:30Z",
      "updatedAt": "2020-08-07T17:01:26Z",
      "closedAt": "2020-08-07T17:01:26Z",
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "I think it would make sense to have batch support in there because the algorithms have been consolidated into a single description now",
          "createdAt": "2020-06-17T15:26:08Z",
          "updatedAt": "2020-06-17T15:26:08Z"
        }
      ]
    },
    {
      "number": 109,
      "id": "MDU6SXNzdWU2NDIyMzU1MDY=",
      "title": "Deserialization can fail",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/109",
      "state": "CLOSED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Warn the reader that deserialization can return error if the input bytes does not correspond to a valid group element.\r\n\r\n",
      "createdAt": "2020-06-19T21:55:19Z",
      "updatedAt": "2020-06-24T08:55:08Z",
      "closedAt": "2020-06-24T08:55:08Z",
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "Not sure we need this caveat because SEC1/RFC7748 defines the correct syntax for serialization. If you deviate from this syntax then you're not compliant. What do you think @chris-wood?",
          "createdAt": "2020-06-22T09:02:33Z",
          "updatedAt": "2020-06-22T09:02:33Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "I think what is missing is alerting the reader/implementor that deserialization can fail, and if this happen, the protocol cannot continue. ",
          "createdAt": "2020-06-22T18:15:31Z",
          "updatedAt": "2020-06-22T18:15:31Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "I take it to mean, if you're not compliant with everything in the doc (including refs), then the protocol will fail. In my opinion, this can be left implicit.",
          "createdAt": "2020-06-23T08:40:26Z",
          "updatedAt": "2020-06-23T08:40:26Z"
        }
      ]
    },
    {
      "number": 110,
      "id": "MDU6SXNzdWU2NDIyMzc2MjU=",
      "title": "Unifying pseudo-code style",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/110",
      "state": "CLOSED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "1 ) There are many functions following an object-oriented design, I don't know if this helps as the only \"object\" is GG.\r\n\r\n2) The style of pseudo-code is sometimes python, other times Go/rust, I consider is better to use C-style pseudo-code. \r\n\r\n3) Enumeration of substeps, for example:\r\n\r\n~~~\r\n 4.     if x = 0 \r\n 4.1        foo()\r\n 4.2        foo() \r\n 5.     bar() \r\n~~~\r\n",
      "createdAt": "2020-06-19T22:01:16Z",
      "updatedAt": "2020-06-25T12:59:37Z",
      "closedAt": "2020-06-25T12:59:37Z",
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "Would you be able to highlight some particular examples for where you are thinking things should change? It's not exactly clear to me what you are referring to with these points? FWIW, I'm not super worried about the pseudocode at the moment, I think it's clear enough.",
          "createdAt": "2020-06-22T09:01:38Z",
          "updatedAt": "2020-06-22T09:01:38Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "This issue is not one of the higher relevance, but still it could be difficult to grasp for someone who never coded in modern languages. It's is desired that specification be easy to read for anyone.  \r\n\r\nLoops\r\n``` 3. for i = 0 to m:```  vs ``` 2. for i in 1..m:``` vs ``` for i in [ins.length]: ```\r\n\r\nThe first is go/rust syntax, while the second one is more similar to C structs.\r\n`Ev = Evaluation{ elements: elements }` and `2. Ev.proof = proof`\r\n\r\nthe `elements` starts empty.\r\n\r\n```\r\n1. elements = []\r\n2. for i in 1..m:\r\n    2.3. elements[i] = GG.Serialize(Z)\r\n```\r\n",
          "createdAt": "2020-06-22T18:13:05Z",
          "updatedAt": "2020-06-22T18:28:18Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "The change in #122 makes an attempt at clarity.",
          "createdAt": "2020-06-22T23:00:35Z",
          "updatedAt": "2020-06-22T23:00:35Z"
        }
      ]
    },
    {
      "number": 111,
      "id": "MDU6SXNzdWU2NDIyNDAwNjc=",
      "title": "The field of scalars can be confused with the field of elliptic curve defiinition.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/111",
      "state": "CLOSED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "The field of scalars can be confused with the field of elliptic curve defiinition. \r\n\r\nOn the one hand, this happens because the document uses the notation GF(p) for the set of possible scalars that is the same for elliptic curve field definition. The document is correct, however this is a source of consfusion for those not familiar with the math behind groups and curves.\r\n\r\nOne possible way to solve this is that the document mention that scalars are chosen from the set `{1, ..., p-1}`. Additionally, one can use `r` as the variable to denote the group order instead of `p`. \r\n\r\nOn the other hand, scalars living in GF(p) is not accurate, because elliptic curve groups do multiplication by integer scalars. \r\n ",
      "createdAt": "2020-06-19T22:09:41Z",
      "updatedAt": "2020-06-22T16:30:00Z",
      "closedAt": "2020-06-22T16:30:00Z",
      "comments": []
    },
    {
      "number": 112,
      "id": "MDU6SXNzdWU2NDIyNDA4ODM=",
      "title": "use endianness definition",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/112",
      "state": "CLOSED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "Sometimes it is used network-byte order. A better way to describe ordering is using little- and big-endian. Note that in the ciphersuite section LE and BE are used instead of network-byte order.\r\n",
      "createdAt": "2020-06-19T22:12:12Z",
      "updatedAt": "2020-06-22T15:41:00Z",
      "closedAt": "2020-06-22T15:41:00Z",
      "comments": []
    },
    {
      "number": 113,
      "id": "MDU6SXNzdWU2NDIyNDE2NDQ=",
      "title": "Bits indicating verifiablity support",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/113",
      "state": "CLOSED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "> Both participants also provide a boolean input vv and vp for the Client and Server respectively.  These boolean values should be equal, and correspond to whether the protocol is executed with verifiability intended, or not. In other words, whether the functionality computes an OPRF protocol (vv = vp = 0), or a VOPRF protocol (vv = vp = 1). If vv = 1 && vp = 0, then the protocol will abort in Unblind when the client attempts to verify the zero-knowledge proof.\r\n\r\nI think the bits are not required since they come from the ciphersuite definition, so they are constant domain parameters.",
      "createdAt": "2020-06-19T22:14:33Z",
      "updatedAt": "2020-06-22T15:42:45Z",
      "closedAt": "2020-06-22T15:42:45Z",
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "This is true, but I think we'll need to then pass around ciphersuite identifiers into the algorithms so we can check this?",
          "createdAt": "2020-06-22T08:42:57Z",
          "updatedAt": "2020-06-22T08:42:57Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "Okay I've just removed them and replaced with a global `verifiable` variable",
          "createdAt": "2020-06-22T08:50:05Z",
          "updatedAt": "2020-06-22T08:50:05Z"
        }
      ]
    },
    {
      "number": 114,
      "id": "MDU6SXNzdWU2NDIyNDE4NzU=",
      "title": "Unify between sequence of bytes, array of bytes, byte arrays",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/114",
      "state": "CLOSED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [],
      "body": "Unify between sequence of bytes, array of bytes, byte arrays",
      "createdAt": "2020-06-19T22:15:18Z",
      "updatedAt": "2020-06-22T18:33:29Z",
      "closedAt": "2020-06-22T16:28:52Z",
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "Let's go with byte arrays",
          "createdAt": "2020-06-22T08:40:47Z",
          "updatedAt": "2020-06-22T08:40:47Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": " `byte arrays` is singular or plural?",
          "createdAt": "2020-06-22T18:33:29Z",
          "updatedAt": "2020-06-22T18:33:29Z"
        }
      ]
    },
    {
      "number": 115,
      "id": "MDU6SXNzdWU2NDIyNDI1NjQ=",
      "title": "Section 4.3 uses undefined values",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/115",
      "state": "CLOSED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Section 4.3 is difficult to understand as there are many undefined variables. The protocol data-flow looks clean and simple, however there are many variables that are not stated its purpose nor its domain.\r\n\r\n",
      "createdAt": "2020-06-19T22:17:22Z",
      "updatedAt": "2020-06-23T08:38:54Z",
      "closedAt": "2020-06-23T08:38:53Z",
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "Do you mean in the diagram? This is all explained in the following section. I guess we could move the protocol to after the algorithm descriptions though? What do you think @chris-wood? I personally prefer to have it this way around to put more emphasis on the protocol data flow and not worry so much about the algorithm implementation.",
          "createdAt": "2020-06-22T08:40:16Z",
          "updatedAt": "2020-06-22T08:40:16Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree -- I think having the protocol flow abstraction up front helps.",
          "createdAt": "2020-06-22T16:41:59Z",
          "updatedAt": "2020-06-22T16:41:59Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "Okay, let's leave it as it is for now.",
          "createdAt": "2020-06-23T08:38:53Z",
          "updatedAt": "2020-06-23T08:38:53Z"
        }
      ]
    },
    {
      "number": 116,
      "id": "MDU6SXNzdWU2NDIyNDI3Nzk=",
      "title": "Definition of H2",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/116",
      "state": "CLOSED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "H2 might be better defined as H2(x) = OS2IP(H(x)) mod p. \r\nThis avoids rejection sampling on Section 5.3",
      "createdAt": "2020-06-19T22:18:04Z",
      "updatedAt": "2020-06-25T12:59:27Z",
      "closedAt": "2020-06-25T12:59:27Z",
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "Doesn't this introduce bias if you get a value that's greater than p from H?",
          "createdAt": "2020-06-22T07:40:15Z",
          "updatedAt": "2020-06-22T07:40:29Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "We should just use hash-to-field from the hash-to-curve document (for all groups considered). I don't see why we'd reinvent the wheel here. :-)",
          "createdAt": "2020-06-22T16:41:25Z",
          "updatedAt": "2020-06-22T16:41:25Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "> We should just use hash-to-field from the hash-to-curve document (for all groups considered). I don't see why we'd reinvent the wheel here. :-)\r\n\r\nAgree",
          "createdAt": "2020-06-22T18:45:42Z",
          "updatedAt": "2020-06-22T18:45:42Z"
        }
      ]
    },
    {
      "number": 124,
      "id": "MDU6SXNzdWU2NDU4MDY2MDE=",
      "title": "Inconsistencies in Evaluate pseudo-code",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/124",
      "state": "CLOSED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "\r\nhttps://github.com/cfrg/draft-irtf-cfrg-voprf/blob/73492d2727115a7591a3d340e31f0565465348a7/draft-irtf-cfrg-voprf.md#L662-L675\r\n\r\n1) Why `Ev` is passed as input to `Evaluate`?\r\n2) Why `Ev` is passed to `generate_proof`, if it wasn't constructed yet?\r\n",
      "createdAt": "2020-06-25T19:42:11Z",
      "updatedAt": "2020-06-26T11:29:49Z",
      "closedAt": "2020-06-26T11:29:49Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Good catch - it shouldn't be. Can you please remove that in your PR?",
          "createdAt": "2020-06-25T21:51:35Z",
          "updatedAt": "2020-06-25T21:51:35Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "Ok, I can work on that fix.",
          "createdAt": "2020-06-25T22:20:56Z",
          "updatedAt": "2020-06-25T22:20:56Z"
        }
      ]
    },
    {
      "number": 126,
      "id": "MDU6SXNzdWU2NDU4NTY1NjQ=",
      "title": "Undefined x variable",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/126",
      "state": "CLOSED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "What is `x` in these functions?\r\n\r\nhttps://github.com/cfrg/draft-irtf-cfrg-voprf/blob/73492d2727115a7591a3d340e31f0565465348a7/draft-irtf-cfrg-voprf.md#L784-L786\r\n\r\nhttps://github.com/cfrg/draft-irtf-cfrg-voprf/blob/73492d2727115a7591a3d340e31f0565465348a7/draft-irtf-cfrg-voprf.md#L1415-L1417\r\n",
      "createdAt": "2020-06-25T21:17:17Z",
      "updatedAt": "2020-06-26T13:57:31Z",
      "closedAt": "2020-06-26T13:57:31Z",
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "Should be `inputs[i]`",
          "createdAt": "2020-06-26T08:38:41Z",
          "updatedAt": "2020-06-26T08:38:41Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I fixed this with a direct push to master. ",
          "createdAt": "2020-06-26T13:57:31Z",
          "updatedAt": "2020-06-26T13:57:31Z"
        }
      ]
    },
    {
      "number": 133,
      "id": "MDU6SXNzdWU2NTY4NDQ4MzI=",
      "title": "Optimization of ComputeComposites at server-side.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/133",
      "state": "CLOSED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The following is an optimization for `ComputeComposites` function when\r\nexecuted at the server-side. The savings reduce by half the number of\r\nscalar multiplications (group exponentiations).\r\n\r\nFull details at https://mailarchive.ietf.org/arch/msg/cfrg/dt8TUtTD-JVgVxjpEL9lz5wUTb8/",
      "createdAt": "2020-07-14T19:26:04Z",
      "updatedAt": "2020-11-06T00:23:13Z",
      "closedAt": "2020-11-06T00:23:13Z",
      "comments": [
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'll add this first to the POC to see that everything works nicely, and then add to the draft. I'll add the note here also that this is *only for the server side*.",
          "createdAt": "2020-10-20T14:27:29Z",
          "updatedAt": "2020-10-20T14:27:29Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@armfazh can you please send a PR with this change, and update the Sage implementation to match?",
          "createdAt": "2020-11-03T22:13:54Z",
          "updatedAt": "2020-11-03T22:13:54Z"
        }
      ]
    },
    {
      "number": 135,
      "id": "MDU6SXNzdWU2NzQ2NDc3Mzg=",
      "title": "Add implementation details for HashToScalar",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/135",
      "state": "CLOSED",
      "author": "tatianab",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Expand on bullet point about HashToScalar function, including required security properties (if any) and pointers to example implementation details",
      "createdAt": "2020-08-06T22:59:14Z",
      "updatedAt": "2020-09-09T10:39:01Z",
      "closedAt": "2020-09-09T10:39:01Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@armfazh, can you please take this one?",
          "createdAt": "2020-08-18T23:30:30Z",
          "updatedAt": "2020-08-18T23:30:30Z"
        }
      ]
    },
    {
      "number": 139,
      "id": "MDU6SXNzdWU2ODg5NzYzOTU=",
      "title": "Include SerializedScalar type",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/139",
      "state": "CLOSED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "There is a distinction between group elements (a point on the curve) and serialized elements (its compact representation).\r\nAnalogously, we can refer as SerializedScalar to the short (mod p) representation of an integer scalar.\r\n\r\ntodo(armfazh): I can create a PR to the draft for this request.",
      "createdAt": "2020-08-31T07:15:24Z",
      "updatedAt": "2020-09-10T18:53:07Z",
      "closedAt": "2020-09-10T18:53:07Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm not sure I see the benefit of having this type, but let's see what the PR looks like.",
          "createdAt": "2020-08-31T14:59:17Z",
          "updatedAt": "2020-08-31T14:59:17Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm also not sure that we need this, I think we can move between the representations without being too descriptive for scalars.",
          "createdAt": "2020-09-09T10:36:14Z",
          "updatedAt": "2020-09-09T10:36:14Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "After thinking more on it, it's not necessary. ",
          "createdAt": "2020-09-10T18:53:07Z",
          "updatedAt": "2020-09-10T18:53:07Z"
        }
      ]
    },
    {
      "number": 140,
      "id": "MDU6SXNzdWU2OTQ1MjI5ODY=",
      "title": "Please consider renaming Evaluate() to Contribute()",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/140",
      "state": "CLOSED",
      "author": "stef",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "`Contribute` describes the semantics better than the generic `Evaluate` name.\r\n\r\nsee the discussion here: https://github.com/cfrg/draft-irtf-cfrg-opaque/issues/53",
      "createdAt": "2020-09-06T20:46:58Z",
      "updatedAt": "2020-09-16T13:35:38Z",
      "closedAt": "2020-09-16T13:35:38Z",
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "Hi @stef, thanks for bringing this up. I've taken a look at the discussion. I'm not massively supportive of renaming the Server's participation to `Contribute`. I can see what you mean, because this is a protocol that both participants combine to evaluate a PRF. However, theoretically-speaking, it's the Server that essentially computes the underlying PRF itself. The client specifies an input and then just does some pre-processing and public operations. This is why we currently use `Evaluate`. Moreover, I don't think `Contribute` really conveys the fact that the server is performing a secret-key operation. cc @chris-wood to see what he thinks and to discuss further.",
          "createdAt": "2020-09-09T10:35:19Z",
          "updatedAt": "2020-09-09T10:35:19Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@stef can you please bring this to the list? I could see changing the name if we were to support threshold OPRFs, for example. But as it stands now, to me, `Contribute` does not better describe the semantics than `Evaluate`, for the reasons that Alex states.",
          "createdAt": "2020-09-14T13:03:39Z",
          "updatedAt": "2020-09-14T13:03:39Z"
        },
        {
          "author": "stef",
          "authorAssociation": "CONTRIBUTOR",
          "body": "which list, is there a dedicated list for this proposal or the big cfrg list?",
          "createdAt": "2020-09-14T19:47:10Z",
          "updatedAt": "2020-09-14T19:47:10Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "The CFRG list! :) ",
          "createdAt": "2020-09-15T00:36:35Z",
          "updatedAt": "2020-09-15T00:36:35Z"
        },
        {
          "author": "stef",
          "authorAssociation": "CONTRIBUTOR",
          "body": "although i subscribed to the list, before writing to it i reviewed the academic literature and i apologize for making this noise.",
          "createdAt": "2020-09-16T13:35:38Z",
          "updatedAt": "2020-09-16T13:35:38Z"
        }
      ]
    },
    {
      "number": 142,
      "id": "MDU6SXNzdWU3MDc2NDM1Mzg=",
      "title": "Ciphersuite section should cite standard curve generators and orders",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/142",
      "state": "CLOSED",
      "author": "davidben",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Section 4 defines various ciphersuites using standard curves, but it specifies the generator and order explicitly. The values are (modulo the issue below) always the standard one, as they should be. But from reading the draft you might not realize this and miss that you can reuse your existing base-point-specific optimizations. Instead, since curves are always specified and implemented with a standard base point, just cite the standard ones. No sense in restating the order either, I think.\r\n\r\nThis would also fix what appear to be mistakes in the curve25519 and curve448 definition:\r\n\r\nFirst, a minor terminology nitpick: OPRF(curve25519, SHA-512) and OPRF(curve448, SHA-512) specify the base point with (x, y) coordinates, but RFC7748, which the draft cites, does not define the curves in terms of (x, y) coordinates at all. It labels the coordinates (u, v).\r\n\r\n~~Second, the y/v-coordinate for the curve25519 generator is wrong. I don't know if it ends up mattering for VOPRF (I'm guessing not, since Serialize() only captures the x/u coordinate?), but there are two possible v-coordinates for u = 9. [RFC7748, section 4.1](https://tools.ietf.org/html/rfc7748#section-4.1) picks V(P) = 14781619447589544791020593568409986887264606134616475288964881837755586237401 = 0x20AE19A1B8A086B4E01EDD2C7748D14C923D4D7E6D7C61B229E9C5A27ECED3D9. This draft used p - V(P) = 0x5F51E65E475F794B1FE122D388B72EB36DC2B28192839E4DD6163A5D81312C14.~~ (Edit: sounds like there's an errata in the RFC to switch to the other one.)",
      "createdAt": "2020-09-23T20:03:02Z",
      "updatedAt": "2020-10-27T12:50:08Z",
      "closedAt": "2020-10-26T19:06:07Z",
      "comments": [
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "The correct generator point for curve25519 is the one reported in the errata report.\r\nhttps://www.rfc-editor.org/errata/eid4730\r\nSo, the v (or y) coordinate is even. ",
          "createdAt": "2020-09-24T01:25:27Z",
          "updatedAt": "2020-09-24T01:25:27Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "NONE",
          "body": "Ah! The joys of immutable RFCs. :-(",
          "createdAt": "2020-09-24T01:46:25Z",
          "updatedAt": "2020-09-24T01:46:25Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "We removed the generator from the appendix altogether, so I think this is now resolved. @davidben, please reopen if that's not the case!",
          "createdAt": "2020-10-26T19:06:07Z",
          "updatedAt": "2020-10-26T19:06:07Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "NONE",
          "body": "Ah cool. And I see the curve25519 generator silliness is sidestepped with ristretto255. Although, a minor nitpick, I wonder if this went a step too far. Section 2.1 says to act on a prime-order group `GG`.  Then `ScalarBaseMult()` is defined to be the \"repeated application of the group operation on the base point\". But I thought a plain prime-order group usually doesn't have a well-defined base point or generator. Perhaps some of the types want to be tweaked?",
          "createdAt": "2020-10-26T22:40:04Z",
          "updatedAt": "2020-10-26T22:40:18Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Yeah, every element is a generator, but ristretto255 pins one (the curve25519 base point):\r\n\r\n> Since ristretto255 is a prime-order group, every element except the\r\n> identity is a generator, but for interoperability a canonical\r\n> generator is selected, which can be internally represented by the\r\n> Curve25519 basepoint, enabling reuse of existing precomputation for\r\n> scalar multiplication.  This is its encoding:\r\n> \r\n>  e2f2ae0a 6abc4e71 a884a961 c500515f 58e30b6a a582dd8d b6a65945 e08d2d76",
          "createdAt": "2020-10-26T23:07:57Z",
          "updatedAt": "2020-10-26T23:07:57Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "NONE",
          "body": "Right, I'm saying that section 2.1 doesn't seem to talk about there being a base point. Probably we want to define GG as a group plus a particular generator. Or something else.\r\n\r\n(The ristretto comment was about the confusion about which base point is correct for curve25519. Hopefully ristretto is specified correctly.)",
          "createdAt": "2020-10-27T00:09:52Z",
          "updatedAt": "2020-10-27T00:09:52Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Ah, gotcha. We can fix that. ",
          "createdAt": "2020-10-27T12:50:08Z",
          "updatedAt": "2020-10-27T12:50:08Z"
        }
      ]
    },
    {
      "number": 143,
      "id": "MDU6SXNzdWU3MDc2ODg0NzU=",
      "title": "Use a draft-specific placeholder DST string",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/143",
      "state": "CLOSED",
      "author": "davidben",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "If folks deploy experimental systems using VOPRF drafts, the fact that the DST uses \"RFCXXXX\" might break domain separation between drafts. HPKE used to use the same placeholder but switched to \"HPKE-05\", etc., with an RFC editor note:\r\n\r\n> [[RFC editor: please change \"HPKE-05\" to \"RFCXXXX\", where XXXX is the final number, before publication.]]\r\n\r\nSee https://github.com/cfrg/draft-irtf-cfrg-hpke/pull/138.\r\n\r\nPerhaps VOPRF should do something similar here.",
      "createdAt": "2020-09-23T21:22:54Z",
      "updatedAt": "2020-10-17T16:09:50Z",
      "closedAt": "2020-10-17T16:09:50Z",
      "comments": [
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Agreed. Should it be changed @chris-wood ?",
          "createdAt": "2020-09-29T00:11:43Z",
          "updatedAt": "2020-09-29T00:11:43Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "This changes makes sense to me.",
          "createdAt": "2020-09-29T14:31:06Z",
          "updatedAt": "2020-09-29T14:31:06Z"
        }
      ]
    },
    {
      "number": 144,
      "id": "MDU6SXNzdWU3MDgzMTc4MTA=",
      "title": "Pre-rendered editor's copy out-of-date?",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/144",
      "state": "CLOSED",
      "author": "davidben",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The README links to https://cfrg.github.io/draft-irtf-cfrg-voprf/draft-irtf-cfrg-voprf.html, but that seems to not match the md file in the repository.",
      "createdAt": "2020-09-24T16:37:48Z",
      "updatedAt": "2020-10-26T19:04:48Z",
      "closedAt": "2020-10-26T19:04:48Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Should be fixed now!",
          "createdAt": "2020-10-26T19:04:48Z",
          "updatedAt": "2020-10-26T19:04:48Z"
        }
      ]
    },
    {
      "number": 145,
      "id": "MDU6SXNzdWU3MDgzMTkxODU=",
      "title": "Cite TLS presentation language",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/145",
      "state": "CLOSED",
      "author": "davidben",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The Data Structures section includes a bunch of structures in what appear to be TLS presentation language. I assume this is intended to define serializations. That should probably cite RFC8446, which defines the syntax.",
      "createdAt": "2020-09-24T16:40:01Z",
      "updatedAt": "2020-09-28T17:46:18Z",
      "closedAt": "2020-09-28T17:46:18Z",
      "comments": []
    },
    {
      "number": 146,
      "id": "MDU6SXNzdWU3MDg5NTgzMjQ=",
      "title": "hashInput in Finalize and VerifyFinalize missing I2OSP calls",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/146",
      "state": "CLOSED",
      "author": "davidben",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "hashInput in Finalize and VerifyFinalize is computed as:\r\n\r\n```\r\n  hashInput = len(token.data) || token.data ||\r\n              len(issuedToken) || issuedToken ||\r\n              len(info) || info ||\r\n              len(finalizeDST) || finalizeDST\r\n  return Hash(hashInput)\r\n```\r\n\r\nBut the lengths are integers, not byte strings. I assume this was intended to say `I2OSP(len(...), ???)`. Given h1Input is also passed directly to Hash in ComputeComposites, I guess the lengths should all be two bytes, to be consistent.\r\n\r\n```\r\n  h1Input = I2OSP(len(gen), 2) || gen ||\r\n            I2OSP(len(pkS), 2) || pkS ||\r\n            I2OSP(len(blindTokens), 2) || blindTokens ||\r\n            I2OSP(len(elements), 2) || elements ||\r\n            I2OSP(len(seedDST), 2) || seedDST\r\n  seed = Hash(h1Input)\r\n```\r\n\r\nThough it's worth noting that injectivity here depends on the DSTs being suffix-free, or on *all* the length prefixes having the same size. If, say, hashInput used `I2OSP(len(token.data), 4)`, hashInput and h1Input would no longer be injective for all possible values here. (Ignoring the part where DSTs in this document are suffix-free.)\r\n\r\nThis reminds of https://github.com/cfrg/draft-irtf-cfrg-hash-to-curve/issues/236. (Hrm... do we care about domain separation between the hash calls here and those inside hash-to-curve? That might suggest the DST constructions should match. Although that is really a theoretical issue since the DSTs are indeed suffix-free.)",
      "createdAt": "2020-09-25T13:52:52Z",
      "updatedAt": "2020-10-16T14:00:21Z",
      "closedAt": "2020-10-16T14:00:21Z",
      "comments": [
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, I agree on this. I see no place, also, where a different length will be used other than `I2OSP(len(x), 2)`",
          "createdAt": "2020-09-29T00:10:28Z",
          "updatedAt": "2020-09-29T00:10:28Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I fixed this directly on master.",
          "createdAt": "2020-10-16T14:00:21Z",
          "updatedAt": "2020-10-16T14:00:21Z"
        }
      ]
    },
    {
      "number": 147,
      "id": "MDU6SXNzdWU3MDkxODg4ODI=",
      "title": "Necessary to serialize generator?",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/147",
      "state": "CLOSED",
      "author": "davidben",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "GenerateProof incorporates `gen = GG.Serialize(G)` into the HashToScalar call, but the context string already includes the cipher suite ID, which covers all the common parameters, notably the generator. It seems to me that can be omitted.",
      "createdAt": "2020-09-25T18:17:54Z",
      "updatedAt": "2020-10-17T16:06:52Z",
      "closedAt": "2020-10-17T16:06:52Z",
      "comments": [
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Mmm.. while true that through that the context string contains the suite.ID, this is only an id value, although it indeed recognises the suite. But I don't think the generator was included as a parameter for `HashToScalar` to recognise the suite, but rather to differentiate the hash. \r\n\r\nI'm not sure why it was historically introduced.. maybe @chris-wood , @alxdavids or @armfazh will know.",
          "createdAt": "2020-09-29T00:04:04Z",
          "updatedAt": "2020-09-29T00:04:04Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "NONE",
          "body": "Right, I thought all that needed there was for different suites' hash invocations to use different inputs. The suite is identified by ID, which is hashed, and the generator is specified by the suite, so it seems the generator is covered. \r\n\r\n(Disclaimer: I don't actually know how the formal analyses work, so my intuition could just be totally wrong. :-) )",
          "createdAt": "2020-09-29T00:14:14Z",
          "updatedAt": "2020-09-29T00:14:14Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "According to the specification [link](https://github.com/privacypass/challenge-bypass-extension/blob/master/docs/PROTOCOL.md#nizk-proofs-of-discrete-log-equality), the pair (G,Y) must be maintained.",
          "createdAt": "2020-10-16T17:28:01Z",
          "updatedAt": "2020-10-16T17:28:01Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "NONE",
          "body": "Isn't that just a question of whether you believe the pre-agreed parameters are GG or (GG, G). If you believe even GG weren't pre-agreed, I imagine H_3 would need to pass the group in. And when we give a name to an EC group, it typically comes with a pre-agreed generator.\r\n\r\nPut another way, you could define H_3 from the specification as H_3(G,Y,M,Z,A',B') =\r\n- If G == standard_G, return HashToScalar(code_point || Y || M || Z || A' || B')\r\n- Else, return HashToScalar(code_point2 || G || Y || M || Z || A' || B')\r\n\r\nThis is a perfectly injective encoding, as long as we can pick some distinct throwaway code_point2 value. And then you observe that you never hit the second case so we don't need to write it down.",
          "createdAt": "2020-10-16T19:45:16Z",
          "updatedAt": "2020-10-16T19:45:16Z"
        }
      ]
    },
    {
      "number": 148,
      "id": "MDU6SXNzdWU3MDkxOTM2NzM=",
      "title": "Assuming numbers are big-endian",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/148",
      "state": "CLOSED",
      "author": "davidben",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Section 2.2 has two bullet points:\r\n\r\n>   o  We assume that all numbers are stored in big-endian orientation.\r\n>\r\n>   o  I2OSP and OS2IP: Convert a byte array to and from a non-negative\r\n>      integer as described in [RFC8017].  Note that these functions\r\n>      operate on byte arrays in big-endian byte order.\r\n\r\nThe second bullet point makes sense. When converting to and from byte array, you need to specify the endianness. I'm not sure what the first point means at all. Does the draft ever care about the in-memory representation of numbers? It needs to be explicit about I2OSP, etc., anyway to capture lengths (see #145 and #146), at which point I don't think how the number is \"stored\" means anything.",
      "createdAt": "2020-09-25T18:27:06Z",
      "updatedAt": "2020-10-17T16:05:56Z",
      "closedAt": "2020-10-17T16:05:56Z",
      "comments": []
    },
    {
      "number": 151,
      "id": "MDU6SXNzdWU3MTA2NjY1NTk=",
      "title": "Can we remove the 'Addition' field on every ciphersuite?",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/151",
      "state": "CLOSED",
      "author": "claucece",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The 'Addition' field on every ciphersuite is always the same:\r\n\r\n```\r\n  - Addition: Adding curve points directly corresponds to the group\r\n    addition operation.\r\n```\r\n\r\nwe could perhaps remove it, as it is generally defined on the preliminaries.",
      "createdAt": "2020-09-29T00:44:06Z",
      "updatedAt": "2020-10-26T19:04:01Z",
      "closedAt": "2020-10-26T19:04:01Z",
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "Yeah, we should refactor this out as a common operator for each ciphersuite",
          "createdAt": "2020-09-29T14:32:53Z",
          "updatedAt": "2020-09-29T14:32:53Z"
        }
      ]
    },
    {
      "number": 152,
      "id": "MDU6SXNzdWU3MTA2ODYyNzM=",
      "title": "Correctly define the Scalar multiplication field for all cipher-suites",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/152",
      "state": "CLOSED",
      "author": "claucece",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Currently, only the `P-384`, `P-521` and `P-256` have the Scalar multiplication field defined. Might be good to expand this to 25519 and 448, specially, as they refer to RFC7748, which X25519 and X448 cannot be used for this draft, as they return only one of the coordinates.",
      "createdAt": "2020-09-29T01:46:45Z",
      "updatedAt": "2020-10-26T19:03:55Z",
      "closedAt": "2020-10-26T19:03:55Z",
      "comments": []
    },
    {
      "number": 153,
      "id": "MDU6SXNzdWU3MTEyMDI2MDk=",
      "title": "How and when should the public key be generated?",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/153",
      "state": "CLOSED",
      "author": "claucece",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "While it is easy to assume how and when the public key is generated, there is no place in the draft that states so. Must be good to include its generation on the setup functions.",
      "createdAt": "2020-09-29T15:00:49Z",
      "updatedAt": "2020-10-22T22:38:48Z",
      "closedAt": "2020-10-22T22:38:48Z",
      "comments": [
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "it should probably be included here:\r\n\r\n```\r\ndef SetupBaseServer(suite):\r\n  (skS, _) = KeyGen(GG)\r\n  contextString = I2OSP(modeBase, 1) || I2OSP(suite.ID, 2)\r\n  return ServerContext(contextString, skS)\r\n\r\n```",
          "createdAt": "2020-09-29T15:03:18Z",
          "updatedAt": "2020-09-29T15:03:18Z"
        },
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This is solved now.",
          "createdAt": "2020-10-22T22:38:46Z",
          "updatedAt": "2020-10-22T22:38:46Z"
        }
      ]
    },
    {
      "number": 154,
      "id": "MDU6SXNzdWU3MTEzNDAzMzY=",
      "title": "Consider adding a FullEvaluate()  to Server Context API",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/154",
      "state": "CLOSED",
      "author": "tomrist",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Some applications will need to compute the full PRF on the server side, e.g., to precompute a bunch of OPRF outputs for use in private set intersection protocols. Can we consider adding to the server context API a FullEvaluate, along lines of:\r\n\r\nInput:\r\n\r\n  ClientInput input\r\n  opaque info<1..2^16-1>\r\n  PrivateKey skS\r\n  PublicKey pkS\r\n\r\nOutput:\r\n\r\n  opaque output<1..2^16-1>\r\n\r\ndef FullEvaluate(input, info, skS, pkS):\r\n  P = GG.HashToGroup(input)\r\n  N = skS * P\r\n  issuedToken = GG.serialize(N)\r\n  finalizeDST = \"RFCXXXX-Finalize-\" || self.contextString\r\n  hashInput = len(input) || input ||\r\n              len(issuedToken) || issuedToken ||\r\n              len(info) || info ||\r\n              len(finalizeDST) || finalizeDST\r\n  return Hash(hashInput)",
      "createdAt": "2020-09-29T18:12:40Z",
      "updatedAt": "2020-10-26T19:03:45Z",
      "closedAt": "2020-10-26T19:03:45Z",
      "comments": [
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This should also be added to the POC.",
          "createdAt": "2020-10-18T19:31:04Z",
          "updatedAt": "2020-10-18T19:31:04Z"
        }
      ]
    },
    {
      "number": 155,
      "id": "MDU6SXNzdWU3MTM2NjIwOTc=",
      "title": "Clarify HashToScalar",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/155",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chris-wood"
      ],
      "labels": [],
      "body": "HashToScalar points to hash-to-field, but we should specify the modulus. See the relevant text in the draft:\r\n\r\n> The hash_to_field function is also suitable for securely hashing to scalars. For example, when hashing to scalars for an elliptic curve (sub)group with prime order r, it suffices to instantiate hash_to_curve with target field GF(r).",
      "createdAt": "2020-10-02T14:24:29Z",
      "updatedAt": "2020-10-26T19:08:21Z",
      "closedAt": "2020-10-26T19:08:21Z",
      "comments": []
    },
    {
      "number": 157,
      "id": "MDU6SXNzdWU3MTczOTAwMzA=",
      "title": "Clarify the serialization to be used",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/157",
      "state": "CLOSED",
      "author": "claucece",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Specially, the tag to be used.",
      "createdAt": "2020-10-08T14:19:52Z",
      "updatedAt": "2020-10-22T22:44:39Z",
      "closedAt": "2020-10-22T22:44:39Z",
      "comments": [
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "I think this is implementation-dependant. most implementations follow ANSI X9.62.",
          "createdAt": "2020-10-08T15:56:26Z",
          "updatedAt": "2020-10-08T15:56:26Z"
        },
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yeah. I agree on this. Closing it.",
          "createdAt": "2020-10-22T22:44:39Z",
          "updatedAt": "2020-10-22T22:44:39Z"
        }
      ]
    },
    {
      "number": 159,
      "id": "MDU6SXNzdWU3MjMyMzE4NTc=",
      "title": "Avoid making the test vectors random at every run",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/159",
      "state": "CLOSED",
      "author": "claucece",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-10-16T13:35:51Z",
      "updatedAt": "2020-10-19T16:23:07Z",
      "closedAt": "2020-10-19T16:23:07Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed in #166.",
          "createdAt": "2020-10-19T16:23:07Z",
          "updatedAt": "2020-10-19T16:23:07Z"
        }
      ]
    },
    {
      "number": 163,
      "id": "MDU6SXNzdWU3MjQwNzg0NDk=",
      "title": "Specify the usage of decaf and ristretto",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/163",
      "state": "CLOSED",
      "author": "claucece",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-10-18T19:19:42Z",
      "updatedAt": "2020-10-26T19:03:35Z",
      "closedAt": "2020-10-26T19:03:35Z",
      "comments": [
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Copying this from #164:\r\n\r\nSure thing. As a read in the current draft, ristretto255 is an instantiation of the abstract prime-order group Curve25519, and it is using it's order, as defined in RFC7748.\r\nThe base point is a base point (I think the ed25519 one) encoded in a Ristretto way: e2f2ae0a 6abc4e71 a884a961 c500515f 58e30b6a a582dd8d b6a65945 e08d2d76, and internally using ed25519 operations for scalarmul and others (and, therefore, internally using the ed25519 base point).\r\n\r\nI'm not sure why it is specified:\r\n\r\n```\r\nThe group order is the same as the order of the Curve25519 primeorder\r\nsubgroup:\r\nl = 2^252 + 27742317777372353535851937790883648493\r\nand not directly the edwards one.\r\n```\r\n\r\nJust noting it here, as we need to specify the generator for Generator(), for internal edwards operations. Although, decoding the ristretto encoding into edwards should do the trick.\r\n\r\nI'm not sure if the authors are going to specify in a different way the addition, negation, and the derived subtraction and (multi-)scalar multiplication, but I'll follow the ed25519 ones.\r\n\r\nOn decaf448, they are using edwards448 as defined RFC7748.",
          "createdAt": "2020-10-21T13:52:27Z",
          "updatedAt": "2020-10-21T13:52:27Z"
        },
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "cc./ @armfazh @chris-wood ",
          "createdAt": "2020-10-21T13:53:02Z",
          "updatedAt": "2020-10-21T13:53:02Z"
        }
      ]
    },
    {
      "number": 164,
      "id": "MDU6SXNzdWU3MjQwODEwMDY=",
      "title": "Change curve 25519 and curve 448 to ed25519 and ed448",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/164",
      "state": "CLOSED",
      "author": "claucece",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "It should follow the parameters defined for the edwards curves, as defined in RFC7748.\r\n\r\nThis is kind of related to #142 and #163 (as it should specify the encoding to be used).\r\n\r\ncc./ @armfazh @chris-wood ",
      "createdAt": "2020-10-18T19:33:30Z",
      "updatedAt": "2020-10-21T13:52:47Z",
      "closedAt": "2020-10-21T13:52:46Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "We should close this and just move directly to ristretto255 and decaf448. @armfazh, please close if you agree!",
          "createdAt": "2020-10-20T00:32:06Z",
          "updatedAt": "2020-10-20T00:32:06Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "agree, let's move forward with those groups",
          "createdAt": "2020-10-20T07:05:47Z",
          "updatedAt": "2020-10-20T07:05:47Z"
        },
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sure thing. As a read in the current [draft](https://datatracker.ietf.org/doc/draft-irtf-cfrg-ristretto255-decaf448/),  ristretto255 is an instantiation of the abstract prime-order group Curve25519, and it is using it's order, as defined in RFC7748. \r\nThe base point is a base point (I think the ed25519 one) encoded in a Ristretto way: `e2f2ae0a 6abc4e71 a884a961 c500515f 58e30b6a a582dd8d b6a65945 e08d2d76`, and internally using ed25519 operations for scalarmul and others (and, therefore, internally using the ed25519 base point). \r\n\r\nI'm not sure why it is specified:\r\n\r\n```\r\nThe group order is the same as the order of the Curve25519 primeorder\r\nsubgroup:\r\nl = 2^252 + 27742317777372353535851937790883648493\r\n```\r\n\r\nand not directly the edwards one. \r\n\r\nJust noting it here, as we need to specify the generator for `Generator()`, for internal edwards operations. Although, decoding the ristretto encoding into edwards should do the trick.\r\n\r\nI'm not sure if the authors are going to specify in a different way the addition, negation, and the derived subtraction and (multi-)scalar multiplication, but I'll follow the ed25519 ones.\r\n\r\nOn decaf448, they are using edwards448 as defined RFC7748.\r\n",
          "createdAt": "2020-10-21T13:51:03Z",
          "updatedAt": "2020-10-21T13:51:03Z"
        },
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closing this. See #163 ",
          "createdAt": "2020-10-21T13:52:46Z",
          "updatedAt": "2020-10-21T13:52:46Z"
        }
      ]
    },
    {
      "number": 165,
      "id": "MDU6SXNzdWU3MjQxMTkzNjA=",
      "title": "Does the 'dst' for the HashToCurve func need to be different for each mode?",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/165",
      "state": "CLOSED",
      "author": "claucece",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-10-18T20:59:06Z",
      "updatedAt": "2020-10-28T12:34:43Z",
      "closedAt": "2020-10-28T12:34:43Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "There are several ways we could achieve domain separation. For consistency with the other functions, I'd recommend augmenting the input to `HashToGroup` with a DST, e.g.:\r\n\r\n```\r\ndef Blind(input):\r\n  r = GG.RandomScalar()\r\n  blindDST = \"VOPRF05-Finalize-\" || self.contextString\r\n  P = GG.HashToGroup(input || I2OSP(len(blindDST), 2) || blindDST)\r\n```\r\n\r\n@alxdavids, what do you think?",
          "createdAt": "2020-10-20T00:35:07Z",
          "updatedAt": "2020-10-20T00:35:20Z"
        },
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Mmm.. on some of the functions, this make  some sense. In others, we can add:\r\n\r\n```\r\ndef VerifyFinalize(skS, input, info, output):\r\n  DST = self.contextString\r\n  T = GG.HashToGroup(input || dst)\r\n  (...)\r\n\r\n```\r\n\r\nbut, the hash-to-group draft specifies a minimum of 16 bytes and that it is recommended that the suite id is included in the dst. \r\n\r\n```\r\n   2.  Tags MUST have nonzero length.  A minimum length of 16 bytes is\r\n       RECOMMENDED to reduce the chance of collisions with other\r\n       applications.\r\n   6.  For applications that use multiple encodings, either to the same\r\n       curve or to different curves, each encoding MUST use a different\r\n       tag.  For this purpose, it is RECOMMENDED to include the\r\n       encoding's Suite ID (Section 8) in the domain separation tag.\r\n       For independent encodings based on the same suite, each tag\r\n       should also include a distinct identifier, e.g., \"ENC1\" and\r\n       \"ENC2\".\r\n```\r\n\r\nSo, something like this can be used:\r\n\r\n```\r\ndst = VOPRF05-self.contextString-P521_XMD:SHA-512_SSWU_RO\\_`, depending on the suite id\r\n```\r\n",
          "createdAt": "2020-10-23T16:11:00Z",
          "updatedAt": "2020-10-23T16:11:00Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "Let's step back for a second,\r\ngiven a named suite, say e.g.  `id = \"OPRF(P256,SHA256)\" ` \r\n\r\ndoes this identifier considers the implementation of both verifiable and non-verifiable modes?\r\n\r\n- if so, \r\n -- then the `dst` used for HashToGroup could be the concatenation of suite id and the mode.\r\n- otherwise,\r\n -- `OPRF(P256,SHA256)` means only the non-verifiable mode, then we need a suite identifier for the verifiable mode, for example `VOPRF(P256,SHA256)`. Going this way,  `dst` can be equal to the suite id.\r\n",
          "createdAt": "2020-10-23T17:53:26Z",
          "updatedAt": "2020-10-23T17:53:26Z"
        }
      ]
    },
    {
      "number": 168,
      "id": "MDU6SXNzdWU3MjUwODE1Nzc=",
      "title": "Allow server context creation with external key pair",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/168",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "In some cases it's useful to use a pre-existing key pair for a server context. Currently, keys are generated inline (in SetupBaseServer, for example). We should fix that.",
      "createdAt": "2020-10-20T00:31:37Z",
      "updatedAt": "2020-10-26T19:03:25Z",
      "closedAt": "2020-10-26T19:03:25Z",
      "comments": [
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "The purpose of Setup is to generate keys and domain parameters, and this should run once during the _offline_ phase of the protocol.\r\nThere is no inline generation during the _online_ phase of the protocol.Hence, I think the specification is right.\r\n\r\n-- If needed, we could add a line saying: \"users can use pre-existing keys provided that keys were generated using a compatible  procedure as the one described in Setup\".\r\n",
          "createdAt": "2020-10-23T19:14:15Z",
          "updatedAt": "2020-10-23T19:14:15Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> -- If needed, we could add a line saying: \"users can use pre-existing keys provided that keys were generated using a compatible procedure as the one described in Setup\".\r\n\r\nThis is precisely the idea! It's definitely needed for OPAQUE.",
          "createdAt": "2020-10-23T19:20:16Z",
          "updatedAt": "2020-10-23T19:20:16Z"
        }
      ]
    },
    {
      "number": 171,
      "id": "MDU6SXNzdWU3MzA2MDg1MDA=",
      "title": "Submit new version for IETF 109",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/171",
      "state": "CLOSED",
      "author": "grittygrease",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-10-27T16:25:49Z",
      "updatedAt": "2020-11-03T22:13:30Z",
      "closedAt": "2020-11-03T22:13:30Z",
      "comments": []
    },
    {
      "number": 174,
      "id": "MDU6SXNzdWU3MzE2NDcwMjI=",
      "title": "update contributors",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/174",
      "state": "CLOSED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "the list of contributors overleaps with authors",
      "createdAt": "2020-10-28T17:28:01Z",
      "updatedAt": "2020-11-02T17:49:06Z",
      "closedAt": "2020-11-02T17:49:06Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Updated directly in main.",
          "createdAt": "2020-11-02T17:49:06Z",
          "updatedAt": "2020-11-02T17:49:06Z"
        }
      ]
    },
    {
      "number": 182,
      "id": "MDU6SXNzdWU3MzQ4MjMwNTI=",
      "title": "KeyGen is not defined",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/182",
      "state": "CLOSED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "> Prior to this phase, keys (skS, pkS) should be generated by calling a \"KeyGen\" functionality.\r\n\r\nKeyGen is not defined",
      "createdAt": "2020-11-02T21:14:19Z",
      "updatedAt": "2020-11-03T22:13:23Z",
      "closedAt": "2020-11-03T22:13:23Z",
      "comments": []
    },
    {
      "number": 191,
      "id": "MDU6SXNzdWU3Mzg1MzEyNjk=",
      "title": "Token data structure name is confusing",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/191",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This struct wraps up the OPRF blind and the input, for use by the `Unblind` and `Finalize` functions later on. We should consider renaming this to something that better reflects this purpose, e.g., `BlindContext`. (Token is a relic of Privacy Pass that we don't need to carry forward here.)",
      "createdAt": "2020-11-08T19:00:16Z",
      "updatedAt": "2020-11-09T22:49:30Z",
      "closedAt": "2020-11-09T22:49:30Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed in #190.",
          "createdAt": "2020-11-09T22:49:30Z",
          "updatedAt": "2020-11-09T22:49:30Z"
        }
      ]
    },
    {
      "number": 192,
      "id": "MDU6SXNzdWU3Mzg1MzE3MDY=",
      "title": "ComputeComposite list encoding is incorrect",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/192",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "`ComputeCompositesFast` (and `ComputeComposites`) currently does the following:\r\n\r\n```python\r\ndef ComputeCompositesFast(skS, pkS, blindedElements, evaluatedElements):\r\n  pkSm = GG.Serialize(pkS)\r\n  seedDST = \"VOPRF05-seed-\" || self.contextString\r\n  compositeDST = \"VOPRF05-composite-\" || self.contextString\r\n  h1Input = I2OSP(len(pkSm), 2) || pkSm ||\r\n            I2OSP(len(blindedElements), 2) || blindedElements ||\r\n            I2OSP(len(evaluatedElements), 2) || evaluatedElements ||\r\n            I2OSP(len(seedDST), 2) || seedDST\r\n```\r\n\r\nNote that `blindedElements` and `evaluatedElements` are both *lists* of elements, so encoding them in `h1input` as \"length || value\" isn't quite right, I think.",
      "createdAt": "2020-11-08T19:02:30Z",
      "updatedAt": "2020-11-10T00:35:29Z",
      "closedAt": "2020-11-10T00:35:29Z",
      "comments": [
        {
          "author": "bytemare",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hi, I didn't see the issue up until I tried to implement it, indeed. \r\n\r\nWhat's the rationale behind this? Get a different h1Input for every (`blindedElements`, `evaluatedElements`) couple, or one for the whole set ?",
          "createdAt": "2020-11-09T19:31:20Z",
          "updatedAt": "2020-11-09T19:33:14Z"
        }
      ]
    },
    {
      "number": 193,
      "id": "MDU6SXNzdWU3Mzg1MzE4MzA=",
      "title": "BatchedEvaluation is unused",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/193",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Let's (preferably) use it or lose it.",
      "createdAt": "2020-11-08T19:03:04Z",
      "updatedAt": "2020-11-09T23:44:03Z",
      "closedAt": "2020-11-09T23:44:03Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "We lost it in #190. Closing.",
          "createdAt": "2020-11-09T23:44:03Z",
          "updatedAt": "2020-11-09T23:44:03Z"
        }
      ]
    },
    {
      "number": 194,
      "id": "MDU6SXNzdWU3Mzg1MzI5MDQ=",
      "title": "Move ciphersuite dependencies to the top of the document.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/194",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We currently use the Hash in the protocol description without first having adequately described it. We have a section describing the POG API, but the Hash dependency is not included. Let's refactor {#pog} to focus on *all* dependencies, including both the POG and Hash functions. (We should make sure this is consistent with the content in the ciphersuite section, too.)",
      "createdAt": "2020-11-08T19:08:53Z",
      "updatedAt": "2020-11-09T22:49:39Z",
      "closedAt": "2020-11-09T22:49:38Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed in #190.",
          "createdAt": "2020-11-09T22:49:38Z",
          "updatedAt": "2020-11-09T22:49:38Z"
        }
      ]
    },
    {
      "number": 195,
      "id": "MDU6SXNzdWU3Mzg2NDY0Njk=",
      "title": "Issues in Additive mode",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/195",
      "state": "CLOSED",
      "author": "claucece",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "When blinding in Additive mode, it says to store the blinded public key (which is a Point/Element) in the Token structure:\r\n\r\n```\r\ntoken = Token{\r\n    data: input,\r\n    blind: preproc.blindedPublicKey\r\n  }\r\n```\r\n\r\nBut the token structure is defined as taking a scalar, not a point/element as blinding element:\r\n\r\n```\r\nstruct {\r\n  opaque data<1..2^16-1>;\r\n  Scalar blind<1..2^16-1>;\r\n} Token;\r\n```\r\n\r\nThere also seems to be no need of storing the `preproc.blindedPublicKey` in `blind`.",
      "createdAt": "2020-11-09T03:33:28Z",
      "updatedAt": "2020-11-10T21:57:07Z",
      "closedAt": "2020-11-10T21:57:07Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Great catch! I don't think the additive section has been kept up to date very well. Let's revisit and address this issue soon.",
          "createdAt": "2020-11-09T13:57:20Z",
          "updatedAt": "2020-11-09T13:57:20Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@claucece, I think this is resolved now that #190 is merged. Can you please confirm, and close if so?",
          "createdAt": "2020-11-09T23:42:49Z",
          "updatedAt": "2020-11-09T23:42:49Z"
        },
        {
          "author": "bytemare",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Getting rid of the Token structure altogether solves the issue, indeed \ud83d\udc4d\ud83d\ude03 ",
          "createdAt": "2020-11-10T00:34:21Z",
          "updatedAt": "2020-11-10T00:34:21Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing as resolved. @claucece, please re-open if this still needs to be fixed!",
          "createdAt": "2020-11-10T21:57:07Z",
          "updatedAt": "2020-11-10T21:57:07Z"
        }
      ]
    },
    {
      "number": 196,
      "id": "MDU6SXNzdWU3Mzg2NTE3MzU=",
      "title": "Scalar structure is not clearly defined",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/196",
      "state": "CLOSED",
      "author": "claucece",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The `Scalar` structure is first used on the `Data Structures` section, and not previously defined, and it is used as: \r\n`Scalar blind<1..2^16-1>;`, which seems to imply this is the serialized scalar.\r\n\r\nIt is later defined as:\r\n`This document uses the types Element and Scalar to denote elements of the group GG and its underlying scalar field GF(p), respectively.`, which seems to imply it is the underlying reprensentation.\r\n\r\nIt is not clear what it is referred to.",
      "createdAt": "2020-11-09T03:48:15Z",
      "updatedAt": "2020-11-10T21:57:17Z",
      "closedAt": "2020-11-10T21:57:17Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I think we should just say `Scalar` refers to an actual scalar element for the group. It seems the only time we need to serialize and send a scalar on the wire is for the proof, so we can have a `SerializedScalar` type (similar to `SerializedElement`) for that. ",
          "createdAt": "2020-11-09T13:59:31Z",
          "updatedAt": "2020-11-09T13:59:31Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "Similar to #139",
          "createdAt": "2020-11-09T17:37:35Z",
          "updatedAt": "2020-11-09T17:37:35Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@claucece, can we close this now that #190 is merged?",
          "createdAt": "2020-11-09T23:35:44Z",
          "updatedAt": "2020-11-09T23:35:44Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing as resolved. @claucece, please re-open if this still needs to be fixed!",
          "createdAt": "2020-11-10T21:57:17Z",
          "updatedAt": "2020-11-10T21:57:17Z"
        }
      ]
    },
    {
      "number": 197,
      "id": "MDU6SXNzdWU3MzkwNTQwMjA=",
      "title": "Serialized elements and scalars should be fixed-length",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/197",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Currently, serialized things are variable length. There's no real reason they need to be variable length, and doing so just complicates implementations. Let's make them *both* fixed length. ",
      "createdAt": "2020-11-09T14:01:35Z",
      "updatedAt": "2020-11-09T22:50:03Z",
      "closedAt": "2020-11-09T22:50:02Z",
      "comments": [
        {
          "author": "bytemare",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hello,\r\n\r\ndoesn't the serialized length depend on the cipher suite they are from? p-256 and p-521 points don't have the same length when encoded.",
          "createdAt": "2020-11-09T19:41:47Z",
          "updatedAt": "2020-11-09T19:41:47Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "It does, yes. The fixed length would depend on the underlying group,",
          "createdAt": "2020-11-09T19:43:27Z",
          "updatedAt": "2020-11-09T19:43:27Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed in #190.",
          "createdAt": "2020-11-09T22:50:02Z",
          "updatedAt": "2020-11-09T22:50:02Z"
        }
      ]
    },
    {
      "number": 198,
      "id": "MDU6SXNzdWU3MzkyNjQxMDE=",
      "title": "DST design",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/198",
      "state": "CLOSED",
      "author": "bytemare",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "armfazh"
      ],
      "labels": [],
      "body": "Hello,\r\n\r\nI have been following the project for some time now, and am trying to accompany this with an implementation: https://github.com/bytemare/voprf.\r\n\r\nI have some questions regarding the draft and some decisions that have been taken. I'll start with these:\r\n\r\n1. DST length\r\nThe DST used to instantiate hash-to-curve is constructed with \"RFCXXXX-\" + contextstring, where contextstring is 3 bytes ( mode + ciphersuite). This has 11 bytes and is shorter than the recommended length in the h2c draft ( 16 bytes ). Is this the intended design? \r\n\r\n2. DST design\r\nThe DST not really constructed with the recommended way in h2c. On the other hand, the info bytestring should be used for domain separation in voprf and construction after the h2c guidance. One could argue that the DST above = info, but this is not explicitly stated in the document. This is a tad confusing.\r\n\r\n3. Hashing prefixes\r\nFour dst elements are used for hashing throughout the document:\r\n- \"-challenge-\"\r\n- \"-composite-\"\r\n- \"-Finalize-\"\r\n- \"-seed-\"\r\n\r\nIt's a non-issue, but there some are lower-case or upper-case in the first letter.\r\n\r\n---\r\n\r\nI also want to add that your work is amazing and that I take great pleasure in studying and working with it! Thank you.\r\nIt would be a great pleasure if I can be of any use helping spot and fix things.",
      "createdAt": "2020-11-09T18:32:06Z",
      "updatedAt": "2020-11-10T15:23:37Z",
      "closedAt": "2020-11-10T13:37:53Z",
      "comments": [
        {
          "author": "bytemare",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The length aspect has also been raised by @claucece in https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/165, but the issue got closed without this point being addressed.",
          "createdAt": "2020-11-09T20:39:56Z",
          "updatedAt": "2020-11-09T20:39:56Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "The current DST for the HashToGroup function is:\r\n```\r\nDST = \"RFCXXXX-\" + I2OSP(mode, 1)  + I2OSP(suite.ID, 2)\r\nlen(DST) = 11\r\n```\r\nEffectively, `DST` is short. Thanks for pointing this out.\r\n\r\n----\r\n\r\nTo remedy, these issues I propose (in #204 ) to extend it as follows:\r\n```\r\nDST = \"RFCXXXX-HashToGroup-\" + I2OSP(mode, 1)  + I2OSP(suite.ID, 2)\r\nlen(DST) = 22\r\n```\r\n\r\nNow, let's see whether this proposal satisfy the requirements for a good DST:\r\n\r\nFrom Section 3.1 of [draft-irtf-cfrg-hash-to-curve-10](https://tools.ietf.org/html/draft-irtf-cfrg-hash-to-curve-10#section-3.1)\r\n>    1.  Tags MUST be supplied as the DST parameter to hash_to_field, as\r\n>        described in Section 5.\r\n\r\nYes, this DST is the one passed to HashToGroup that internally passes to hash_to_field.\r\n\r\n>    2.  Tags MUST have nonzero length.  A minimum length of 16 bytes is\r\n>        RECOMMENDED to reduce the chance of collisions with other\r\n>        applications.\r\n\r\nlen(DST) = 22 > 16\r\n\r\n>    3.  Tags SHOULD begin with a fixed identification string that is\r\n>        unique to the application.\r\n\r\nDST begins with \"RFCXXXX\". The rfc number will correspond to a single application: the OPRF protocol.\r\n\r\n>    4.  Tags SHOULD include a version number.\r\n\r\n`SHOULD` is not enforced, however, the rfc number provides some sort of versioning.\r\n\r\n>    5.  For applications that define multiple ciphersuites, each\r\n>        ciphersuite's tag MUST be different.  For this purpose, it is\r\n>        RECOMMENDED to include a ciphersuite identifier in each tag.\r\n\r\nOPRF does have multiple ciphersuites. So, following this recommendation, the DST includes a ciphersuite identifier (`I2OSP(suite.ID, 2)`)\r\n\r\n>    6.  For applications that use multiple encodings, either to the same\r\n>        curve or to different curves, each encoding MUST use a different\r\n>        tag.  For this purpose, it is RECOMMENDED to include the\r\n>        encoding's Suite ID (Section 8) in the domain separation tag.\r\n>        For independent encodings based on the same suite, each tag\r\n>        should also include a distinct identifier, e.g., \"ENC1\" and  \"ENC2\".\r\n\r\nOPRF does not use multiple encodings, only one when Client blinds the input, which is the same for Server during FullEvaluate or VerifyFinalize.\r\n\r\nFinally, the DST separates queries to HashToGroup() between (Base)Client and VerifiableClient. DST is separated since includes the mode (`I2OSP(mode, 1)`)",
          "createdAt": "2020-11-10T01:41:40Z",
          "updatedAt": "2020-11-10T01:41:40Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "This should be fixed by #204, so I'm closing this as resolve. @bytemare, please re-open if you think more needs to be done!",
          "createdAt": "2020-11-10T13:37:53Z",
          "updatedAt": "2020-11-10T13:37:53Z"
        },
        {
          "author": "bytemare",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Looks good to me!\r\n\r\nAs a note: I'm thinking about the usage in higher-level applications. When h2c says we should specify the app or protocol, does this apply to the one directly using the HashToGroup function?\r\nOver time, default values (e.g. base mode with ristretto255) would tend to make usage of the same DST very common, even if the higher-level application is different. \"PrivacyPass\" or \"OPAQUE\" are different applications and protocols, that would also justify having their names used in the DST. But we'll encounter the chicken and egg problem: even higher-level protocols could claim the same.\r\nOpening the API to use a custom DST could lead to other problems, and make the whole design very weird. Using what @armfazh suggests seems to be the best way to do it properly.",
          "createdAt": "2020-11-10T14:29:10Z",
          "updatedAt": "2020-11-10T14:29:10Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Yeah, I think in this context, OPRF is the \"application protocol\" using hash-to-curve, so it seems appropriate to bind the DST to OPRF rather than the higher-level protocol using the OPRF.",
          "createdAt": "2020-11-10T15:23:37Z",
          "updatedAt": "2020-11-10T15:23:37Z"
        }
      ]
    },
    {
      "number": 199,
      "id": "MDU6SXNzdWU3MzkyNjg5NzM=",
      "title": "Blind in PreprocessedBlind",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/199",
      "state": "CLOSED",
      "author": "bytemare",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Hello,\r\n\r\nthe blind element used for preprocessing is not used after generating the client's own public key (i.e. scalar multiplication with the generator/base point) and blinding the server public key, but is still contained within the PreprocessedBlind structure.\r\n\r\nI suppose this is useful for debugging purposes, and thus implementation dependant. In this case, it might be useful to mention in the draft. Is my understanding correct ?\r\n\r\nThanks",
      "createdAt": "2020-11-09T18:39:42Z",
      "updatedAt": "2020-11-09T23:42:24Z",
      "closedAt": "2020-11-09T23:42:24Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Good catch :-) I removed this from the `Preprocess` output [here](https://github.com/cfrg/draft-irtf-cfrg-voprf/commit/87d42c249e83cce10a741e4a7bc96486e8b6cdf1). Closing as resolved!",
          "createdAt": "2020-11-09T23:42:24Z",
          "updatedAt": "2020-11-09T23:42:24Z"
        }
      ]
    },
    {
      "number": 200,
      "id": "MDU6SXNzdWU3Mzk0MzAyMDQ=",
      "title": "Change SHA-256 to SHA-512 for Ristretto255",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/200",
      "state": "CLOSED",
      "author": "bytemare",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Hello,\r\n\r\nin https://github.com/cfrg/draft-irtf-cfrg-voprf/blob/72ad54bba21da719456d85d3a12304410f83448d/draft-irtf-cfrg-voprf.md#oprfristretto255-sha-256, it is specified to use SHA-256 with Ristretto255. SHA-256 outputs 32 bytes.\r\n\r\nhttps://tools.ietf.org/html/draft-irtf-cfrg-ristretto255-decaf448-00#section-4.3.4 states that the one-way map operates on 64-byte strings.\r\n\r\nThe hash function to be used should be SHA-512, which outputs 64 bytes, as described in https://tools.ietf.org/html/draft-irtf-cfrg-hash-to-curve-10#appendix-B for the `ristretto255_XMD:SHA-512_R255MAP_RO_` cipher suite.",
      "createdAt": "2020-11-09T22:58:35Z",
      "updatedAt": "2020-11-10T01:49:22Z",
      "closedAt": "2020-11-10T01:49:22Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "`expand_message_xmd` requires that the hash function H \"number of bits output ... MUST be b >= 2 * k\", where k is the target security parameter. For ristretto255, k is 128, so SHA256 suffices here. We don't need a larger hash function.",
          "createdAt": "2020-11-09T23:39:45Z",
          "updatedAt": "2020-11-09T23:39:45Z"
        },
        {
          "author": "jedisct1",
          "authorAssociation": "NONE",
          "body": "Even if this is not a curve, Ristretto255 not being part of the recommended suites in the hash-to-curve document is indeed going to be very confusing.\r\n\r\nEven more since the only ristretto255 example in this very document is `ristretto255_XMD:SHA-512_R255MAP_RO_`. ",
          "createdAt": "2020-11-10T00:12:55Z",
          "updatedAt": "2020-11-10T00:12:55Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@jedisct1 Are you suggesting we bump to SHA512? If so, why? (I understand that it doesn't match the example in hash-to-curve, so perhaps we should change that example to use SHA256.) ",
          "createdAt": "2020-11-10T00:20:34Z",
          "updatedAt": "2020-11-10T00:20:34Z"
        },
        {
          "author": "jedisct1",
          "authorAssociation": "NONE",
          "body": "ristretto255 is a natural extension for libraries implementing edwards25519, initially for the needs of Ed25519.\r\n\r\nUsing SHA512 allows sharing the same hash-to-field code for edwards25519 and ristretto255, and doesn't need to introduce another hash function, as SHA512 is already there, as a requirement for Ed25519.",
          "createdAt": "2020-11-10T00:46:38Z",
          "updatedAt": "2020-11-10T00:46:38Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Oh, that's a great point! @alxdavids, what do you think? Hearing no objections, I'll change this tomorrow.",
          "createdAt": "2020-11-10T00:48:46Z",
          "updatedAt": "2020-11-10T00:48:46Z"
        },
        {
          "author": "bytemare",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree with what @jedisct1 said. The natural candidate is SHA-512, and using this here would also contribute in greater consistency of general usage of Ristretto255.",
          "createdAt": "2020-11-10T01:00:14Z",
          "updatedAt": "2020-11-10T01:00:14Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Sold :-) Let's move to SHA-512.",
          "createdAt": "2020-11-10T01:01:34Z",
          "updatedAt": "2020-11-10T01:01:34Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "The fix is in #203 -- please have a look!",
          "createdAt": "2020-11-10T01:06:53Z",
          "updatedAt": "2020-11-10T01:06:53Z"
        }
      ]
    },
    {
      "number": 201,
      "id": "MDU6SXNzdWU3Mzk0NTA1NTk=",
      "title": "Clarifications on BatchedEvaluation",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/201",
      "state": "CLOSED",
      "author": "bytemare",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Hello,\r\n\r\nreading the latest version of the draft, there are very few explanations about batching inputs/evaluations. For the reader unfamiliar with the subject it is not clear what these are about.\r\n\r\nFrom what I understand from a conversation with @chris-wood:\r\nthe mechanism works in a situation where a client requests multiple evaluations and could do it by sending all blinded inputs at once. The server would then evaluate them all but have a single proof for them all, and send this single proof back with the individual evaluations.\r\nSo, for N blinded inputs from the client, instead of having N requests, N evaluations, N proofs, and N responses, we would bring that down to  1 proof and 1 request-response carrying the N blinded inputs and N evaluations.\r\n\r\nIs this correct?",
      "createdAt": "2020-11-09T23:43:41Z",
      "updatedAt": "2020-11-25T14:55:02Z",
      "closedAt": "2020-11-25T14:55:02Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "That's correct! @bytemare, if you have cycles, would you mind creating a PR with this suggested clarification?",
          "createdAt": "2020-11-10T23:31:11Z",
          "updatedAt": "2020-11-10T23:31:11Z"
        },
        {
          "author": "bytemare",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks! Yes, I think I can do that in the following days.",
          "createdAt": "2020-11-10T23:38:05Z",
          "updatedAt": "2020-11-10T23:38:05Z"
        },
        {
          "author": "bytemare",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I tried to interpret it given the new test vectors.\r\n\r\nI think the draft could need a dedicated section about Batching to address the following points:\r\n\r\n1. Blinding method\r\nState that batching is only available with multiplicative binding for the client since we're using multiple blinds, a dedicated one for each input. Except if the logic changes and enables blinding using the preprocessed values with additive blinding. (I don't see an immediate reason why this won't be possible)\r\n2. Mode\r\nWhy is batching only used in verifiable mode? A client could rightfully ask for a batch of evaluations in base mode.\r\n3. Client and Server API\r\nThe client and server behaviors are impacted and the function specs would need to be added. This is in already in part addressed for the server.\r\nThere could be different functions or the same but all accept an array of arguments and the 'simple' blinding would only use the first element.\r\n\r\nNotes:\r\n- orders must be preserved, or unblinding will not have the desired result.\r\n- rate-limiting / anti-dos must be implemented by higher-level applications.",
          "createdAt": "2020-11-14T20:38:11Z",
          "updatedAt": "2020-11-14T22:00:46Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> Blinding method. State that batching is only available with multiplicative binding for the client since we're using multiple blinds, a dedicated one for each input. Except if the logic changes and enables blinding using the preprocessed values with additive blinding.\r\n\r\nHmm, I'm not sure I follow this. What \"logic changes\" are required to allow additive blinding for batches? \r\n\r\n> Mode. Why is batching only used in verifiable mode? A client could rightfully ask for a batch of evaluations in base mode.\r\n\r\nIn base mode, each blinded element sent to the server yields one evaluated element in response. Unless I'm missing something, there's no efficiency to be gained by batching in this case. But maybe you have something particular in mind?\r\n\r\n> Client and Server API. The client and server behaviors are impacted and the function specs would need to be added. This is in already in part addressed for the server. There could be different functions or the same but all accept an array of arguments and the 'simple' blinding would only use the first element.\r\n\r\nTo be clear, are you suggesting that the client API be augmented to use batching by default, or something else? (I don't disagree that some clarifications or changes are needed, but what's less clear to me is what should be the default.)\r\n\r\n> orders must be preserved, or unblinding will not have the desired result.\r\n\r\nThis is definitely something that's important to note, yeah.",
          "createdAt": "2020-11-15T15:38:22Z",
          "updatedAt": "2020-11-15T15:38:22Z"
        },
        {
          "author": "bytemare",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Hmm, I'm not sure I follow this. What \"logic changes\" are required to allow additive blinding for batches?\r\n\r\nNot much actually, just that all inputs will be blinded with the same pre-computed element. I think I got confused since the test vectors imply using the multiplicative blinding. \r\n\r\n> In base mode, each blinded element sent to the server yields one evaluated element in response. Unless I'm missing something, there's no efficiency to be gained by batching in this case. But maybe you have something particular in mind?\r\n\r\nYes, benefits would be on the network level and avoiding to have N round trips if one has N inputs to evaluate. What do you think?\r\n\r\n> To be clear, are you suggesting that the client API be augmented to use batching by default, or something else? (I don't disagree that some clarifications or changes are needed, but what's less clear to me is what should be the default.)\r\n\r\nI don't know. It could indeed be easier to have one function/method for single blinding, and another one for batched blinding, that simply wraps the other (and would also support a batch with only a single input). This way, higher-level protocols would need to figure out which one to use depending on their needs. Having one entry point may lead to unnecessary complexity internally and for users. I'm just spitballing here. What do you think?",
          "createdAt": "2020-11-18T22:11:33Z",
          "updatedAt": "2020-11-18T22:11:33Z"
        }
      ]
    },
    {
      "number": 208,
      "id": "MDU6SXNzdWU3NDEwMDQyNDA=",
      "title": "Ne,Ns,Nh defined per suite.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/208",
      "state": "CLOSED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "armfazh"
      ],
      "labels": [],
      "body": "To improve clarity, the Ne,Ns,Nh parameters should be defined per suite.\r\n",
      "createdAt": "2020-11-11T19:12:25Z",
      "updatedAt": "2020-11-13T23:05:21Z",
      "closedAt": "2020-11-13T23:05:21Z",
      "comments": []
    },
    {
      "number": 209,
      "id": "MDU6SXNzdWU3NDExNTQxODg=",
      "title": "Invalid encodings in test vectors",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/209",
      "state": "CLOSED",
      "author": "bytemare",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "armfazh"
      ],
      "labels": [],
      "body": "Hello,\r\n\r\nI tried testing my implementation in Go with the vectors found here: https://github.com/cfrg/draft-irtf-cfrg-voprf/blob/8ec42c73db97a862827b8eec959a4df3d031adec/poc/vectors/allVectors.json\r\n\r\nI encounter errors decoding private key values for Ristretto255. Stripping the 0x, the value is of length 63, which is odd, and Go's `hex.DecodeString()` returns the error `\"encoding/hex: odd length hex string\"`. I suppose something went wrong with generating these values.\r\n\r\nMaybe testing the values generated by https://github.com/cfrg/draft-irtf-cfrg-voprf/blob/8ec42c73db97a862827b8eec959a4df3d031adec/poc/test_oprf.sage would detect this kind of issues earlier.",
      "createdAt": "2020-11-11T23:38:00Z",
      "updatedAt": "2020-11-12T19:38:41Z",
      "closedAt": "2020-11-12T18:28:46Z",
      "comments": [
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "I get into the same issue, am preparing a fix for this.\r\n\r\nEncoding numbers must be always padded with zeros.",
          "createdAt": "2020-11-12T00:56:01Z",
          "updatedAt": "2020-11-12T01:03:24Z"
        },
        {
          "author": "bytemare",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Padding seems to solve some of the issues, indeed. Thanks!\r\nDecoding from hex now works for me, but some values seem not to be correct for internal representations.\r\n\r\nE.g. For Ristretto255Sha512, the value `\"skSm\": \"0x038ecf12e5465e4f1362d237521104338cde6717e26a25a5770da7ad85c704c6\"` fails with the error \"invalid scalar encoding\" using https://github.com/gtank/ristretto255/blob/9e5f56cbf4b15d3a98c048363d8d52fe11e0e2d0/internal/scalar/scalar.go#L76, in Base mode.\r\nBut in Verifiable mode, the value `\"skSm\": \"0x091a688c1b83ecbc9dac5da9042f60bbda9f332fd6cdf828252920741dbd9c01\"` decodes correctly to a Ristretto scalar using the same function.\r\n\r\nAlso: thanks for adding in the cipher suite ID alongside the name in #210 :) ",
          "createdAt": "2020-11-12T03:00:18Z",
          "updatedAt": "2020-11-12T03:01:22Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "Here the question is whether the go implementation is compatible with the sage code.\r\n@claucece could you please investigate which code is correct?\r\n\r\n\r\n",
          "createdAt": "2020-11-12T03:21:55Z",
          "updatedAt": "2020-11-12T03:21:55Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@armfazh I suspect it's an endianness issue. `hex` dumps the integer in big-endian format, whereas ristretto255 and decaf448 expect scalar [encodings to be little-endian](https://tools.ietf.org/html/draft-irtf-cfrg-ristretto255-decaf448-00#section-4.4). We need `EncodeScalar` and `DecodeScalar`-like functions to take care of these group-specific things. Can you (or @claucece) please add that to your change in #210?",
          "createdAt": "2020-11-12T13:29:27Z",
          "updatedAt": "2020-11-12T13:30:16Z"
        },
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "ristretto and decaf as @chris-wood said are little endian. The padding with zeros does not ONLY happen with ristretto and decaf although in this case it might have. It happened to me with p384, as well, with some test vectors. So it is NOT about the encoding and decoding of ristretto and decaf, but rather the fact that hex does not include leading zeros. See: https://stackoverflow.com/questions/15884677/python-printing-hex-removes-first-0",
          "createdAt": "2020-11-12T17:02:34Z",
          "updatedAt": "2020-11-12T17:02:34Z"
        },
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Both codes are correct in Golang and sage with the test vectors I added at that time @armfazh .. not sure what you mean by the question. The Golang CIRCL implementation does not include ristretto nor decaf. If you need to include the leading zeros with the python `hex` func, you can use: `str.zfill()`: `hex(15)[2:].zfill(2)`.",
          "createdAt": "2020-11-12T17:05:45Z",
          "updatedAt": "2020-11-12T17:05:54Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "The padding with zeros is already solved.\r\n\r\n\r\n> I suspect it's an endianness issue. `hex` dumps the integer in big-endian format, \r\n> Can you please add that to your change in #210?\r\n\r\nI can change endiannes for these groups.\r\n\r\n\r\n\r\n",
          "createdAt": "2020-11-12T17:10:16Z",
          "updatedAt": "2020-11-12T17:10:16Z"
        },
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Cool! Thank you @armfazh ! If you want to see the full testing with the test vectors of the draft of ristretto255 and decaf448 @bytemare , you can find it here: https://github.com/claucece/sage-ristretto255-decaf448",
          "createdAt": "2020-11-12T17:35:25Z",
          "updatedAt": "2020-11-12T17:35:25Z"
        },
        {
          "author": "bytemare",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Awesome, thanks! \ud83d\udc4d ",
          "createdAt": "2020-11-12T19:38:41Z",
          "updatedAt": "2020-11-12T19:38:41Z"
        }
      ]
    },
    {
      "number": 211,
      "id": "MDU6SXNzdWU3NDEyMjYzMjc=",
      "title": "Invalid `info` field encoding in test vectors",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/211",
      "state": "CLOSED",
      "author": "bytemare",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The \"info\" in test vectors is set to the value \"some_info\", therefore breaking testing for implementations/poc building the info after the draft's instructions.",
      "createdAt": "2020-11-12T02:49:39Z",
      "updatedAt": "2020-11-23T22:14:23Z",
      "closedAt": "2020-11-23T22:14:23Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Hmm, \"info\" is an opaque byte string. What are the instructions you see for specifying its format?",
          "createdAt": "2020-11-12T13:27:19Z",
          "updatedAt": "2020-11-12T13:27:19Z"
        },
        {
          "author": "bytemare",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I may have misinterpreted this paragraph:\r\n\r\n> Note that in the final output, the client computes Finalize over some auxiliary input data info. This parameter SHOULD be used for domain separation in the (V)OPRF protocol. Specifically, any system which has multiple (V)OPRF applications should use separate auxiliary values to ensure finalized outputs are separate. Guidance for constructing info can be found in {{!I-D.irtf-cfrg-hash-to-curve}}; Section 3.1.\r\n\r\nSo I understand it should be like \"RFCXXXX-$contextstring\", and not be an arbitrary string. But I may be wrong!",
          "createdAt": "2020-11-12T19:33:55Z",
          "updatedAt": "2020-11-12T19:33:55Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Oh, sure, this is just guidance. We can update the test to actually follow the guidance.",
          "createdAt": "2020-11-12T23:37:44Z",
          "updatedAt": "2020-11-12T23:37:44Z"
        },
        {
          "author": "bytemare",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This DST is not h2c related, so it might not have to be h2c compliant, and could indeed be some arbitrary value.\r\nIn that case, what would be the guidance on choosing/setting this opaque byte string?",
          "createdAt": "2020-11-12T23:55:47Z",
          "updatedAt": "2020-11-12T23:55:47Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> In that case, what would be the guidance on choosing/setting this opaque byte string?\r\n\r\nGood question. I think the guidance in draft-irtf-cfrg-hash-to-curve is probably the best we have at the moment. \r\n\r\nIn that case, would you be okay with updating the \"info\" string with something, uh, better than \"some_info\", and then closing this issue?",
          "createdAt": "2020-11-21T18:13:42Z",
          "updatedAt": "2020-11-21T18:13:42Z"
        },
        {
          "author": "bytemare",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I understand the need for the info field in Finalize and have the impression that h2c compliance adds complexity. I am wondering how this impacts the usage over time. But I have nothing better.\r\n***\r\n>  Specifically, any system which has multiple (V)OPRF applications should use separate auxiliary values to ensure finalized outputs are separate.\r\n\r\nSo this is app-specific. Therefore, it should not be specified by the implementation since the system can use the same lib/implementation multiple times. If I understand correctly how this unfolds, that means that it should be entered as a parameter when creating the client, and it's up to the user to use it wisely or not.\r\n\r\n> Guidance for constructing info can be found in {{!I-D.irtf-cfrg-hash-to-curve}};\r\n\r\nFollowing h2c that would also need a version.\r\n\r\nThese `app name` and `version` arguments would then be wrapped to conform to h2c (\"appname-version-mode-ciphersuite\"). If the app uses the finalize output to build-up a long-term secret, this might get inconvenient really quick since the app would need to use the same `app name` and `version` as used the first time the long-term secret was generated (e.g. augmented PAKEs). For these applications, the info filed really MUST be static: so no version, i.e. no h2c compliance, and maybe even the app name can change.",
          "createdAt": "2020-11-23T19:20:27Z",
          "updatedAt": "2020-11-23T19:20:49Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Hmm, I'm not really sure what more to do for this issue. Can you suggest a change on #216 if you think more should be done?",
          "createdAt": "2020-11-23T22:09:11Z",
          "updatedAt": "2020-11-23T22:09:11Z"
        }
      ]
    },
    {
      "number": 215,
      "id": "MDU6SXNzdWU3NDU5NDg3ODk=",
      "title": "Add h2c DST in test vectors",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/215",
      "state": "CLOSED",
      "author": "bytemare",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I suggest adding the DST used for hash-to-group and hash-to-scalar in the test vectors, just like info. This would allow identifying the correct assembly of that DST before trying to hash anything and fail early.\r\n\r\nSince I can't install Sage on my working machine right now, here is the suggested line I think would allow this to be added.\r\n\r\ntest_oprf.sage, line 121\r\n``` \r\nvecSuite[\"skSm\"] = to_hex(group.serialize_scalar(server.skS))\r\n+ vecSuite[\"dst\"] = to_hex(_as_bytes(\"VOPRF06-HashToGroup-\") + I2OSP(self.mode, 1) + I2OSP(self.suite.identifier, 2) )\r\nif self.mode == mode_verifiable:\r\n```\r\n",
      "createdAt": "2020-11-18T19:38:02Z",
      "updatedAt": "2020-11-24T14:43:56Z",
      "closedAt": "2020-11-24T14:43:56Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks, @bytemare! We'll see if we can work this in.",
          "createdAt": "2020-11-19T01:16:45Z",
          "updatedAt": "2020-11-19T01:16:45Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@armfazh, what do you think about this?",
          "createdAt": "2020-11-24T01:50:39Z",
          "updatedAt": "2020-11-24T01:50:39Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't think is needed at all (there is nothing special with it),\r\nhowever, if that helps to programmers to test code, then it may be worth add it in json files only.\r\n",
          "createdAt": "2020-11-24T02:11:53Z",
          "updatedAt": "2020-11-24T02:12:04Z"
        }
      ]
    },
    {
      "number": 219,
      "id": "MDU6SXNzdWU3NTA4ODk3MzQ=",
      "title": "Consider folding Unblind and Finalize together",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/219",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Currently, clients implement `Unblind` and `Finalize` together to complete the OPRF evaluation. I don't see a compelling reason to keep these separate, and expose an `Unblind` API, since it's not useful to OPRF clients. (They should not ever need the \"intermediate\" OPRF value -- the unblinded, evaluated elements.) I suggest we fold `Unblind` into `Finalize`. \r\n\r\n@armfazh, @alxdavids, @claucece: what do you think?",
      "createdAt": "2020-11-25T14:58:05Z",
      "updatedAt": "2021-02-17T00:22:29Z",
      "closedAt": "2021-02-16T14:18:33Z",
      "comments": [
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Agreed.",
          "createdAt": "2020-11-25T16:41:43Z",
          "updatedAt": "2020-11-25T16:41:43Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "iirc, privacy pass stores those intermediate tokens before redeemption. \r\nI don't know if that was done as an storage optimization. Alex knows better.",
          "createdAt": "2020-11-25T16:59:07Z",
          "updatedAt": "2020-11-25T16:59:07Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "It appears to be done because the redemption API is what provides the `Finalize()` aux/info parameter. So one can fetch a token and then later redeem it for a given context. That's a reasonable design choice, so I'm going to close this as-is.",
          "createdAt": "2021-02-16T14:18:33Z",
          "updatedAt": "2021-02-16T14:18:33Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "> ... later redeem it for a given context\r\n\r\nSo that means to get generic pases/tokens, and then narrow them to a particular application/context with the aux parameter. That's interesting.",
          "createdAt": "2021-02-17T00:22:29Z",
          "updatedAt": "2021-02-17T00:22:29Z"
        }
      ]
    },
    {
      "number": 222,
      "id": "MDU6SXNzdWU3NzUwNDQ2NTg=",
      "title": "Reproducible proof generation",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/222",
      "state": "CLOSED",
      "author": "bytemare",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The c and s values in the test vectors are build using a random value that's not given. Hence, the c and s values are not reproducible in tests to verify server-side computations are correct.\r\n\r\nIs this by design, i.e. the generate_proof output not be tested? ",
      "createdAt": "2020-12-27T14:09:56Z",
      "updatedAt": "2021-01-06T03:40:56Z",
      "closedAt": "2021-01-06T03:40:56Z",
      "comments": []
    },
    {
      "number": 224,
      "id": "MDU6SXNzdWU3ODc3MzM4ODg=",
      "title": "Update static DH oracle text",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/224",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "alxdavids"
      ],
      "labels": [
        "ready-for-text"
      ],
      "body": "From @hugokraw:\r\n\r\n> An attack with Q queries, lowers security by (log Q)/2 bits (not log Q), and it only applies if Q is a divisor of p-1 or p+1. Moreover, the *memory* cost of the attack (not just time) is 2^{p/2-(log(Q)/2}. \r\n\r\nWe might also want to update the \"use a larger curve\" guidance, since whether or not it's needed depends on the feasibility of these attacks. (OPAQUE, for example, is fine to use P-256 and the like.)\r\n\r\nMore information can be found in [Taylor's writeup](https://mumble.net/~campbell/tmp/20210116/draft-riastradh-staticdh.html) on  \"Attacks on Static Diffie-Hellman Oracles\".",
      "createdAt": "2021-01-17T15:49:05Z",
      "updatedAt": "2021-07-01T08:55:53Z",
      "closedAt": "2021-07-01T08:55:53Z",
      "comments": [
        {
          "author": "hugokraw",
          "authorAssociation": "NONE",
          "body": "My remark quoted above is correct _except_ that memory cost has been reduced to essentially constant (see Taylor's writeup). Communication cost remains infeasible even for those that think of  2^100 time attacks as realistic in some way.",
          "createdAt": "2021-01-18T04:41:00Z",
          "updatedAt": "2021-01-18T04:41:00Z"
        },
        {
          "author": "LoupVaillant",
          "authorAssociation": "NONE",
          "body": "Taylor's writeup spoke of the limitations of the legitimate server, and explicitly ignored communication overhead. Personally, I believe communication overhead provides an even more convincing argument, because of a fundamental limitation of our universe: the speed of light.\r\n\r\nLight travels about 30cm per nanosecond. A 1ns round trip thus requires the attacker to be within 15cm of the legitimate server. 10ns allows up to 1.5m. 100ns allows up to 15m. If the attacker can plant their hardware this close to the legitimate server for any length of time, they almost certainly have physical access, and therefore much better attacks at their disposal. For this reason alone, 100ns minimum round trip sounds like a reasonable lower bound.\r\n\r\nAnother point is that using a bigger curve is not the only way to raise the security of static DH. Since the attacker is limited by the capabilities of the *legitimate* server, applications can limit the number of illegitimate queries with simple (per user) throttling, detect the attack with regular DoS detection tools, or notice something is going on by looking at performance charts or logs.\r\n",
          "createdAt": "2021-01-18T12:08:29Z",
          "updatedAt": "2021-01-18T12:08:29Z"
        },
        {
          "author": "alterstep",
          "authorAssociation": "NONE",
          "body": "Close adversary -> other VM on the same machine or backdoor in switch/router! It can happen!\r\nUser assume crypto is safe -> not assume applications and users must work around crypto design flaws",
          "createdAt": "2021-01-18T16:19:04Z",
          "updatedAt": "2021-01-18T16:19:04Z"
        },
        {
          "author": "LoupVaillant",
          "authorAssociation": "NONE",
          "body": "> Close adversary -> other VM on the same machine or backdoor in switch/router! It can happen!\r\n\r\nI did not think of the VM, though that would be very close to having physical access. Given how hard process isolation is, if the adversary shares a server with the victim, side channels are probably a more serious threat than the number of possible requests. And even if they aren't, the attacker still has to deal with the limitations of the victim's CPU, virtual or not. My argument about distance is an *addition* to Taylor Campbell's argument about single thread speed.\r\n\r\n> User assume crypto is safe -> not assume applications and users must work around crypto design flaws\r\n\r\nAs much as we'd like to give users a black box that just works, in practice it doesn't work that way. We have to balance between convenience, efficiency, cost, and security. Sometimes we even balance between different kinds of security. Here, using relatively \"small\" curves (Curve25519, P-256\u2026) that are already in wide use means we can reuse existing implementations (some of which are optimised to the brim and reviewed by the best eyes), and get something running quickly.\r\n\r\nIf we're telling users \"nope, this is not secure enough, use a bigger curve\", they may skip OPRF entirely, and end up with even worse security. If we're telling them \"you need to limit the number of queries\", they can chose whether that's an acceptable price for using the otherwise convenient option.\r\n\r\nFinally, note that OPRFs aren't used in a vacuum. They're inevitably part of protocols, and protocols aren't supposed to be designed by noobs to begin with. PAKEs for instance can easily have lower security requirements from their OPRF, either because they don't entirely rely on it for security (AuCPACE), or because plain old password guessing is the bigger threat to begin with.\r\n",
          "createdAt": "2021-01-18T23:21:32Z",
          "updatedAt": "2021-01-18T23:21:32Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@alxdavids will you have cycles to do a PR for this in the next day or so?",
          "createdAt": "2021-02-18T18:52:50Z",
          "updatedAt": "2021-02-18T18:52:50Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "@chris-wood, not sure I'd have cycles for this before Monday. There was a recent write-up which is formulated as a draft CFRG document, but I'm not sure if it has yet been submitted: https://riastradh.github.io/draft-riastradh-cfrg-staticdh/draft-riastradh-cfrg-staticdh.html. Ultimately, if we could link this discussion outside of VOPRFs, I think this would be a nicer solution.",
          "createdAt": "2021-02-19T16:38:56Z",
          "updatedAt": "2021-02-19T16:38:56Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@alxdavids any chance you can do this before IETF 111?",
          "createdAt": "2021-06-08T11:57:23Z",
          "updatedAt": "2021-06-08T11:57:23Z"
        }
      ]
    },
    {
      "number": 225,
      "id": "MDU6SXNzdWU4MDIzNjkwNjg=",
      "title": "Consider adding no-DLEQ ciphersuite for VOPRF",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/225",
      "state": "CLOSED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chris-wood"
      ],
      "labels": [],
      "body": "The PMB Tokens paper constructs a weaker version of a VOPRF without DLEQ proofs (see Section 7 of https://eprint.iacr.org/2020/072). The weakness of the construction allows the server to send back random garbage and the client cannot distinguish.\r\n\r\nThis effectively provides the server with an extra bit of privacy that it can remove. However, removing the DLEQ proofs also comes with the benefit of removing some of the more expensive computation from the server, so I think it should be considered as a separate ciphersuite. Note, this is only valid for the VOPRF in the additive blinding case.\r\n\r\nFirst raised by @siyengar. cc @chris-wood, @armfazh, @claucece for further discussion.  ",
      "createdAt": "2021-02-05T18:07:41Z",
      "updatedAt": "2021-06-08T19:36:57Z",
      "closedAt": "2021-06-08T19:36:57Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Given that this possibly worsens the privacy posture of the protocol and is limited to a particular implementation of the blinding step, I'm not inclined to make this change. @siyengar, can you elaborate on the benefit here? (I probably just didn't understand the motivation.)",
          "createdAt": "2021-02-18T01:30:03Z",
          "updatedAt": "2021-02-18T01:30:03Z"
        },
        {
          "author": "siyengar",
          "authorAssociation": "NONE",
          "body": "Ya it likely does worsen the privacy posture, although this is probably a bit more complicated as there are some issues with the current scheme as well if the client fails to perform proper validation. My thought on the benefits of this type of scheme were 3 fold:\r\n\r\n1. Gets rid of the client needing to perform a validation step. As we know from TLS and other protocols, adding an `if` condition to the protocol allows people not to execute that `if` condition. And if people don't execute the proof then that also reduces the privacy of the protocol.\r\n2. Reduces number of bytes needed to be downloaded from the server. You don't need to download an extra dleq proof step with this. \r\n3. A More intuitive protocol. You get a token and then replay the token, so it becomes an intuitively simpler protocol.",
          "createdAt": "2021-02-19T16:04:49Z",
          "updatedAt": "2021-02-19T16:04:49Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't disagree with any of those points, but I really don't understand the proposal. Cold you or @alxdavids whip up a draft PR with something more concrete?",
          "createdAt": "2021-02-19T22:46:13Z",
          "updatedAt": "2021-02-19T22:46:22Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Okay, I RTFM :-) this seems less like a new ciphersuite and more like a new mode because (a) the group doesn't matter, (b) implementation details differ compared to the other two modes, and (c) the security properties are different. Perhaps we could call this \"WeakVerifiable\" mode, or something? It might look like so:\r\n\r\n1. Blind is as specified in Section 7 of [the PMB paper](https://eprint.iacr.org/2020/072.pdf).\r\n2. Evaluate is as specified in the base mode.\r\n3. Finalize is as specified in Section 7 of the PMB paper.  \r\n\r\n~~I'll take this and put up a PR tomorrow. Maybe we can land this before the draft deadline on Monday.~~\r\n\r\nI'll take this and put up a PR sometime before IETF 110. We can then discuss it during the meeting. ",
          "createdAt": "2021-02-19T22:58:11Z",
          "updatedAt": "2021-02-20T19:20:22Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Given that this particular variant requires some additional analysis, and it can be done in a followup spec should one want it, closing as WONTFIX. @siyengar, we can spin up a separate document should it really be needed.",
          "createdAt": "2021-06-08T19:36:57Z",
          "updatedAt": "2021-06-08T19:36:57Z"
        }
      ]
    },
    {
      "number": 226,
      "id": "MDU6SXNzdWU4MTAyODkyMjc=",
      "title": "Remove `info` parameter",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/226",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Finalize currently allows clients to provide mix in some application-layer info into the PRF evaluation. Is there any reason why we can't mix this in earlier in the protocol, e.g., alongside the application input? It's not cryptographically bound to the OPRF, and the client can use it to tweak the the output as they please. More specifically, they can acquire an OPRF evaluation and then Finalize it multiple times. I'm not sure I see the advantage of this, since it allows the verifier to link multiple Finalize outputs to the same sender. If a client truly wants N Finalize outputs, without sacrificing linkability, it seems they'd run the protocol N times. \r\n\r\nGiven this, I propose we remove the `info` entirely. We have language that says clients should use this as a DST, but it's also possible to add domain separation to the *input*, e.g., by encoding `x` with a DST. This would simplify the API and remove a possible client footgun. \r\n\r\nWhat do you think, @alxdavids, @armfazh?\r\n\r\ncc @jedisct1, too, in case he has thoughts on this!",
      "createdAt": "2021-02-17T15:32:44Z",
      "updatedAt": "2021-02-18T18:52:16Z",
      "closedAt": "2021-02-18T18:52:16Z",
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "@chris-wood Just to clarify, are you suggesting then that we place `info` in the final hash evaluation with a permanent fixed string, or just removing it entirely? I don't really have any problem with this proposal, and I think it makes sense to remove any unneeded variability from this final step.",
          "createdAt": "2021-02-17T16:49:35Z",
          "updatedAt": "2021-02-17T16:50:32Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I\u2019m thinking we remove it entirely. ",
          "createdAt": "2021-02-17T16:51:48Z",
          "updatedAt": "2021-02-17T16:51:48Z"
        },
        {
          "author": "jedisct1",
          "authorAssociation": "NONE",
          "body": "No objections at all, especially since it will simplifies the API a bit.",
          "createdAt": "2021-02-17T19:57:30Z",
          "updatedAt": "2021-02-17T19:57:30Z"
        },
        {
          "author": "bytemare",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Agreed !",
          "createdAt": "2021-02-17T20:21:05Z",
          "updatedAt": "2021-02-17T20:21:05Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "Another option that might work is to remove `aux` from Finalize, and add it to Blind. Thus, Blind will hash both `input` and `aux` to obtain a point. So, we can maintain the `aux` as a domain separation string.\r\n\r\n",
          "createdAt": "2021-02-17T20:28:02Z",
          "updatedAt": "2021-02-17T20:28:02Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> Another option that might work is to remove aux from Finalize, and add it to Blind. Thus, Blind will hash both input and aux to obtain a point. So, we can maintain the aux as a domain separation string.\r\n\r\nI'm not sure I see the benefit of having two string parameters with the same \"properties\" as input to the API. I'd prefer we give guidance for how applications can construct input with domain separation. (Or how implementations can bake domain separation beneath the API.)",
          "createdAt": "2021-02-18T01:27:10Z",
          "updatedAt": "2021-02-18T01:27:10Z"
        }
      ]
    },
    {
      "number": 228,
      "id": "MDU6SXNzdWU4MTE1MzkwNjE=",
      "title": "Consider adding deterministic KeyGen function",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/228",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We currently assume the existence of a randomized `KeyGen` function for each of the groups we care about. There are some use cases where one might want to deterministically derive a key (pair) from a seed of appropriate entropy. @alxdavids, what do you think about adding this to the spec?",
      "createdAt": "2021-02-18T23:01:22Z",
      "updatedAt": "2021-02-21T01:46:35Z",
      "closedAt": "2021-02-21T01:46:35Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "One way we might do this is by defining a mechanism based on HashToScalar() and a fixed generator for the group. @alxdavids, @armfazh: what do you think about adding a `Generator()` function to the POG API? We assume `ScalarBaseMult()` exists (for additive blinding), so this promoting `Generator()` to the API seems somewhat reasonable to me.",
          "createdAt": "2021-02-19T23:09:43Z",
          "updatedAt": "2021-02-19T23:09:43Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "The easiest way is to add an additional requirement to the group: to have a `KeygenFromSeed(seed)`.\r\nSo each group can define how to instantiate this function.\r\n\r\nHowever, the motivation for adding this function is on the caller protocol. For OPRF, a server can expect to have its private key generated somehow by another entity (provided is a correct key, of course). So the caller protocol can assume the group has deterministic generation of keys, sample one, and pass it to OPRF-Server.\r\nthougths?",
          "createdAt": "2021-02-20T01:05:12Z",
          "updatedAt": "2021-02-20T01:05:12Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> The easiest way is to add an additional requirement to the group: to have a KeygenFromSeed(seed).\r\n\r\nI like this less because it introduces a new API, whereas the proposal above was to basically clarify what already exists. (We have HashToScalar and ScalarBaseMult, which should be sufficient, right?) \r\n\r\n> So the caller protocol can assume the group has deterministic generation of keys, sample one, and pass it to OPRF-Server.\r\n\r\nThis isn't quite the use case. The idea motivation for this change is to allow the \"caller protocol\" provides the seed to produce a key pair. How that's possible right now is not clearly defined.",
          "createdAt": "2021-02-20T01:13:27Z",
          "updatedAt": "2021-02-20T01:13:27Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "Actually, Keygen is not even defined in Section 2. Its first reference is at Sec 3.2.\r\n`Prior to this phase, keys (skS, pkS) should be generated by calling a KeyGen function.`\r\n\r\nSo, defining `KeyGen()` and `KeyGen(seed)` at section 2.1 must be enough.\r\n\r\nQ: do we assume the deterministic method exists, or do we specify it?\r\n\r\nI think, we can only suggest how to implement the deterministic method, because there could be a different deterministic method to generate valid keys.\r\n",
          "createdAt": "2021-02-20T01:24:09Z",
          "updatedAt": "2021-02-20T01:24:09Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> I think, we can only suggest how to implement the deterministic method, because there could be a different deterministic method to generate valid keys.\r\n\r\nHmm, I don't think this is a viable solution, since users of this function should expect them to be interoperable. For example, two different implementations of the function should expect that KeyGen(seed) (or whatever) produces the same key, right?",
          "createdAt": "2021-02-20T02:39:59Z",
          "updatedAt": "2021-02-20T02:39:59Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree. My main observation is whether the description of  Keygen(seed) is MUST or RECOMMENDED (according to the IETF definitions).",
          "createdAt": "2021-02-20T23:52:59Z",
          "updatedAt": "2021-02-20T23:52:59Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Ahh, okay, I see. I\u2019m considering a MUST, given that it\u2019s effectively part of the POG API. ",
          "createdAt": "2021-02-21T00:12:10Z",
          "updatedAt": "2021-02-21T00:12:10Z"
        }
      ]
    },
    {
      "number": 231,
      "id": "MDU6SXNzdWU4MTI2MzkxNjI=",
      "title": "Update change log for -06",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/231",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "ready-for-text"
      ],
      "body": "The title says it all.",
      "createdAt": "2021-02-20T15:13:07Z",
      "updatedAt": "2021-02-21T15:30:38Z",
      "closedAt": "2021-02-21T15:30:38Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@armfazh would you be able to put together a PR for this?",
          "createdAt": "2021-02-21T01:46:52Z",
          "updatedAt": "2021-02-21T01:46:52Z"
        }
      ]
    },
    {
      "number": 232,
      "id": "MDU6SXNzdWU4MTI2NTY4ODc=",
      "title": "ristretto255 and decaf448 hash-to-scalar issues",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/232",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Currently, the document defines HashToScalar for these groups like so:\r\n\r\n```\r\nUse hash_to_field from {{!I-D.irtf-cfrg-hash-to-curve}} using Order() as the prime modulus, with L = 48, and expand_message_xmd with SHA-512.\r\n```\r\n\r\nThis aligns with HashToScalar for other groups (based on NIST curves). However, it is somewhat inconsistent with the HashToGroup implementation of ristretto255 and decaf448, which basically rely on HKDF and the one-way maps. I *think* the best way to address this is to provide a one-way map in the ristretto255 document, similar to that which, to my knowledge, [is implemented quite widely](https://github.com/gtank/ristretto255/blob/master/scalar.go#L64-L69). \r\n\r\nEdit: Filippo points out that there's text for this (that I just overlooked):\r\n\r\n> Given a uniformly distributed 64-byte string b, implementations can obtain a scalar by interpreting the 64-byte string as a 512-bit integer in little-endian order and reducing the integer modulo l, as in [RFC8032].\r\n\r\nSo we should just use this. :-)\r\n\r\n@gtank, @FiloSottile, @armfazh, @kwantam, @isislovecruft: what do you think?",
      "createdAt": "2021-02-20T16:35:16Z",
      "updatedAt": "2021-02-21T01:41:42Z",
      "closedAt": "2021-02-21T01:41:42Z",
      "comments": []
    },
    {
      "number": 234,
      "id": "MDU6SXNzdWU4MTI3NTExNjY=",
      "title": "Change SHA-512 to SHAKE-256 for Decaf",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/234",
      "state": "CLOSED",
      "author": "claucece",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This is basically an extension of #200 \r\n\r\ned448 is implemented with SHAKE-256, as defined and analysed here: https://tools.ietf.org/html/rfc8032#section-8.9\r\n\r\nFollowing the same comment by @jedisct1 , decaf448 is a natural extension to ed448 (even though it is not widely implemented), and it uses shake-256. \r\n\r\nThis, of course, mean that the  expand_message function will be different.\r\n\r\nI raised this point and #200 when implementing ristretto and decaf in the poc. \r\n\r\nJust wondering the thoughts after #200 went through.\r\n\r\ncc./ @jedisct1 @chris-wood ",
      "createdAt": "2021-02-21T01:56:01Z",
      "updatedAt": "2021-06-16T13:40:23Z",
      "closedAt": "2021-06-16T13:40:23Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't think we should make this change. SHAKE is not widely supported in cryptographic libraries. [The ristretto255/decaf448 draft](https://tools.ietf.org/html/draft-irtf-cfrg-ristretto255-decaf448-00) does not depend on SHAKE, for example.",
          "createdAt": "2021-02-21T01:58:05Z",
          "updatedAt": "2021-02-21T01:58:57Z"
        },
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The same way that curve448 or decaf is not widely implemented. But when you do implement it for signing (for ed448, which is most of the times what you use the functionality of decaf for), you have to have shake256. So implementing that one sort of implies the other. ",
          "createdAt": "2021-02-21T02:01:35Z",
          "updatedAt": "2021-02-21T02:01:35Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> The same way that curve448 or decaf is not widely implemented. But when you do implement it for signing (for ed448, which is most of the times what you use the functionality of decaf for), you have to have shake256. So implementing that one sort of implies the other.\r\n\r\nYeah, that's true, if you're using ed448 for signing, but it's not clear to me that's a sought-after use case. I'd like to see more widespread support before we force SHAKE onto libraries. ",
          "createdAt": "2021-02-21T02:05:18Z",
          "updatedAt": "2021-02-21T02:05:18Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@gtank, @filosottile: what's your take here?",
          "createdAt": "2021-02-21T15:20:51Z",
          "updatedAt": "2021-02-21T15:20:51Z"
        },
        {
          "author": "FiloSottile",
          "authorAssociation": "NONE",
          "body": "The r255-d448 draft doesn't depend on any hash functions, specifically to leave these decisions to higher-level specs that can aim for consistency. (I find the EdDSA specs introducing a choice of hash without actually having a requirement for a specific one an anti-pattern, for example.) I would recommend picking whatever is consistent within the context of your spec, but I don't have an opinion on what that is.\r\n\r\nEdit: this might sound at odds with [my displeasure with registries](https://buttondown.email/cryptography-dispatches/archive/cryptography-dispatches-registries-considered/) and agility, but it's not. As spec authors, we are in the business of providing building blocks that fit well with each other. As implementors though, we should pick one and only one building block for each slot, making registries unnecessary and removing runtime agility.",
          "createdAt": "2021-02-21T15:47:05Z",
          "updatedAt": "2021-02-21T15:49:59Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> I would recommend picking whatever is consistent within the context of your spec, but I don't have an opinion on what that is.\r\n\r\nYep, and it seems both would be consistent (for some definition of consistency). My take right now is that ease-of-implementation is a primary consideration. If we think most implementations of d448 will come packaged up with ed448 and EdDSA, then perhaps SHAKE is the right answer (since it adds no new dependency). But if we think most implementations of d448 may come with just ed448, and no corresponding EdDSA implementation, then maybe SHA512 is better. I don't know! \ud83e\udd37 ",
          "createdAt": "2021-02-21T15:56:37Z",
          "updatedAt": "2021-02-21T15:56:37Z"
        },
        {
          "author": "jedisct1",
          "authorAssociation": "NONE",
          "body": "Pretty sure that all existing Ed448 implementations also come with EdDSA, and thus SHAKE.\n\nAnd a library dedicated to Ed448 doesn't have any reasons to include SHA-2.\n\nSo, from an implementation perspective, opting for SHAKE wouldn't be a bad thing.",
          "createdAt": "2021-02-21T19:52:32Z",
          "updatedAt": "2021-02-21T19:52:32Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> Pretty sure that all existing Ed448 implementations also come with EdDSA, and thus SHAKE.\r\n\r\nYeah, you and @claucece certainly know better than me how widespread this is. \r\n\r\n> And a library dedicated to Ed448 doesn't have any reasons to include SHA-2.\r\n\r\nTrue, but my guess is that any existing cryptographic library certainly has support for SHA-2, whereas SHAKE is more esoteric. \r\n\r\nAnyway, to be clear, I don't feel strongly about this. My only desire is to not push new dependencies onto libraries that would not otherwise be there. If implementers think SHAKE would be more consistent with d448 implementations, then let's just do that. ",
          "createdAt": "2021-02-21T19:59:58Z",
          "updatedAt": "2021-02-21T20:00:11Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Okay, I looked through GitHub to educate myself. Frank's right that most ed448 libraries support EdDSA, so SHAKE's a given. But there are some notable edge cases (OpenSSL). \r\n\r\nIn any case, there seems to be a couple cases worth considering when implementing d448 for this specification: \r\n\r\n- Start from nothing: add d448 with either SHA2 or SHAKE\r\n\t- If you'll add EdDSA support, then you'd want SHAKE\r\n\t- If you don't ever want EdDSA support, then the choice of which probably boils down to implementation complexity?\r\n- Extend an existing general cryptographic library (without EdDSA) with d448: use SHA2 or SHAKE as available\r\n- Extend an existing general cryptographic library (with EdDSA) with d448: use SHAKE\r\n- Extend an existing ed448/EdDSA library with d448: use SHAKE\r\n\r\nSo, in most cases, implementation incentives seem better aligned with SHAKE than SHA-2. (Thanks for raising this improvement, @claucece! \ud83d\udcaa ) I take back my objection above. \r\n\r\n@claucece, would you be able to prep a PR that updates this and the test vectors? If not, I can take it.",
          "createdAt": "2021-02-21T20:26:58Z",
          "updatedAt": "2021-02-21T20:26:58Z"
        },
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@chris-wood for sure! I love working with any curve448 and related things ;) When do you need this?",
          "createdAt": "2021-02-21T20:43:48Z",
          "updatedAt": "2021-02-21T20:43:48Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Lovely :-) there's no immediate rush here. It would be good to get this done before the upcoming IETF meeting, though.",
          "createdAt": "2021-02-21T20:45:04Z",
          "updatedAt": "2021-02-21T20:45:12Z"
        }
      ]
    },
    {
      "number": 236,
      "id": "MDU6SXNzdWU4MTQyMTYxMjA=",
      "title": "Deriving keys deterministically requires domain separation?",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/236",
      "state": "CLOSED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "In this call to HashToScalar, no DST is specified, which is not conformant with Ciphersuite section in the draft.\r\n\r\nhttps://github.com/cfrg/draft-irtf-cfrg-voprf/blob/866a54cc1021390359e67d8a1b773e2d70f19067/poc/oprf.sage#L281-L284\r\n\r\nOTOH, setting `DST = \"VOPRF-HashToScalar\"|| context_string` is a dst specific to the (v)oprf protocol. It seems to me that the derivation of keys must be agnostic of the caller protocol.\r\n",
      "createdAt": "2021-02-23T07:59:16Z",
      "updatedAt": "2021-06-08T11:52:40Z",
      "closedAt": "2021-06-08T11:52:40Z",
      "comments": [
        {
          "author": "tmthrgd",
          "authorAssociation": "NONE",
          "body": "For reference: changing `HashToScalar` to incorporate DST was part of #233.",
          "createdAt": "2021-03-02T01:33:04Z",
          "updatedAt": "2021-03-02T01:33:04Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@armfazh is there a reason why we'd want the key derivation procedure to be decoupled from the protocol in this specification? To me, coupling them seems attractive, as I can imagine applications being tempted to re-use seeds for multiple protocols. This coupling would do its best to ensure that the key output from `DeriveKeyPair` is different from other keys derived from that seed. (Of course, applications could just reuse the derived keys in multiple protocols, but there's not much we can do about that from a specification level.)\r\n\r\n@alxdavids, @claucece, what do you think? ",
          "createdAt": "2021-03-02T14:58:24Z",
          "updatedAt": "2021-03-02T14:58:24Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "My main concern is that DeriveKeyPair, as is currently specified in the draft, uses `HashToScalar(seed, dst)`, with `dst=\"VOPRF...\"`.  But, the reference implementation sets `dst` to the empty string. So this needs to be fixed.\r\n\r\nAlso, I was slighly on the side of independent key generation, but I don't really have a strong preference about whether deriving keys must be coupled or not to the protocol.\r\n \r\n\r\n\r\n\r\n\r\n",
          "createdAt": "2021-03-02T20:18:41Z",
          "updatedAt": "2021-03-02T20:18:41Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> My main concern is that DeriveKeyPair, as is currently specified in the draft, uses HashToScalar(seed, dst), with dst=\"VOPRF...\". But, the reference implementation sets dst to the empty string. So this needs to be fixed.\r\n\r\nYeah, we can fix the reference implementation if this is the case. ",
          "createdAt": "2021-03-02T20:24:16Z",
          "updatedAt": "2021-03-02T20:24:16Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": ">> armfazh: My main concern is that DeriveKeyPair, as is currently specified in the draft, uses HashToScalar(seed, dst), with dst=\"VOPRF...\". But, the reference implementation sets dst to the empty string. So this needs to be fixed.\r\n\r\n> chris-wood: Yeah, we can fix the reference implementation if this is the case.\r\n\r\nWhile trying to patch deriveKeyPair function as follows\r\n\r\n```patch \r\ndef DeriveKeyPair(suite, seed):\r\n+     context_string = _as_bytes(\"VOPRF06-\") + I2OSP(mode_base, 1) + I2OSP(suite.identifier, 2)\r\n+     skS = suite.group.hash_to_scalar(seed, _as_bytes(\"HashToScalar-\") + context_string)\r\n    pkS = skS * suite.group.generator()\r\n    return skS, pkS\r\n```\r\nNote that `context_string` depends on the mode: `mode_base` or `mode_verifiable`, so the keys will be attacthed to the mode, not only to the ciphersuite used. is this intended? \r\n\r\n",
          "createdAt": "2021-04-30T23:35:13Z",
          "updatedAt": "2021-04-30T23:35:13Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> Note that context_string depends on the mode: mode_base or mode_verifiable, so the keys will be attacthed to the mode, not only to the ciphersuite used. is this intended?\r\n\r\nI think so, yeah. We can always relax this later if folks think it's too strong, but my take is that more context binding is generally better.",
          "createdAt": "2021-04-30T23:47:06Z",
          "updatedAt": "2021-04-30T23:47:06Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing as resolved. Please reopen if that's not the case!",
          "createdAt": "2021-06-08T11:52:40Z",
          "updatedAt": "2021-06-08T11:52:40Z"
        }
      ]
    },
    {
      "number": 241,
      "id": "MDU6SXNzdWU4Mjg1NDU4NTY=",
      "title": "Blinding blues",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/241",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "[Jarecki et al.](https://eprint.iacr.org/2021/273) have an upcoming paper at [PKCS2021](https://pkc.iacr.org/2021) that analyzes security properties of blinding mechanisms used in the 2HashDH construction. Recall, for the purposes of this issue, there are two types of blinding (using group notation to align with this specification, whereas their paper uses exponential notaton):\r\n\r\n- Multiplicative: \r\n   - C -> S: a = rH\u2019(x), for random scalar r\r\n   - S -> C: b = ak, for server private key k\r\n   - C: output H(x, br^(-1)) = H(x, kH\u2019(x))\r\n- Additive:\r\n   - C -> S: a = H\u2019(x) + rG, for random scalar r and fixed generator G\r\n   - S -> C: (b = ak, z = kG), for server private key k\r\n   - C: output H(x, b - zr) = H(x, H\u2019(x))\r\n\r\nA generalized summary of their results, without accounting for particular application properties, is as follows.\r\n\r\n- Multiplicative blinding is safe. \r\n- Additive blinding is possibly unsafe, unless:\r\n   - The client has a certified copy of the server public key. This always applies in the verifiable mode by necessity. There may be cases where the client has a certified copy of the key in the base mode.\r\n   - The client input is high entropy, e.g., in the case of Privacy Pass, 32 random bytes of data.\r\n   - The client mixes the public key z = kG into the OPRF evaluation, e.g., by computing H(x, z, kH\u2019(x)) instead of H(x, kH\u2019(x)).\r\n\r\nThe fundamental problem is as follows: additive blinding with a maliciously created z, i.e., one different than kG, gives the attacker a way of testing one input per OPRF interaction. Applications wherein this is possible regardless of the blinding mechanism, e.g., OPAQUE, are not affected (additive blinding is OK). However, for applications where this attacker capability  does not otherwise exist, additive introduces a real weakness.\r\n\r\nAll in all, this means the choice of blinding mechanism has security implications. The draft should ideally offer a sane default for applications that know what they\u2019re doing (see similar text in [hash-to-curve](https://cfrg.github.io/draft-irtf-cfrg-hash-to-curve/draft-irtf-cfrg-hash-to-curve.html#section-10)), with options and guidance for applications in doing something different if their circumstances warrant it. In considering these defaults, there are a number of options on the table, accounting for code reuse, performance, and bandwidth. \r\n\r\nHere\u2019s what I propose we do to address this issue.\r\n\r\nFirst, refactor the document slightly to permit different types of Blind and Unblind implementations. For example, Blind might be implemented using multiplicative, additive, or both types of blinding. While doing this, require that additive blinding always include the server public key in the Unblind output so that it\u2019s folded into the Finalize computation. This would promote both types of blindings to the main part of the document, whereas additive blinding is currently specified in an appendix.\r\n\r\nSecond, map each mode to a particular implementation in the following way:\r\n\r\n- Verified mode uses additive blinding, by default, since it is strictly a performance improvement and the client is expected to have a certified copy of the public key.\r\n- Weak verifiable mode (see [issue #225](https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/225) uses both additive and multiplicative.\r\n- Base mode uses multiplicative blinding, by default, as it does not require the server public key. Elsewhere, perhaps in an appendix, we can clarify that applications can use additive blinding only if the server public key is available or if the client input is high entropy.",
      "createdAt": "2021-03-11T00:58:49Z",
      "updatedAt": "2021-06-16T14:12:36Z",
      "closedAt": "2021-06-16T14:12:36Z",
      "comments": []
    },
    {
      "number": 242,
      "id": "MDU6SXNzdWU4MzM4ODExOTQ=",
      "title": "NIST curve scalar serialization",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/242",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chris-wood"
      ],
      "labels": [],
      "body": "We currently say that implementations should reduce mod `p`, but `p` is elsewhere the order of the group (and not the underlying field). We should probably fix the language here.",
      "createdAt": "2021-03-17T15:03:17Z",
      "updatedAt": "2021-06-16T14:09:31Z",
      "closedAt": "2021-06-16T14:09:31Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed in #249.",
          "createdAt": "2021-06-16T14:09:31Z",
          "updatedAt": "2021-06-16T14:09:31Z"
        }
      ]
    },
    {
      "number": 244,
      "id": "MDU6SXNzdWU4NDg4OTQ2NTQ=",
      "title": "HashTo* dst too short",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/244",
      "state": "CLOSED",
      "author": "bytemare",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "armfazh"
      ],
      "labels": [],
      "body": "The new dst ( \"HashToScalar-\" + context )  for _HashTo-something_ operations is less than the 16 bytes recommended by h2c. A couple of more characters should fix this.\r\n\r\ncc @chris-wood ",
      "createdAt": "2021-04-02T01:30:56Z",
      "updatedAt": "2021-05-21T15:03:09Z",
      "closedAt": "2021-05-21T15:03:09Z",
      "comments": [
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "I think this was already addressed.\r\n\r\nNote that the DST have more than 16 bytes:\r\nDST for HashToGroup(): `DST = \"HashToGroup-\" || contextString`\r\nDST for HashToScalar():  `DST = \"HashToScalar-\" || contextString`\r\nwhere `contextString = \"VOPRF06-\" || I2OSP(modeBase, 1) || I2OSP(suite.ID, 2)`\r\n\r\nUnless I am missing something, we only move `VOPRF06-` to the context string.\r\n",
          "createdAt": "2021-05-20T23:57:32Z",
          "updatedAt": "2021-05-20T23:57:32Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Indeed - closing as resolved. @bytemare please reopen if you disagree with this assessment!",
          "createdAt": "2021-05-21T15:03:09Z",
          "updatedAt": "2021-05-21T15:03:09Z"
        }
      ]
    },
    {
      "number": 251,
      "id": "MDU6SXNzdWU5MjE2NjE4MDc=",
      "title": "Should deserializing to the identity element be considered invalid?",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/251",
      "state": "CLOSED",
      "author": "kevinlewi",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The specification of `RandomScalar` says:\r\n\r\n> RandomScalar(): A member function of GG that chooses at random a non-zero element in GF(p).\r\n\r\nWhich means that `blindedElement` should never be the identity element.\r\n\r\nAt the moment, the server runs `DeserializeElement(BlindedElement)` as the first step of Evaluate:\r\n\r\n> DeserializeElement(buf): A member function of GG that maps a byte array buf to a group element A, or fails if the input is not a valid byte representation of an element.\r\n\r\nWhat if `BlindedElement` is indeed the identity element -- should this be considered invalid and rejected immediately by the server? Or should the server continue processing the request even though the client could not have generated this by following the protocol?",
      "createdAt": "2021-06-15T18:04:31Z",
      "updatedAt": "2021-06-16T23:21:16Z",
      "closedAt": "2021-06-16T23:21:16Z",
      "comments": []
    },
    {
      "number": 259,
      "id": "MDU6SXNzdWU5MzkxODI0NTY=",
      "title": "Add support for partially oblivious PRF evaluation",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/259",
      "state": "CLOSED",
      "author": "claucece",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "[Tyagi et al.](https://eprint.iacr.org/2021/864.pdf) present a modified variant of the 2HashDH-based OPRF that enables so-called \"partially-oblivious\" evaluation. Abstractly, this means that the OPRF protocol has two types of PRF inputs:\r\n\r\n- Private input, typically provided by the clients, that is hidden from the server during evaluation.\r\n- Public input, input by client and server, that is visible to both client and server during the protocol.\r\n\r\nRunning this partially-oblivious variant with \"empty\" public input is functionally the same as the design today, wherein there is no public input. Thus, this type of extension seems useful for enabling a wider set of applications, especially Privacy Pass and OPAQUE.\r\n\r\nAs an added benefit, one consequence of this variant is that it requires multiplicative blinding, which should simplify choices available to implementers and other applications using the OPRF. (See #241 for discussion around the considerations introduced by allowing multiple blinding variants.)",
      "createdAt": "2021-07-07T19:10:51Z",
      "updatedAt": "2021-08-03T18:29:40Z",
      "closedAt": "2021-08-03T18:29:40Z",
      "comments": [
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Related: https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/258",
          "createdAt": "2021-07-07T19:11:13Z",
          "updatedAt": "2021-07-07T19:11:13Z"
        }
      ]
    },
    {
      "number": 266,
      "id": "MDU6SXNzdWU5OTMzNzUxOTc=",
      "title": "OPRF(P-384, SHA-512) vs OPRF(P-384, SHA-384)",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/266",
      "state": "CLOSED",
      "author": "FredericJacobs",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Is there a compelling reason to use SHA-512 with P-384 as opposed to matching P-384 with SHA-384 like is commonly done for ECDSA signatures for instance? The number theoretical assumptions for ECVOPRF with P-384 make it such that you get below 192-bit of security, so is it warranted to require SHA-512 over SHA-384?",
      "createdAt": "2021-09-10T16:06:55Z",
      "updatedAt": "2021-09-20T14:11:48Z",
      "closedAt": "2021-09-20T14:11:48Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "This was done for alignment with the corresponding hash-to-curve suite, which uses SHA-512 with P-384. It's probably reasonable to update that suite, since SHA-384 meets the criteria needed for a 192-bit level. @kwantam, I'm not aware of any existing uses of the `P384_XMD:SHA-512_SSWU_RO_` suite, so perhaps we can just update this in both places?",
          "createdAt": "2021-09-13T13:51:59Z",
          "updatedAt": "2021-09-13T13:51:59Z"
        },
        {
          "author": "jedisct1",
          "authorAssociation": "NONE",
          "body": "Certainly not a bad change to make now, before applications start using P-384 with SHA-512.",
          "createdAt": "2021-09-13T14:31:00Z",
          "updatedAt": "2021-09-13T14:31:00Z"
        },
        {
          "author": "kwantam",
          "authorAssociation": "NONE",
          "body": "My vote would be to stick with SHA-512 rather than to move to SHA-384, for two reasons:\r\n\r\n- SHA-512 is, in general, much more widely deployed than SHA-384.\r\n- There's no speed advantage to SHA-384: it's just SHA-512 with a different IV and a truncated output.\r\n\r\nBut on the other hand, it looks like switching to SHA-384 in hash-to-curve doesn't really hurt anything---both of the P-384 suites end up using the same number of hash invocations in `expand_message` whether we use -384 or -512. And since it's apparently the case that P-384 is commonly paired with SHA-384, maybe SHA-512's general deployment level is beside the point.\r\n\r\nIn reality this is a pretty low-stakes decision given how infrequently P-384 is used; my recollection is that P-384 implementations tend to be slow.",
          "createdAt": "2021-09-13T14:35:50Z",
          "updatedAt": "2021-09-13T14:35:50Z"
        },
        {
          "author": "kwantam",
          "authorAssociation": "NONE",
          "body": "One more thought, in favor of SHA-384: we switched the '25519 suites from SHA-256 to SHA-512 because that matches up well with EdDSA. So it stands to reason that we would also match up the P-384 suite with the existing signature standard.",
          "createdAt": "2021-09-13T14:51:14Z",
          "updatedAt": "2021-09-13T14:51:14Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Performance-wise, here's a quick benchmark of SHA-384 from BoringSSL:\r\n\r\n```\r\n\u2717 ./tool/bssl speed -filter SHA-384\r\nDid 2917000 SHA-384 (16 bytes) operations in 1000173us (2916495.4 ops/sec): 46.7 MB/s\r\nDid 1318000 SHA-384 (256 bytes) operations in 1000514us (1317322.9 ops/sec): 337.2 MB/s\r\nDid 402000 SHA-384 (1350 bytes) operations in 1001386us (401443.6 ops/sec): 541.9 MB/s\r\nDid 74000 SHA-384 (8192 bytes) operations in 1008212us (73397.3 ops/sec): 601.3 MB/s\r\nDid 40000 SHA-384 (16384 bytes) operations in 1018670us (39266.9 ops/sec): 643.3 MB/s\r\n```\r\n\r\nAnd here's SHA-512: \r\n\r\n```\r\n\u2717 ./tool/bssl speed -filter SHA-512\r\nDid 2704000 SHA-512 (16 bytes) operations in 1000117us (2703683.7 ops/sec): 43.3 MB/s\r\nDid 1342000 SHA-512 (256 bytes) operations in 1000413us (1341446.0 ops/sec): 343.4 MB/s\r\nDid 435000 SHA-512 (1350 bytes) operations in 1001122us (434512.5 ops/sec): 586.6 MB/s\r\nDid 80000 SHA-512 (8192 bytes) operations in 1008565us (79320.6 ops/sec): 649.8 MB/s\r\nDid 41000 SHA-512 (16384 bytes) operations in 1003932us (40839.4 ops/sec): 669.1 MB/s\r\n```\r\n\r\nSo there is a difference for larger inputs, but most things being hashed in this context are on the smaller end. @FredericJacobs, does this mostly align with your perceived performance differences?",
          "createdAt": "2021-09-13T14:55:00Z",
          "updatedAt": "2021-09-13T14:55:00Z"
        },
        {
          "author": "kwantam",
          "authorAssociation": "NONE",
          "body": "The performance differences are almost certainly illusory. It is literally the same algorithm with different constants.",
          "createdAt": "2021-09-13T15:17:01Z",
          "updatedAt": "2021-09-13T15:17:01Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Yep =) ",
          "createdAt": "2021-09-13T15:17:41Z",
          "updatedAt": "2021-09-13T15:17:41Z"
        }
      ]
    },
    {
      "number": 267,
      "id": "MDU6SXNzdWU5OTQxMDIzODM=",
      "title": "Mismatch in test vectors for constants relating to metadata info",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/267",
      "state": "CLOSED",
      "author": "kevinlewi",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "There is a mismatch between how the test vectors are generated (https://github.com/cfrg/draft-irtf-cfrg-voprf/blob/master/poc/oprf.sage#L312) and what the current text says\r\n(https://github.com/cfrg/draft-irtf-cfrg-voprf/blame/master/draft-irtf-cfrg-voprf.md#L633) for handling the metadata info fields.\r\n\r\ncc: @chris-wood ",
      "createdAt": "2021-09-12T08:50:16Z",
      "updatedAt": "2021-09-13T16:45:10Z",
      "closedAt": "2021-09-13T16:45:10Z",
      "comments": []
    },
    {
      "number": 269,
      "id": "MDU6SXNzdWU5OTUwMTUxMjg=",
      "title": "Mismatched labels between test vectors and spec",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/269",
      "state": "CLOSED",
      "author": "FredericJacobs",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Spec says the following for evaluate.\r\n\r\n```\r\ndef Evaluate(skS, blindedElement, info):\r\n  R = GG.DeserializeElement(blindedElement)\r\n  context = \"Context-\" || contextString ||\r\n            I2OSP(len(info), 2) || info\r\n```\r\n\r\nBut test vectors use an undefined Metadata tag that does not exist in the spec.\r\n\r\n```\r\n   def evaluate(self, blinded_element, info):\r\n        R = self.suite.group.deserialize(blinded_element)\r\n        metadataDST = _as_bytes(\"Metadata-\") + self.context_string\r\n        metadata_input = I2OSP(len(info), 2) + info \\\r\n            + I2OSP(len(metadataDST), 2) + metadataDST\r\n        t = self.suite.group.hash_to_scalar(metadata_input, self.scalar_domain_separation_tag())\r\n\r\n```",
      "createdAt": "2021-09-13T15:13:28Z",
      "updatedAt": "2021-09-13T16:46:33Z",
      "closedAt": "2021-09-13T16:46:22Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed in #268.",
          "createdAt": "2021-09-13T16:46:33Z",
          "updatedAt": "2021-09-13T16:46:33Z"
        }
      ]
    },
    {
      "number": 270,
      "id": "MDU6SXNzdWU5OTUwMTgyMDE=",
      "title": "Test vectors do not use private key",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/270",
      "state": "CLOSED",
      "author": "FredericJacobs",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The sage implementation from the test vectors does not use the private key\r\n```\r\n   def evaluate(self, blinded_element, info):\r\n        R = self.suite.group.deserialize(blinded_element)\r\n        metadataDST = _as_bytes(\"Metadata-\") + self.context_string\r\n        metadata_input = I2OSP(len(info), 2) + info \\\r\n            + I2OSP(len(metadataDST), 2) + metadataDST\r\n        tag = self.suite.group.hash_to_scalar(metadata_input, self.scalar_domain_separation_tag())\r\n\r\n        t = self.skS + tag\r\n        tag_inv = inverse_mod(tag, self.suite.group.order())\r\n        Z = tag_inv * R\r\n```\r\n\r\nNote it takes the inverse of `tag` and not `t` like it should as defined by the spec.\r\n\r\n```\r\n  m = GG.HashToScalar(context)\r\n  t = skS + m\r\n  Z = (t^(-1)) * R\r\n```",
      "createdAt": "2021-09-13T15:16:04Z",
      "updatedAt": "2021-09-13T22:11:49Z",
      "closedAt": "2021-09-13T22:11:49Z",
      "comments": []
    },
    {
      "number": 271,
      "id": "MDU6SXNzdWU5OTUwMjI5MTg=",
      "title": "Spec is missing reference to string encoding vector",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/271",
      "state": "CLOSED",
      "author": "FredericJacobs",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I assume it would be ascii but the encoded string format is defined nowhere in the spec.",
      "createdAt": "2021-09-13T15:20:16Z",
      "updatedAt": "2021-09-18T13:15:36Z",
      "closedAt": "2021-09-18T13:15:36Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@FredericJacobs can you elaborate on this issue? I don't understand what's missing.",
          "createdAt": "2021-09-13T16:44:32Z",
          "updatedAt": "2021-09-13T16:44:32Z"
        },
        {
          "author": "FredericJacobs",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The spec doesn't say what string encoding is expected for strings like \"Context-\" or \"Finalize-\"",
          "createdAt": "2021-09-13T17:04:28Z",
          "updatedAt": "2021-09-13T17:04:28Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Ah, gotcha. It's ASCII. I'll clarify.",
          "createdAt": "2021-09-13T17:05:16Z",
          "updatedAt": "2021-09-13T17:05:16Z"
        }
      ]
    },
    {
      "number": 273,
      "id": "MDU6SXNzdWU5OTUyOTAyNjk=",
      "title": "Input -> Message?",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/273",
      "state": "CLOSED",
      "author": "FredericJacobs",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "<img width=\"183\" alt=\"Screenshot 2021-09-10 at 18 41 04\" src=\"https://user-images.githubusercontent.com/400296/133150547-b7c3b9a5-4f37-4fcf-9fe1-274110b2ffa6.png\">\r\n\r\nThe above is quite confusing to take output as input. \r\n\r\nI'm not really liking the nomenclature of input and output for VOPRFs.\r\n\r\nHave you considered other names?\r\n\r\nFor input, I think `message` could work. For output, I think `evaluationResult` or something, but it might be difficult to not have the name clash with the evaluation function.",
      "createdAt": "2021-09-13T20:22:19Z",
      "updatedAt": "2022-01-21T15:48:51Z",
      "closedAt": "2022-01-21T15:48:51Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> I'm not really liking the nomenclature of input and output for VOPRFs.\r\n\r\nThis is, at the end of the day, a PRF, which is just a function with inputs and outputs. We've not bikeshed the names of these yet.",
          "createdAt": "2021-09-13T22:25:04Z",
          "updatedAt": "2021-09-13T22:25:04Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "This function was dropped from the draft, so this is no longer relevant. Closing.",
          "createdAt": "2022-01-21T15:48:51Z",
          "updatedAt": "2022-01-21T15:48:51Z"
        }
      ]
    },
    {
      "number": 274,
      "id": "MDU6SXNzdWU5OTUzODU5NjE=",
      "title": "Out of order context strings: sage code vs. spec",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/274",
      "state": "CLOSED",
      "author": "kevinlewi",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The way the context is constructed in the sage code for the server's evaluate() function does not match the spec.\r\n\r\nSage code:\r\n\r\nhttps://github.com/cfrg/draft-irtf-cfrg-voprf/blob/master/poc/oprf.sage#L87-L89\r\n\r\nBut the spec says:\r\n\r\n  context = \"Context-\" || contextString ||\r\n            I2OSP(len(info), 2) || info\r\n\r\n\r\nI believe the sage code should be changed to read as:\r\n\r\n        context_DST = _as_bytes(\"Context-\") + self.context_string\r\n        context = context_DST + I2OSP(len(info), 2) + info\r\n\r\nThe same change also needs to be done to all of the functions that use the \"Context-\" string: Unblind/Finalize, also for the verifiable version.",
      "createdAt": "2021-09-13T22:10:21Z",
      "updatedAt": "2021-09-14T18:52:36Z",
      "closedAt": "2021-09-14T18:52:36Z",
      "comments": []
    },
    {
      "number": 276,
      "id": "I_kwDOBphpts47VfN0",
      "title": "Test vectors missing \"EvaluationProofR\"",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/276",
      "state": "CLOSED",
      "author": "kevinlewi",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Right now, in verifiable mode, the proof outputs two scalars \u201cc\u201d and \u201cs\u201d. However, a random \u201cr\u201d is sampled, but this \u201cr\u201d value is not displayed in the test vectors. I think we need to add one more line here: https://github.com/cfrg/draft-irtf-cfrg-voprf/blob/master/poc/test_oprf.sage#L188-L189 to also display \u201cr\u201d.",
      "createdAt": "2021-09-14T01:29:20Z",
      "updatedAt": "2021-09-15T14:15:01Z",
      "closedAt": "2021-09-15T14:15:01Z",
      "comments": []
    },
    {
      "number": 281,
      "id": "I_kwDOBphpts48F03C",
      "title": "Generalized H3",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/281",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "It's possible to extend the POPRF design to build a puncturable variant (in the metadata), a la [STAR](https://arxiv.org/pdf/2109.10074.pdf). Currently, the POPRF abstraction does not allow this to be done so easily. We could probably accommodate it by allowing servers to specify H3, the HashToScalar function used for computing the evaluation context. @alxdavids, thoughts?",
      "createdAt": "2021-09-27T13:33:55Z",
      "updatedAt": "2021-09-28T12:40:48Z",
      "closedAt": "2021-09-28T12:40:48Z",
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "I think this could be useful. Would the choice of H3 be completely open, or would there would be a set of potential choices? I only ask because the puncturable version requires a non-standard usage of an unstandardised PRF, and I was wondering if this is the sort of thing that we'd want to allow in general?",
          "createdAt": "2021-09-28T08:56:56Z",
          "updatedAt": "2021-09-28T09:39:23Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "If anything, I imagine it would be fixed (in this doc) to reasonable choices, namely, random oracles. Though, now that I think more about it, it's not unreasonable to just specify elsewhere how `info` is computed on client and server using the PRF, and then how the result is passed into the existing APIs. So nothing probably needs to happen here. Closing!",
          "createdAt": "2021-09-28T12:40:48Z",
          "updatedAt": "2021-09-28T12:40:48Z"
        }
      ]
    },
    {
      "number": 282,
      "id": "I_kwDOBphpts48MqB4",
      "title": "Update version context string and change log",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/282",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This will also update the test vectors.",
      "createdAt": "2021-09-28T16:15:42Z",
      "updatedAt": "2021-10-25T21:45:10Z",
      "closedAt": "2021-10-25T21:45:10Z",
      "comments": []
    },
    {
      "number": 285,
      "id": "I_kwDOBphpts48V1p9",
      "title": "Update test vectors for OPRF(P-384, SHA-384)",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/285",
      "state": "CLOSED",
      "author": "FredericJacobs",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Current test vectors use SHA-512",
      "createdAt": "2021-09-30T16:02:52Z",
      "updatedAt": "2021-09-30T16:03:19Z",
      "closedAt": "2021-09-30T16:03:19Z",
      "comments": [
        {
          "author": "FredericJacobs",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Nevermind. Didn't pull the latest",
          "createdAt": "2021-09-30T16:03:19Z",
          "updatedAt": "2021-09-30T16:03:19Z"
        }
      ]
    },
    {
      "number": 288,
      "id": "I_kwDOBphpts484Nm6",
      "title": "Remove input from Finalize DST",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/288",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chris-wood"
      ],
      "labels": [],
      "body": "In Finalize, we include `evaluatedElement` in the hash input, which seems redundant with `input`. We could probably drop `input` from this step, which would simplify the API quite a bit too. Or we could replace it with the representative of `input` in the group (`HashToGroup(input)`).",
      "createdAt": "2021-10-08T18:36:03Z",
      "updatedAt": "2022-05-26T10:41:41Z",
      "closedAt": "2022-05-26T10:41:40Z",
      "comments": [
        {
          "author": "bytemare",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This would also avoid to keep it in a state :)",
          "createdAt": "2021-10-09T09:30:49Z",
          "updatedAt": "2021-10-09T09:30:49Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "In principle this is a good idea especially when long inputs are passed to two hash functions (HashToGroup and last Hash).\r\nOTOH, after looking at the [JKK paper](https://eprint.iacr.org/2014/650.pdf), the security proof and any other arguments always consider the client's input to be part of the last hash invocation.\r\nSo, I am not really confident about removing the input from the last hash, not sure what is the effect on the security proof.\r\n",
          "createdAt": "2022-05-26T03:46:37Z",
          "updatedAt": "2022-05-26T03:46:50Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Yeah, I no longer think we can just remove it, but we could replace it with its concise representation (i.e., `HashToGroup(input)`).",
          "createdAt": "2022-05-26T10:37:39Z",
          "updatedAt": "2022-05-26T10:37:39Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Leaving this as-is absent security analysis.",
          "createdAt": "2022-05-26T10:41:40Z",
          "updatedAt": "2022-05-26T10:41:40Z"
        }
      ]
    },
    {
      "number": 289,
      "id": "I_kwDOBphpts484Vt5",
      "title": "Fixed-base key generation",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/289",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The group generator is currently fixed throughout the protocol, but it may useful to let applications vary this. It seems reasonable, for example, to let the public key base be something other than the fixed generator, such as `HashToGroup(something)`. Currently, the public key assumes that the base is the fixed group generator, which is convenient though (I think) not essential.",
      "createdAt": "2021-10-08T19:27:16Z",
      "updatedAt": "2021-10-14T17:27:09Z",
      "closedAt": "2021-10-14T17:27:09Z",
      "comments": []
    },
    {
      "number": 290,
      "id": "I_kwDOBphpts49HucY",
      "title": "trigger an error when the inverse of `k+m` does not exist",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/290",
      "state": "CLOSED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "armfazh"
      ],
      "labels": [],
      "body": "do we need to include an error when the inverse of `k+m` does not exist?\r\n\r\n_Originally posted by @armfazh in https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/284#discussion_r727727425_",
      "createdAt": "2021-10-13T16:05:00Z",
      "updatedAt": "2021-10-25T21:21:17Z",
      "closedAt": "2021-10-25T21:21:16Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "(oops, didn't mean to unassign!)",
          "createdAt": "2021-10-14T17:38:03Z",
          "updatedAt": "2021-10-14T17:38:03Z"
        }
      ]
    },
    {
      "number": 296,
      "id": "I_kwDOBphpts4-0BwD",
      "title": "Add more prose",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/296",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Each function would benefit from a description of what's happening, and why. ",
      "createdAt": "2021-11-15T15:56:41Z",
      "updatedAt": "2022-01-17T14:16:54Z",
      "closedAt": "2022-01-17T14:16:54Z",
      "comments": []
    },
    {
      "number": 297,
      "id": "I_kwDOBphpts4-0CP-",
      "title": "Reconsider batch presentation",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/297",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The current document focuses on non-batch evaluation as the common case. We describe how to batch [in a subsection](https://cfrg.github.io/draft-irtf-cfrg-voprf/draft-irtf-cfrg-voprf.html#section-3.3.2.2.1), though it is somewhat hidden. It's not clear to me that making batched evaluations the single (default) API would be cleaner or simpler. Maybe there's another way to help improve presentation clarity here.",
      "createdAt": "2021-11-15T15:58:40Z",
      "updatedAt": "2022-05-26T16:27:46Z",
      "closedAt": "2022-05-26T16:27:46Z",
      "comments": []
    },
    {
      "number": 298,
      "id": "I_kwDOBphpts4-0Cs2",
      "title": "Consider separating core algorithms from serialization details",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/298",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Since this specification defines a protocol, the API uses byte strings along the abstraction boundary. This means the implementation of core functions, like Blind, Evaluate, etc, all deal with de/serialization. It might be cleaner if we isolated the core cryptographic algorithms from the spec, i.e., those whose inputs are implementation specific, from the rest. ",
      "createdAt": "2021-11-15T16:00:24Z",
      "updatedAt": "2022-01-21T15:43:21Z",
      "closedAt": "2022-01-21T15:43:20Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed in #310.",
          "createdAt": "2022-01-21T15:43:20Z",
          "updatedAt": "2022-01-21T15:43:20Z"
        }
      ]
    },
    {
      "number": 305,
      "id": "I_kwDOBphpts5BauD1",
      "title": "`HashToGroup` and `HashToScalar` can produce invalid keys",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/305",
      "state": "CLOSED",
      "author": "daxpedda",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "`HashToGroup` can produce the identity element and `HashToScalar` can produce a zero scalar. It is extremely unlikely though.\r\n\r\nCurrently it's not specified how to behave when this happens. Potentially, on failure to produce a valid output, the program might just automatically try again, which would simply be rejection sampling. Maybe that's fine, IANA cryptographer.\r\n\r\nIn addition `DeriveKeyPair` relies on `HashToScalar`, but it's currently undefined how to handler zero scalars.\r\n```sage\r\ndef DeriveKeyPair(mode, suite, seed):\r\n  skS = GG.HashToScalar(seed, DST = \"HashToScalar-\" || contextString)\r\n  pkS = ScalarBaseMult(skS)\r\n  return skS, pkS\r\n```\r\nhttps://www.ietf.org/archive/id/draft-irtf-cfrg-voprf-08.html#section-2.1-5\r\n> Two functions can be used for generating a (V)OPRF key pair (`skS`, `pkS`)\r\nwhere `skS` is a non-zero integer less than `p` and `pkS = ScalarBaseMult(skS)`:\r\n`GenerateKeyPair` and `DeriveKeyPair`.\r\n\r\nRelated: cfrg/draft-irtf-cfrg-opaque#298.",
      "createdAt": "2022-01-10T07:04:29Z",
      "updatedAt": "2022-01-19T14:59:46Z",
      "closedAt": "2022-01-19T14:59:45Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Let's track this in #307.",
          "createdAt": "2022-01-19T14:59:45Z",
          "updatedAt": "2022-01-19T14:59:45Z"
        }
      ]
    },
    {
      "number": 306,
      "id": "I_kwDOBphpts5BesNZ",
      "title": "Specify key derivation",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/306",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The current spec punts on key derivation. In particular, it assumes some mechanism for deriving keys. To promote an EdDSA-like interface, wherein \"private keys\" are random seeds used to _derive_ actual scalars, it would be useful to specify the key generation mechanism. This might look something like the following:\r\n\r\n~~~\r\ndef DeriveKeyPair(seed, mode, suiteID, info):\r\n  contextString = \"VOPRF08-\" || \r\n                  I2OSP(mode, 1) || I2OSP(suiteID, 2) ||\r\n                  I2OSP(len(info), 2) || info\r\n  skS = GG.HashToScalar(seed, DST = \"DeriveKeyPair\" || contextString)\r\n  if skS == 0:\r\n    raise DeriveKeyPairError\r\n  pkS = ScalarBaseMult(skS)\r\n  return skS, pkS\r\n~~~\r\n\r\nOne could use this to derive keys for the OPRF, VOPRF, or POPRF protocol variants. For the POPRF case, `info` is repeated here and in the Evaluate interface, but this is not too dissimilar from HPKE, which admits application-specific information in the key schedule and at the AEAD level. Applications can choose how to expose `info` accordingly.",
      "createdAt": "2022-01-11T01:50:46Z",
      "updatedAt": "2022-01-21T15:42:20Z",
      "closedAt": "2022-01-21T15:42:20Z",
      "comments": [
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "(thinking out loud): when deriving keys based on the mode+info, we do this because it is expected to separate the key spaces, so --for example-- we ensure that generating keys for OPRF are likely not the same than those for VOPRF.\r\n\r\nHowever, there is no way to determine whether a pair of keys (sk,pk) should be used in a particular protocol. In other words, any valid pair (sk,pk) can be used for any protocol variant. Is this something we need to prevent?\r\n\r\n",
          "createdAt": "2022-01-11T21:05:55Z",
          "updatedAt": "2022-01-11T21:05:55Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> Is this something we need to prevent?\r\n\r\nIt's a good question, and something @tomrist and I discussed. There's (at least) two ways we can approach the question:\r\n\r\n1. Assume applications are capable of generating keeping keys separate. That is, treat key generation or derivation as something _external_ to the protocol.\r\n2. Assume applications are incapable of keeping keys separate, and enforce key diversification _within_ the protocol.\r\n\r\nOption (2) is similar to EdDSA, which treats \"private keys\" as random seeds and then derives scalars and public group elements from those seeds within the signing APIs. An application that then reuses the same seed across protocol modes would be safe, as the underlying scalars used for evaluation would necessarily be different.\r\n\r\nAt the end of the day, this is a question of where the `DeriveKeyPair` should exist, and what's best for implementations. I think option (2) is a totally reasonable and safe approach to the problem. It does, however, have the tradeoff that the \"abstraction\" layer to the protocol shifts away from scalar and group elements and towards something based on byte strings (random byte strings as private keys, and random byte strings as public keys). That might actually be an improvement in the long term, as it leaks less of the underlying implementation details, namely, that a prime-order group is involved, to applications. \r\n\r\nAll that said, I think we should (a) specify key derivation and (b) do it within the protocol. ",
          "createdAt": "2022-01-12T01:20:40Z",
          "updatedAt": "2022-01-12T01:20:40Z"
        },
        {
          "author": "daxpedda",
          "authorAssociation": "NONE",
          "body": "Related: #305.\r\n\r\nI would like to note, that it is important for implementations to know what is supposed to be done in the case of `DeriveKeyPairError`. Is rejection sampling okay? Basically make a new seed and retry?",
          "createdAt": "2022-01-12T03:39:40Z",
          "updatedAt": "2022-01-12T03:39:40Z"
        },
        {
          "author": "bytemare",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> However, there is no way to determine whether a pair of keys (sk,pk) should be used in a particular protocol. In other words, any valid pair (sk,pk) can be used for any protocol variant. Is this something we need to prevent?\r\n\r\nIsn't VOPRF _technically_ two protocols in one already? The evaluation part in VOPRF is in fact pure OPRF, and thus the same private key is used in OPRF and VOPRF. Given the proof work that has been done, is this a problem?",
          "createdAt": "2022-01-12T18:22:00Z",
          "updatedAt": "2022-01-12T18:22:00Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> Given the proof work that has been done, is this a problem?\r\n\r\nIn general, we should strive to make sure that separate protocols use separate keys. The proposal above gets us this for essentially free. ",
          "createdAt": "2022-01-12T18:23:23Z",
          "updatedAt": "2022-01-12T18:23:23Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "I support the idea of abstracting the pair of keys as opaque byte strings, and from them derive the required math objects.\r\n\r\nSo, a _deterministic key generation_ method is then required. The term 'derivation', I think, it will no longer apply.",
          "createdAt": "2022-01-13T06:49:12Z",
          "updatedAt": "2022-01-13T06:49:12Z"
        }
      ]
    },
    {
      "number": 307,
      "id": "I_kwDOBphpts5BkG_m",
      "title": "Unhandled zero scalars and identity elements",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/307",
      "state": "CLOSED",
      "author": "daxpedda",
      "authorAssociation": "NONE",
      "assignees": [
        "chris-wood"
      ],
      "labels": [],
      "body": "This is a list of functions that contain group operations that might produce zero scalars or identity elements. I don't actually know if this is a problem or not in some of the cases, I'm going to leave that to actual cryptographers to figure out.\r\n\r\n- [`GenerateProof`](https://cfrg.github.io/draft-irtf-cfrg-voprf/draft-irtf-cfrg-voprf.html#section-2.2.1-2) can return a zero scalar because of `s = (r - c * k) mod p`.\r\n\r\n- [`ComputeComposites`](https://cfrg.github.io/draft-irtf-cfrg-voprf/draft-irtf-cfrg-voprf.html#section-2.2.2-4) and [`ComputeCompositesFast`](https://cfrg.github.io/draft-irtf-cfrg-voprf/draft-irtf-cfrg-voprf.html#section-2.2.1-4) use `HashToScalar`, which can return a zero scalar, which is then used in `M = di * Cs[i] + M` and `Z = di * Ds[i] + Z`. Adding `M`, prevents producing an identity point, so it might not be a problem.\r\n\r\n- POPRF's [`Finalize`](https://cfrg.github.io/draft-irtf-cfrg-voprf/draft-irtf-cfrg-voprf.html#section-3.3.3-4) uses `HashToScalar`, which can return a zero scalar, which is then used in `T = ScalarBaseMult(m)`, which would produce the identity point. Afterwards, in `U = T + pkS`, adding a non-identity point would prevent `U` from becoming an identity point, so it might not be a problem.",
      "createdAt": "2022-01-12T07:41:31Z",
      "updatedAt": "2022-02-01T07:07:19Z",
      "closedAt": "2022-01-27T17:03:46Z",
      "comments": [
        {
          "author": "daxpedda",
          "authorAssociation": "NONE",
          "body": "I updated this to the current master, which resolved a lot of issues.",
          "createdAt": "2022-01-24T15:24:24Z",
          "updatedAt": "2022-01-24T15:24:24Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@armfazh did some analysis and concluded that the only place where we need to be concerned with distinguished scalars is in the `Blind()` step. Fortunately, `Blind` uses `RandomScalar` to produce a scalar, which returns a _non-zero_ scalar. Thus, the only way for `Blind` to produce the identity element is for `HashToGroup` to produce the identity element, and since that is entirely determined by the input to `Blind`, the only thing the function can do is raise an error. ",
          "createdAt": "2022-01-25T23:09:53Z",
          "updatedAt": "2022-01-25T23:09:53Z"
        },
        {
          "author": "hugokraw",
          "authorAssociation": "NONE",
          "body": "Chris asked me to take a look at this. The 2HashDH OPRF needs to specify the bind factor to be different than 0 since otherwise the de-blinding would not work. Pathological cases such as getting 0 when a random field value is chosen or getting the identity element when hashing into a curve (and possibly other cases like this) need to be handled as a severe error. Indeed, since the probability that this will happen by chance is essentially zero, such an output indicates a serious bug. \r\n\r\nBtw, OPAQUE also requires checking DH values to be in the prime group but this is irrelevant for the OPRF spec.",
          "createdAt": "2022-01-26T06:47:49Z",
          "updatedAt": "2022-01-26T06:47:49Z"
        },
        {
          "author": "daxpedda",
          "authorAssociation": "NONE",
          "body": "> Thus, the only way for `Blind` to produce the identity element is for `HashToGroup` to produce the identity element, and since that is entirely determined by the input to `Blind`, the only thing the function can do is raise an error.\r\n\r\nThis is a problem for OPAQUE, which uses the `Blind` function with the input being the user password. This means that there is a user password out there that can't be used with OPAQUE.\r\n\r\nThat said, the chances are extremely low for that to happen and it ideally people should use a password manager ... I would still prefer this to not be fallible if at all possible.",
          "createdAt": "2022-01-26T09:56:29Z",
          "updatedAt": "2022-01-26T09:56:29Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> Chris asked me to take a look at this. The 2HashDH OPRF needs to specify the bind factor to be different than 0 since otherwise the de-blinding would not work. Pathological cases such as getting 0 when a random field value is chosen or getting the identity element when hashing into a curve (and possibly other cases like this) need to be handled as a severe error. Indeed, since the probability that this will happen by chance is essentially zero, such an output indicates a serious bug.\r\n\r\nThanks @hugokraw! This is already handled by the spec. The scalar returned is guaranteed to be non-zero (unless an implementation does this wrong, of course).",
          "createdAt": "2022-01-26T12:54:45Z",
          "updatedAt": "2022-01-26T12:54:45Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> This is a problem for OPAQUE, which uses the Blind function with the input being the user password. This means that there is a user password out there that can't be used with OPAQUE.\r\n\r\n@hugokraw this is the more important comment, I think. In the context of OPAQUE, if the user's password maps to the identity element of the group, then indeed they cannot use that password with OPAQUE. ",
          "createdAt": "2022-01-26T12:56:12Z",
          "updatedAt": "2022-01-26T12:56:12Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@daxpedda here's my take on HashToScalar outputting zero in the cases identified:\r\n\r\n- ComputeComposites (computing `d_i`): A zero value does not invalidate the resulting (M, Z) output, so no special handling is needed here.\r\n- Proof generation and verification (computing `c`): A zero value does not invalidate the proof, since the private key is still perfectly blinded by `r`. \r\n- POPRF Finalize: Clients will not reach this step if servers appropriately abort when they can't find the multiplicative inverse of `skS + t`. If servers don't abort and somehow send garbage back to the client, then the proof verification will fail. \r\n\r\nAll in all, I don't think we need to do any additional special handling here. @armfazh, what do you think?",
          "createdAt": "2022-01-26T13:19:56Z",
          "updatedAt": "2022-01-26T13:19:56Z"
        },
        {
          "author": "daxpedda",
          "authorAssociation": "NONE",
          "body": "> * POPRF Finalize: Clients will not reach this step if servers appropriately abort when they can't find the multiplicative inverse of `skS + t`. If servers don't abort and somehow send garbage back to the client, then the proof verification will fail.\r\n\r\nThank you for the explanation! This comes back then to the issue that the protocol can simply fail at POPRFs `Evaluate` and has to be restarted, which is less then ideal I would argue.\r\n\r\nWith the concerns resolved here, I don't have much of a stake in this anymore, I came here from the OPAQUE protocol. As far as I understand the OPAQUE protocol doesn't intend to use POPRF but plain OPRF.\r\nI would like to avoid failing the protocol and having to start it over for OPAQUE, but I can't argue for POPRF because I don't know the use-cases involved.\r\n\r\nHappy to provide feedback of course :smiley:.",
          "createdAt": "2022-01-26T13:48:22Z",
          "updatedAt": "2022-01-26T13:48:22Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> Thank you for the explanation! This comes back then to the issue that the protocol can simply fail at POPRFs Evaluate and has to be restarted, which is less then ideal I would argue.\r\n\r\nFair point. We can likely make this fail earlier, in Blind. I'll send a PR to do that. ",
          "createdAt": "2022-01-26T13:56:34Z",
          "updatedAt": "2022-01-26T13:56:34Z"
        },
        {
          "author": "hugokraw",
          "authorAssociation": "NONE",
          "body": "> > This is a problem for OPAQUE, which uses the Blind function with the input being the user password. This means that there is a user password out there that can't be used with OPAQUE.\r\n> \r\n> @hugokraw this is the more important comment, I think. In the context of OPAQUE, if the user's password maps to the identity element of the group, then indeed they cannot use that password with OPAQUE.\r\n\r\nEven with a password dictionary with entropy of 256 bits, the probability of this happening is 2^{-256}. There are worse things happening at that probability level including guessing OPRF keys, discrete logarithms, signature and encryption keys, multiple collisions, etc. If you get such a case there is a billions of times higher probability that this is  due to a programming bug or the break of the underlying hash function. This is why I recommend that if a program finds such a case (a password hashed to the identity element), you output a HUGE ERROR message. \r\n\r\nBy the way, in the case of OPAQUE with 2HashDH, even if the password is mapped to the identity (a fact that is learned by a passive adversary by seeing H(pw)^r), the attacker (including an active one or even the server itself) needs to run a dictionary attack on the password because the password is hashed together with the group identity. With a 256-bit entropy password this will take 2^255 time. So you could keep running OPAQUE with this password. \r\n\r\nCan these good discussions be linked from the OPAQUE github? They can be useful for future reference.",
          "createdAt": "2022-01-26T17:42:58Z",
          "updatedAt": "2022-01-26T17:42:58Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> Even with a password dictionary with entropy of 256 bits, the probability of this happening is 2^{-256}. There are worse things happening at that probability level including guessing OPRF keys, discrete logarithms, signature and encryption keys, multiple collisions, etc. If you get such a case there is a billions of times higher probability that this is due to a programming bug or the break of the underlying hash function. This is why I recommend that if a program finds such a case (a password hashed to the identity element), you output a HUGE ERROR message.\r\n\r\nThis is true, and I don't think we have any security considerations text describing this case. I'll file an issue against the OPAQUE draft to add it.\r\n\r\n> Can these good discussions be linked from the OPAQUE github? They can be useful for future reference.\r\n\r\nYep =) ",
          "createdAt": "2022-01-26T20:45:55Z",
          "updatedAt": "2022-01-26T20:45:55Z"
        },
        {
          "author": "daxpedda",
          "authorAssociation": "NONE",
          "body": "> Even with a password dictionary with entropy of 256 bits, the probability of this happening is 2^{-256}. There are worse things happening at that probability level including guessing OPRF keys, discrete logarithms, signature and encryption keys, multiple collisions, etc. If you get such a case there is a billions of times higher probability that this is due to a programming bug or the break of the underlying hash function. This is why I recommend that if a program finds such a case (a password hashed to the identity element), you output a HUGE ERROR message.\r\n\r\nAs an implementer I'm still unsure what to do. Sure I can return an error message, but there is still passwords out there that **correctly** map to the identity point, so if this ever happens, there is no action I can take.\r\n\r\n> By the way, in the case of OPAQUE with 2HashDH, even if the password is mapped to the identity (a fact that is learned by a passive adversary by seeing H(pw)^r), the attacker (including an active one or even the server itself) needs to run a dictionary attack on the password because the password is hashed together with the group identity. With a 256-bit entropy password this will take 2^255 time. So you could keep running OPAQUE with this password.\r\n\r\nFor this to happen OPAQUE has to rely on a special version of `Blind` that doesn't return an error on an identity element.\r\n\r\n---\r\n\r\nThis could be easily solved in OPAQUE by making sure the `input` to `Blind` is not simply the password but add a counter to it like was done in `DeriveKeyPair`.\r\n\r\nI would like to understand though, why a non-fallible solution like using the reduction mod n-1 plus one method is undesired. It was mentioned before that it's undesirable to require `HashToScalar` or `HashToGroup` to not be able to return a zero scalar or identity element. If that is the problem, `HashToNonZeroScalar` and `HashToNonIdentityPoint` could be introduced for example. But the mod n-1 plus could also simply be added after using `HashToScalar` for example.\r\n\r\nI understand that there is not a high motivation to address this as the chances of it occurring are astronomically low.",
          "createdAt": "2022-01-28T10:58:19Z",
          "updatedAt": "2022-02-01T07:07:19Z"
        }
      ]
    },
    {
      "number": 315,
      "id": "I_kwDOBphpts5Ck9nH",
      "title": "Chris P.'s review: Editorial",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/315",
      "state": "CLOSED",
      "author": "cjpatton",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Some editorial feedback on the current version.\r\n\r\n# 1\r\n\r\n* The verifiability property of VOPRFs sounds similar to VRFs. Since there is a\r\n  draft for this, it's probably a good idea to reference as related work.\r\n\r\n* Quote:\r\n\r\n  > A Verifiable OPRF (VOPRF) is an OPRF wherein the server can prove to the\r\n  > client that F(k, x) was computed using the key k.\r\n\r\n  For this to make sense the client needs to know something about k. What about:\r\n  \"A Verifiable OPRF (VOPRF) is an OPRF wherein the server also proves to the\r\n  client that F(k, x) was produced by the key k corresponding to the public key\r\n  the client knows.\r\n\r\n* The term \"verifiable POPRF\" is used in this section. The word \"verifiable\" is\r\n  redundant since, if I understand correctly, POPRF is an extension of a VOPRF.\r\n  This inconsistency is a bit confusing, so I would just write \"POPRF\".\r\n\r\n* Quote:\r\n\r\n  > This document specifies OPRF, VOPRF, and POPRF protocols built upon\r\n  > prime-order groups based on the 2HashDH [JKKX16] and 3HashSDHI [TCRSTW21]\r\n  > designs, respectively.\r\n\r\n  It's not clear what type of primitive 2HashDH and 3HashSDHI are, since three\r\n  things (OPRF, VOPRF, and POPRF) can't be in 1:1 correspondence with two things\r\n  (2DHashDH and 3HashSDHI).\r\n\r\n# 2\r\n\r\n* Quote:\r\n\r\n  > A cryptographic hash function that is indifferentiable from a\r\n  Random Oracle.\r\n\r\n  I don't think that \"indifferentiable from a RO\" is something you can\r\n  meaningfully assert about a hash function. To me this statement is only\r\n  meaninfgul in the context of a security analysis. In particular you'd need to\r\n  add something like \"when modeling the underlying compression function as a\r\n  random oracle\".\r\n\r\n  It would be sufficient to just say here that `Hash` is a cryptograpphic hash\r\n  function. If you want to talk about its security considerations here, you\r\n  could say something this: \"A cryptographic hash function, modeled as a random\r\n  oracle in {{JKKX16}} and {{TCRSTW21}}.\"\r\n\r\n  Regarding indifferentiability: I'm not sure if this comes up in these papers\r\n  (I haven't checked): Indifferentiability from an RO (when the underlying\r\n  compression function is modeled as an RO) does not hold for all hash functions\r\n  (e.g., SHA-2). But whether this leads to an attack depends ultimately on the\r\n  application. It might be that length-extension attacks against SHA-2 aren't\r\n  exploitable in an attack against the constructions in this draft.\r\n\r\n  Finally, I wouldn't capitalize \"Random Oracle\".\r\n\r\n## 2.1\r\n\r\n* Part of this section is dedicated to enumerating the laws of any algebraic\r\n  group. Is this necessary? I ask because I haven't seen a CFRG document do\r\n  this before.\r\n\r\n* Quote:\r\n\r\n  > The fundamental group operation is addition `+` with identity element `I`.\r\n\r\n  In the remainder, `0` is used to denote the identity.\r\n\r\n# 3\r\n\r\n* The three figures don't show which steps depend on `pkS` and `skS`.\r\n  Presumasbly `Evaluate()` takes in `skS` and, for the verifiable modes,\r\n  `Finalize()` takes in `pkS`? Why not pass them to the functions that use\r\n  them?\r\n\r\n## 3.1\r\n\r\n* nit: RFC editor note and context string are out-of-sync. The former says\r\n  draft-08 and the latter says draft-09.\r\n\r\n* In the definition of `DeriveKeyPair()`, did you mean to write\r\n\r\n  ```\r\n  pkS = GG.ScalarBaseMult(skS)\r\n  ```\r\n\r\n  instead of\r\n\r\n  ```\r\n  pkS = ScalarBaseMult(skS)\r\n  ```\r\n\r\n### 3.3.3\r\n\r\n* `ScalarBaseMult(m)`/`GG.ScalarBAseMult(m)`?\r\n\r\n# 4\r\n\r\n* Quote:\r\n\r\n  > `Hash`: A cryptographic hash function that is indifferentiable from a Random\r\n  > Oracle, whose output length is Nh bytes long.\r\n\r\n  Same comment as in Section 2.\r\n\r\n* Editorial: The names of the ciphersuites have the format `OPRF(GG, Hash)`.\r\n  This convention is slightly misleading, since a ciphersuite is also applicable\r\n  to the VOPRF and POPRF.\r\n\r\n## 7\r\n\r\n* nit: s/Privacy Pass team/Privacy Pass working group/",
      "createdAt": "2022-01-28T04:20:09Z",
      "updatedAt": "2022-01-31T15:41:39Z",
      "closedAt": "2022-01-31T15:41:39Z",
      "comments": []
    },
    {
      "number": 316,
      "id": "I_kwDOBphpts5Ck9on",
      "title": "Chris P.'s review: Protocol",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/316",
      "state": "CLOSED",
      "author": "cjpatton",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Some comments on the spec itself. These are all suggestions for clarification,\r\nnone of them are breaking changes.\r\n\r\n## 2.1\r\n\r\n* Quote:\r\n\r\n  > Such groups are uniquely determined by the choice of the prime p that\r\n  > defines the order of the group.\r\n\r\n  This statement needs to be sharpened a bit. In particular, the order of the\r\n  group doesn't determine the encoding of group elements or the group action.\r\n  For example, it's possible to have multiple representations of the same\r\n  elliptic curve group, something that's exploited in the ed25519 paper.\r\n\r\n### 2.2.1\r\n\r\n* In ComputeCompositesFast:\r\n  * String `contextString` is undefined. I don't think it's clear from context\r\n    where this comes from. This is only made clear later on in the next section.\r\n  * The notiation for for-loops is `for i = 0 to m-1`. Is the range inclusive or\r\n    exclusive? To make this unambiguous, I woiuld write this in 100% Python,\r\n    e.g.: `for i in range(m)` for i from 0 to m (exclusive). (Here and in the\r\n    remainder.)\r\n\r\n## 3.2\r\n\r\n* In the definition of `SetupOPRFServer()`, the function `OPRFServerContext()`\r\n  is used but not defineed. However, I also noticed that `SetupOPRFServer()` is\r\n  never actually used. Is it appropriate to just remove it? (Similarly below.)\r\n\r\n## 3.3\r\n\r\n* Quote:\r\n\r\n  > Applications serialize protocol messages between client and server for\r\n  > transmission. Specifically, values of type Element are serialized to\r\n  > SerializedElement values, and values of type Proof are serialized as the\r\n  > concatenation of two SerializedScalar values. Deserializing these values can\r\n  > fail, in which case the application MUST abort the protocol with a\r\n  > DeserializeError failure.\r\n\r\n  This statement seems to imply that serialization is out-of-scope for this\r\n  document, but in Section 1.3 there is a paragraph that says all data\r\n  structures are represented in TLS-syntax. If the draft *does* intend to\r\n  specify the encoding of messages exchanged in the online protocol, then it\r\n  should do so unambiguously.\r\n\r\n  For example, in the definition of `Evaluate()` for VOPRF (Section 3.3.2), the\r\n  return value is the pair `evaluatedElement, proof`. Then the text says \"The\r\n  server sends both `evaulatedElement` and `proof` back to the client.\" The text\r\n  quoted above says how to encode these individually, but I'd argue it's not\r\n  clear what order they should be sent in.\r\n\r\n  Finally, TLS-syntax is not really used in this document.\r\n\r\n### 3.3.1\r\n\r\n* nit: The text makes clear where `skS` comes from, but I find it a bit jarring\r\n  that this isn't passed to `Evaluate()` as an explicit parameter. (Similarly\r\n  below, and similarly for `pkS`.)\r\n\r\n* The expression `blind^(-1)` isn't explicitly defined anywhere. To someone with\r\n  some basic algebra background, this is clearly the multiplicative inverse of\r\n  `blind` modulo `p` (the order of the group); but based on Section 2, my\r\n  impression is that we're not assuming the reader has this background.\r\n\r\n### 3.3.3\r\n\r\n* nit: `context` is similar to `contextString`, which is a bit confusing.\r\n  Consider giving it a different name, like `framed_info` or something.\r\n\r\n## 4.3\r\n\r\n  * I'm curious why you went for SHA-512 for Ristretto255 but are using SHA-256\r\n    for P-256.\r\n\r\n## 6.5\r\n\r\n* This section specifies deserialization and input validation for each\r\n  ciphersuite. As such I'm not sure it belongs in security considerations. I'd\r\n  lift this text to Section 4.\r\n\r\n## 6.6\r\n\r\n* Similarly, this section specifies hash-to-curve for each of ciphersuite and\r\n  ought to be lifted to Setion 4.",
      "createdAt": "2022-01-28T04:20:20Z",
      "updatedAt": "2022-01-31T15:41:39Z",
      "closedAt": "2022-01-31T15:41:39Z",
      "comments": []
    },
    {
      "number": 317,
      "id": "I_kwDOBphpts5Ck9qS",
      "title": "Chris P.'s review: Security Considerations",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/317",
      "state": "CLOSED",
      "author": "cjpatton",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "In my opinion, this is the weakest section of the document right now. (But it's not far \r\nfrom being great!) I'll start off with some high level thoughts and follow with detailed\r\ncomments.\r\n\r\nThe bulk of the security considerations is dedicated to discussion of\r\ncomputational assumptions used in security proofs. This is particularly\r\nimportant for this document because the assumptions are stronger than usual\r\nones, e.g., DLOG, CDH, DDH, and the like. The main consequence is that, compared\r\nto other protocols, adopters of this standard will have to be much more careful in\r\nchoosing the cryptographic parameters best suited for their application.\r\n\r\nThe reason for this is that the proposed protocols all inherently expose a\r\nso-called \"static-DH\" oracle. As the spec correctly points out, access to such\r\nan oracle leads to a key-recovery attack that, while not feasible for\r\nsufficiently large gropus, significantly degrades the security level,\r\npotentially making other attacks more likely. Yet the spec also points out that\r\nthe degreee to which security is degraded depends on the protocol, as well as\r\nthe application that is built upon it.\r\n\r\nThis is a murky state of affairs, and one I fear might lead to adopters making\r\nthe wrong choice. I think the document would benefit from providing clearer and\r\nmore conservative guidance. Some specific suggestions:\r\n\r\n1. Ideally we would be able to derive \"safety limits\" for each\r\n   ciphersuite and protocol. In particular, the document would specify how many times a\r\n   secret key operation can be performed before the key needs to be rotated. It's not immediately clear to me how this would work or how useful it would be, since the limits would have to be derived from the best known attacks. This is perhaps more of a research question than anything else.\r\n\r\n2. The document should provide stronger guidance on when using the smaller\r\n   groups (ristretto255 or P-256) is safe. My take (based on my read of the doc)\r\n   is that I would be comfortable just rate-limiting key operations for the\r\n   larger groups, but if I had to pick the smaller ones, I would really only\r\n   feel comfortable if there were some way of controlling the number of clients\r\n   that access oracle (by authenticating them, for instance). Of course, this may \r\n   end up being a question for the application.\r\n\r\n3. The document would benefit from providing examples of applications for which\r\n   the static DH oracle is not likely a problem and applications for which the\r\n   static DH oracle may be a problem. What about OPAQUE? PrivacyPass?\r\n\r\n4. Finally, because the computational assumptions are stronger, they are more\r\n   likely to be falsified one day than \"standard\" assumptions. If I were writing\r\n   this spec, I would probably NOT RECOMMEND that the smaller groups be used,\r\n   simply as a hedge against future advancements in cryptanalysis. I realize this\r\n   is probably a controversial position, so just take it as a suggestion. (As with all of\r\n   these comments, of course!)\r\n\r\n# 6\r\n\r\n* This section is written as if it only applies to POPROF. Is this intentional?\r\n  If so, what are the security considerations for OPRF and VOPRF?  I think it\r\n  would be better to be explicit about what considerations apply to which\r\n  protocol. For example, the definition of pseudorandomness applies to all\r\n  modes, as does the notion of oblivious (modulo the public input).\r\n\r\n  Perhaps the idea here is that OPRFs and VOPRFs can be viewed as special cases\r\n  of POPRFs. I think this makes sense, but it's not stated anywhere explicitly.\r\n\r\n* Quote:\r\n\r\n  > This section discusses the cryptographic security of our protocol, ...\r\n\r\n  Instead of \"our protocol\", I think this should be \"the POPRF protocol defined\r\n  in Section 3.3.3.\"\r\n\r\n## 6.2\r\n\r\n* The title of this section is \"Cryptographic Security\" is a bit confusing. I\r\n  expect it to define a set of security goals, but these were already enumerated\r\n  in Section 6.1. I think a better tittle would be \"Computational Assumptions\",\r\n  or even \"Cryptographic Assumptions\", since these are what the section\r\n  describes.\r\n\r\n* Throughout this section, the term \"cryptographic security\" is used as a\r\n  stand-in for some security property defined in Section 6.2. I think it would\r\n  be better to be specific. For example:\r\n\r\n  > Consequently, the cryptographic security of the OPRF and VOPRF variants is\r\n  > based on the assumption that the One-More Gap DH is computationally\r\n  > difficult to solve.\r\n\r\n  For which property is this assumption required: pseudorandomness,\r\n  obliviousness, or verifiabilty? All three perhaps?\r\n\r\n### 6.2.1\r\n\r\n* nit: I would revise \"the assumption that the One-More Gap DH is\r\n  computationally difficult to solve\" to \"the assumption that the One-More Gap\r\n  DH problem is computationally infeasible to solve for `GG`\".\r\n\r\n* What's the value of stating OMDH problem in this document? My guess is that a\r\n  reader who is interested in this would just refer to the paper.\r\n\r\n  One reason to not include it is that, in order understand what's going on, the\r\n  definition will require more detail than what's presented. In particular:\r\n    * What does the OPRF functionality do? Is it just an oracle that returns\r\n      `Evaluate()` on whatever input the attacker chooses?\r\n    * What is a \"DDH solver\", and what does it mean for their to be multiple DDH\r\n      solvers?\r\n    * How is `k` generated?\r\n    * \"`Q` is the number of allowed queries\": Queries to what? The OPRF\r\n      functionality or the DDH solvers?\r\n\r\n  I think these issues can be avoided by just simply naming the assumption and\r\n  providing a citation.\r\n\r\n* Quote:\r\n\r\n  > The original paper [JKK14] gives a security proof that the 2HashDH-NIZK\r\n  > construction satisfies the security guarantees of a VOPRF protocol Section\r\n  > 6.1 under the OMDH assumption in the universal composability (UC) security\r\n  > model.\r\n\r\n  It could be made more clear how this statement relates to the draft. What's\r\n  the relationship between 2HashDH-NIZK and the VOPRF in this draft? Is the\r\n  protocol Section 3.3.2 based on the protocol from the paper? Are there any\r\n  differences or are they the same protocol? Section 6.2.2 does this very well,\r\n  I think, so I weould just follow suit here.\r\n\r\n  nit: UC isn't a security model per say. I would instead say: \"... under the\r\n  OMDH assumption. The goals of pseudorandomness, obliviousness, and\r\n  verifiablity are formulated in the Universal Composability (UC) framework.\"\r\n  I'd also add a reference to the UC paper.\r\n\r\n#### 6.2.1.1\r\n\r\n* This section is too dense and can use a bit more exposition. In particular the\r\n  stated problem is that the OPRF/VOPRF protocols allow \"instantiation of a\r\n  oracle for construction Q-strong-DH (Q-sDH) samples\". This is fairly jargony,\r\n  and the average reader is not going to know what this means.\r\n\r\n  This section needs to start out by saying what attack vector is being\r\n  exploited, and to what end. For example: \"The OPRF and VOPRF protocols are\r\n  vulnerable to a class of key-recovery attacks in which a malicious client, by\r\n  issuing a carefully crafted sequence of messages to the server, can compute\r\n  bits of the server's secret.\"\r\n\r\n  Then, before getting into the details, I would pivot to what this means for\r\n  applications: \"The efficacy of these attacks depends on how much computational\r\n  power the adversary has at its disposal and how many queries it is able to\r\n  make. For applications in which the latter is difficult to control, it will be\r\n  necessary to choose a larger group.\"\r\n\r\n* At the end of this section I foundd myself wondering if Ristretto255 or P-256\r\n  are going to cut it. I noticed that this gets discussed later in Section 6.2.4.\r\n  I would add a forward reference here.\r\n\r\n* Quote:\r\n\r\n  > Recall that from a malicious client's perspective, the adversary wins if\r\n  > they can distinguish the OPRF interaction from a protocol that computes the\r\n  > ideal functionality provided by the PRF.\r\n\r\n  I'm not sure I understand this paragraph. It sounds like it's saying that the\r\n  the protocol is designed so that the client can't distinguish the output of\r\n  the POPRF/VOPRF/OPRF from a random function. What is \"an ideal functionality\r\n  provided by the PRF\"? This is the first time such an ideal functionality is\r\n  mentioned.\r\n\r\n  This seems like it's a vestage of something else that has been deleted.\r\n  Perhaps just remove the paragraph?\r\n\r\n### 6.2.2\r\n\r\n* Quote:\r\n\r\n  > The construction is identical to 3HashSDHI, except ...\r\n\r\n  Slightly simpler: \"Our construction is identical, except ...\".\r\n\r\n* Quote:\r\n\r\n  > Given G1, G2, h*G2, (h^2)*G2, ..., (h^Q)*G2; for G1 and G2 generators of\r\n  > GG. Output h where h is an element of GF(p)\r\n\r\n  There are grammar errors here that make this difficult to understand. How\r\n  about: \"Given G1, G2, h*G2, (h^2)*G2, ..., (h^Q)*G2, where G1 and G2 are both\r\n  generators of the group GG, compute the scalar h.\"\r\n\r\n#### 6.2.2.1\r\n\r\nSimnilar comments as for Section 6.2.1.1.\r\n\r\n### 6.2.3\r\n\r\n* This observation is interesting, but I don't see how it's relevant to the\r\n  spec. Would an implementor want to exploit this equivalence some how?\r\n\r\n  Incidentally, why is this section in Security Considerations? (I.e., what is\r\n  its relevance for security?)\r\n\r\n### 6.2.4\r\n\r\n* Quote:\r\n\r\n  > Moreover, such attacks are only possible for those certain applications\r\n  > where the adversary can query the POPRF directly. In applications where such\r\n  > an oracle is not made available this security loss does not apply.\r\n\r\n  Given how important this is, I think it would be worthwhile to cite\r\n  applications for which this is (and is not) a problem. For example, does\r\n  Privacy Pass expose a static-DH oracle?\r\n\r\n* I think the draft should provide more guidance for how to assess this risk and\r\n  mitigate the static DH oracles. Some thoughts:\r\n\r\n    * How do I know if my application is exposing this oracle?\r\n\r\n    * In some applications it might be possbible to slow down the attacker by\r\n      rate-limiting queries to the server.\r\n\r\n    * My understanding of the attacks involving static-DH oracles is that they\r\n      lead eventually to key recovery. Would one way to mitigate this be to\r\n      recommend frequent key rotation?\r\n\r\n* Quote:\r\n\r\n  > ... are RECOMMENDED to only implement ciphersuites 0x0002, 0x0004, and\r\n  > 0x0005.\r\n\r\n  Since future implementations might pick future ciphersuites, I think it makes\r\n  sense to sharpen the requirement here. How about: \"... are RECOMMENDED to\r\n  choose groups that target a higher security level, such as decaf448 (used by\r\n  ciphersuite 0x0002), P-384 (used by 0x0004), or P-521 (used by 0x0005).\r\n\r\n## 6.7\r\n\r\n* `GenerateProof()` is executed on sensitive data (namely `skS`), so I think it\r\n  too MUST run in constant-time.",
      "createdAt": "2022-01-28T04:20:34Z",
      "updatedAt": "2022-01-31T15:41:39Z",
      "closedAt": "2022-01-31T15:41:39Z",
      "comments": []
    },
    {
      "number": 320,
      "id": "I_kwDOBphpts5CxpBZ",
      "title": "Infallible functions",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/320",
      "state": "CLOSED",
      "author": "daxpedda",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "> Even with a password dictionary with entropy of 256 bits, the probability of this happening is 2^{-256}. There are worse things happening at that probability level including guessing OPRF keys, discrete logarithms, signature and encryption keys, multiple collisions, etc. If you get such a case there is a billions of times higher probability that this is due to a programming bug or the break of the underlying hash function. This is why I recommend that if a program finds such a case (a password hashed to the identity element), you output a HUGE ERROR message.\r\n\r\nAs an implementer I'm still unsure what to do. Sure I can return an error message, but there are still passwords out there that **correctly** map to the identity point, so if this ever happens, there is no action I can take.\r\n\r\n> By the way, in the case of OPAQUE with 2HashDH, even if the password is mapped to the identity (a fact that is learned by a passive adversary by seeing H(pw)^r), the attacker (including an active one or even the server itself) needs to run a dictionary attack on the password because the password is hashed together with the group identity. With a 256-bit entropy password this will take 2^255 time. So you could keep running OPAQUE with this password.\r\n\r\nFor this to happen OPAQUE has to rely on a special version of `Blind` that doesn't return an error on an identity element.\r\n\r\n---\r\n\r\nThis could be easily solved in OPAQUE by making sure the `input` to `Blind` is not simply the password but add a counter to it like was done in `DeriveKeyPair`.\r\n\r\nI would like to understand though, why a non-fallible solution like using the reduction mod n-1 plus one method is undesired. It was mentioned before that it's undesirable to require `HashToScalar` or `HashToGroup` to not be able to return a zero scalar or identity element. If that is the problem, `HashToNonZeroScalar` and `HashToNonIdentityPoint` could be introduced for example. But the mod n-1 plus could also simply be added after using `HashToScalar` for example.\r\n\r\nI understand that there is not a high motivation to address this as the chances of it occurring are astronomically low.\r\n\r\n---\r\n\r\nContinuation from https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/307#issuecomment-1024103769.",
      "createdAt": "2022-02-01T07:09:26Z",
      "updatedAt": "2022-05-26T10:41:22Z",
      "closedAt": "2022-05-26T10:41:22Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Please take this issue to the OPAQUE repo :) This is not something the VOPRF spec should address. ",
          "createdAt": "2022-02-01T13:39:15Z",
          "updatedAt": "2022-02-01T13:40:21Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Oops, I didn't read the bottom half of this issue! (I was perusing on my phone.) Sorry about that.\r\n\r\nYou ask:\r\n\r\n> I would like to understand though, why a non-fallible solution like using the reduction mod n-1 plus one method is undesired. It was mentioned before that it's undesirable to require HashToScalar or HashToGroup to not be able to return a zero scalar or identity element. If that is the problem, HashToNonZeroScalar and HashToNonIdentityPoint could be introduced for example. But the mod n-1 plus could also simply be added after using HashToScalar for example.\r\n\r\nThe hash-to-group operation is assumed to act like a random map from inputs to _all_ group elements, including the identity element. We [don't currently have an implementation](https://cfrg.github.io/draft-irtf-cfrg-hash-to-curve/draft-irtf-cfrg-hash-to-curve.html) of hash-to-group-excluding-identity, which, as you point out, would address this issue for `Blind`. One could wrap hash-to-group with a counter-like thing to implement it, but I'm not convinced this is worth the complexity for something that happens with negligible probability. ",
          "createdAt": "2022-02-01T13:48:14Z",
          "updatedAt": "2022-02-01T13:48:14Z"
        },
        {
          "author": "daxpedda",
          "authorAssociation": "NONE",
          "body": "Specifically I would like to know why the \"reduction mod n-1 plus one\" method can't be used instead of a counter, which is rejection sampling and not constant-time.\r\n\r\n> One could wrap hash-to-group with a counter-like thing to implement it\r\n\r\nIndeed, that would have been my suggestion.\r\n\r\n> ... I'm not convinced this is worth the complexity for something that happens with negligible probability.\r\n\r\nI understand the hesitation:\r\n- For OPAQUE it is important because otherwise specific password can't be used. The chance of that actually occurring is (extremely) low, but not impossible, something that for example a traditional password hash like Argon2 doesn't suffer from.\r\n- A counter is undesirable, besides from being not constant-time, because it would still need to be fallible in the code. This makes auditing harder (a tiny bit) and for example doesn't easily allow for encoding the infallibility of it through the type system. For example, in Rust, one could `panic` instead, but that's even more undesirable. Again, something that Argon2 doesn't suffer from.\r\n\r\nI'm very much seeing this from the lens of implementing the OPAQUE protocol in Rust. I would like to provide a non-fallible API to consumers where I can advertise that this can neither panic nor fail otherwise.\r\nWhen consumers of this library review the error codes, they will find obvious ones, like `PasswordMismatch`, but `ProtocolFailure`, something that will deterministically fail won't look that good when trying to convince people to switch from traditional password hashing to PAKE.",
          "createdAt": "2022-02-01T14:10:46Z",
          "updatedAt": "2022-02-01T14:10:46Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> I'm very much seeing this from the lens of implementing the OPAQUE protocol in Rust. I would like to provide a non-fallible API to consumers where I can advertise that this can neither panic nor fail otherwise.\r\n\r\nYeah, I understand the motivation here, and I agree that this would be a nice property to advertise to users. However, as you say, even if we went with a counter (or similar) based try-and-increment solution, the code would inherently need to deal with failures, right? I simply don't see a solution right now that would yield an infallible interface. ",
          "createdAt": "2022-02-01T14:14:05Z",
          "updatedAt": "2022-02-01T14:14:05Z"
        },
        {
          "author": "daxpedda",
          "authorAssociation": "NONE",
          "body": "> I simply don't see a solution right now that would yield an infallible interface.\r\n\r\nThe \"reduction mod n-1 plus one\" method could work.",
          "createdAt": "2022-02-01T14:15:36Z",
          "updatedAt": "2022-02-01T14:15:36Z"
        },
        {
          "author": "daxpedda",
          "authorAssociation": "NONE",
          "body": "@armfazh is the one who pointed this out in https://github.com/cfrg/draft-irtf-cfrg-opaque/issues/298#issuecomment-1006936162.\r\n\r\nIt's used, for example, in ECDSA key generation as specified in [NIST FIPS 186-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf#%5B%7B%22num%22%3A152%2C%22gen%22%3A0%7D%2C%7B%22name%22%3A%22XYZ%22%7D%2C70%2C632%2C0%5D).",
          "createdAt": "2022-02-01T14:23:12Z",
          "updatedAt": "2022-02-01T14:28:51Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> The \"reduction mod n-1 plus one\" method could work.\r\n\r\nSorry, maybe I'm not following you here. For OPAQUE, we only care about the OPRF, and the only way that `Blind` can fail is if hash-to-group yields the identity element. What does \"reduction mod n-1 plus one\" mean in the context of that function?",
          "createdAt": "2022-02-01T14:41:21Z",
          "updatedAt": "2022-02-01T14:41:21Z"
        },
        {
          "author": "daxpedda",
          "authorAssociation": "NONE",
          "body": "Forgive me, the whole time I was thinking of `HashToScalar`, which \"reduction mod n-1 plus one\" applies to, and forgot that we are actually talking about `HashToGroup` here! My bad \ud83d\ude05!\r\n\r\nI'm assuming there is no method to coerce an element to a non-identity element?\r\n\r\nAlternatively I can think of the following solutions:\r\n- Implement a counter into `Blind`, not ideal as it is still fallible but it's best effort.\r\n- Propose a `HashToNonIdentityElement` to the hash-to-curve spec and see if something comes out of it.",
          "createdAt": "2022-02-01T14:47:28Z",
          "updatedAt": "2022-02-01T14:47:56Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> Implement a counter into Blind, not ideal as it is still fallible but it's best effort.\r\n\r\nWouldn't this still need to fail or panic?\r\n\r\n> Propose a HashToNonIdentityElement to the hash-to-curve spec and see if something comes out of it.\r\n\r\nUnfortunately the hash-to-curve spec is beyond the point where we can introduce non-essential changes. That said, I'll ask some folks (the real experts) if they have any thoughts on how to address this.",
          "createdAt": "2022-02-01T14:52:22Z",
          "updatedAt": "2022-02-01T14:52:22Z"
        },
        {
          "author": "daxpedda",
          "authorAssociation": "NONE",
          "body": "> > Implement a counter into Blind, not ideal as it is still fallible but it's best effort.\r\n> \r\n> Wouldn't this still need to fail or panic?\r\n\r\nRight, as I said. My assumption here is that, from the lens of OPAQUE again, there are password that will fail for sure here, even if it's unlikely, they exist. A counter would prevent that, for sure, in the sense of there is no password that can fail through the counter. (IANA cryptographer, please call me out if I'm talking nonsense)\r\n\r\n> That said, I'll ask some folks (the real experts) if they have any thoughts on how to address this.\r\n\r\nThat would be amazing. Thank you!",
          "createdAt": "2022-02-01T14:57:05Z",
          "updatedAt": "2022-02-01T14:57:05Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> Right, as I said. My assumption here is that, from the lens of OPAQUE again, there are password that will fail for sure here, even if it's unlikely, they exist. A counter would prevent that, for sure, in the sense of there is no password that can fail through the counter. (IANA cryptographer, please call me out if I'm talking nonsense)\r\n\r\nI'm still not sure I'm following. Let's say one implemented the counter. Surely there must be code that's hit when the counter reaches its limit, right? So how exactly does a counter make the function infallible?",
          "createdAt": "2022-02-01T14:59:19Z",
          "updatedAt": "2022-02-01T14:59:19Z"
        },
        {
          "author": "daxpedda",
          "authorAssociation": "NONE",
          "body": "> Implement a counter into Blind, not ideal as it is still fallible but it's best effort.\r\n\r\nThis would **not** be infallible. It would just address the OPAQUE issue I pointed out above, which is some passwords being unable to be used (if my assumptions are correct).\r\n\r\nEven though this is fallible, it's better then nothing. I would suggest to move my idea of a counter to a separate issue after we explore this issue, which would be infallibility.",
          "createdAt": "2022-02-01T15:04:59Z",
          "updatedAt": "2022-02-01T15:15:46Z"
        },
        {
          "author": "daxpedda",
          "authorAssociation": "NONE",
          "body": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/321 if we can't make `Blind` infallible.",
          "createdAt": "2022-02-01T15:09:26Z",
          "updatedAt": "2022-02-01T15:09:26Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't see how this is infallible. Let's assume you have prepend a counter to the input. Let's say further that _every_ prepended input maps to the identity element, perhaps because the hash-to-group function is borked. There's two situations here: either the counter keeps incrementing endlessly, never terminating (bad), or the counter does reach a limit and the function stops. In the latter case, you'd fail. \r\n\r\nWhat am I missing? ",
          "createdAt": "2022-02-01T15:17:05Z",
          "updatedAt": "2022-02-01T15:20:22Z"
        },
        {
          "author": "daxpedda",
          "authorAssociation": "NONE",
          "body": "Forgive me, I was assuming that the counter is implemented like in `DeriveKeyPair`, with a limit of `255` because it's using `I2OSP(counter, 1)`. Yes, if the counter has no limit, it would basically be infallible.",
          "createdAt": "2022-02-01T15:20:27Z",
          "updatedAt": "2022-02-01T15:20:27Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "If the counter _does_ have a limit, and if every prepended input maps to the identity element, then the function fails, correct?",
          "createdAt": "2022-02-01T15:20:54Z",
          "updatedAt": "2022-02-01T15:20:54Z"
        },
        {
          "author": "daxpedda",
          "authorAssociation": "NONE",
          "body": "Yes!",
          "createdAt": "2022-02-01T15:21:05Z",
          "updatedAt": "2022-02-01T15:21:05Z"
        },
        {
          "author": "daxpedda",
          "authorAssociation": "NONE",
          "body": "I'm starting to have doubts about my english, I kept saying it's **not** infallible, am I using a wrong expression or something? \ud83d\ude04",
          "createdAt": "2022-02-01T15:21:57Z",
          "updatedAt": "2022-02-01T15:21:57Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Oh, hah, no, it's my fault. I should read more carefully. =)\r\n\r\nOK, so we agree that the counter based approach would make the function fallible. And if that's the case, why have a counter at all if the probability of failure is negligible with or without a counter?",
          "createdAt": "2022-02-01T15:23:10Z",
          "updatedAt": "2022-02-01T15:23:10Z"
        },
        {
          "author": "daxpedda",
          "authorAssociation": "NONE",
          "body": "My assumption (I might be wrong, IANA cryptographer), is that a counter would make it \"actually\" infallible, just not in code. But if all it does is only decrease, the already astronomically small, chance that it would fail, then of course it's pointless.",
          "createdAt": "2022-02-01T15:25:57Z",
          "updatedAt": "2022-02-01T15:27:13Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> But if all it does is only decrease the already astronomically small chance that it would fail, then of course it's pointless.\r\n\r\nRight, this is my take =) ",
          "createdAt": "2022-02-01T15:27:06Z",
          "updatedAt": "2022-02-01T15:27:06Z"
        },
        {
          "author": "daxpedda",
          "authorAssociation": "NONE",
          "body": "Alright. So the only option left is to hope that we can come up with a truly infallible solution.\r\n\r\nThank you for clearing this up for me!",
          "createdAt": "2022-02-01T15:28:28Z",
          "updatedAt": "2022-02-01T15:28:40Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "No problem -- thanks for the discussion!",
          "createdAt": "2022-02-01T15:34:11Z",
          "updatedAt": "2022-02-01T15:34:11Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "> The \"reduction mod n-1 plus one\" method could work.\r\n\r\nYes, it works; however, this will require new code for performing reductions modulo `n-1`. \r\n\r\n",
          "createdAt": "2022-02-01T19:01:05Z",
          "updatedAt": "2022-02-01T19:01:05Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "\r\n> Alright. So the only option left is to hope that we can come up with a truly infallible solution.\r\n\r\n\r\nInstead of increasing a counter, one can derive a new one through, for example, iterated hashing.\r\n\r\n```js\r\n1. function foo(input) {\r\n2.   C = 0\r\n3.   while true {\r\n4.     P = HashToGroup(input || C)\r\n5.     if P != G.Identity()\r\n6.       return P\r\n7.     C = Hash(C)\r\n8.   }\r\n9. }  \r\n```\r\n\r\nThis approach has the disadvantage that it can run endlessly, which could be a target for attackers or when HashToGroup is broken.",
          "createdAt": "2022-02-01T19:11:31Z",
          "updatedAt": "2022-02-01T19:11:31Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@armfazh this is still another instance of the try-and-increment approach, correct? It either must terminate after a certain number of iterations, or it must provably yield a non-identity element. We don't have (b), and (a) implies that the function is fallible. As you point out, we can't specify non-terminating behavior. And since this doesn't change the resulting failure probability -- it's still negligible -- I'm struggling to see why it's an improvement.",
          "createdAt": "2022-02-01T20:52:58Z",
          "updatedAt": "2022-02-01T20:52:58Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, that code is just another try-and-increment method. \r\nNot claiming superiority, only mentioned that the code snippet don't fail (unless something is broken) in response to the quest for an _infalible solution_. \r\n",
          "createdAt": "2022-02-02T16:52:30Z",
          "updatedAt": "2022-02-02T16:52:30Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> Yes, that code is just another try-and-increment method. \n> \n> Not claiming superiority, only mentioned that the code snippet don't fail (unless something is broken) in response to the quest for an _infalible solution_. \n> \n> \n\nWell, as has been discussed in this thread, there's two outcomes for a try-and-increment approach: (1) the function terminates only when it finds a valid value, or (2) the function terminates after a certain number of iterations. \n\nI think we all agree that (2) means the function must be fallible, whereas (1) is, in theory, not fallible. However, importantly, it is possible for (1) to not terminate in pathological cases or e.g. where the underling hash function is broken. Certainly a function shouldn't endlessly loop, so any actual implementation will stop iteration after a certain amount of tries. And in that case, I claim the implementation of (1) effectively yields something close to (2), which is fallible. ",
          "createdAt": "2022-02-04T12:37:17Z",
          "updatedAt": "2022-02-04T12:37:17Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "it seems the consensus is that even adding a counter-based or a try-and-increment approach to avoid fallible cases, all what it does is to reduce the **already negligible** probability that these cases occur in practice.\r\n\r\nAlso, it is ok to avoid try-and-error approaches that do not terminate after a deterministic number of steps. Otherwise, an implementation can loop forever, without returning an error.\r\n\r\nThe current document now includes a section that describes the errors that could appear with negligible probability, and when if ever happen, the protocol stops.\r\n\r\ngiven the consensus, can we move forward with this issue?\r\n",
          "createdAt": "2022-05-25T21:12:39Z",
          "updatedAt": "2022-05-25T21:13:50Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Agreed. Closing without resolution, as we already note this is an exceptional case that occurs with negligible probability.",
          "createdAt": "2022-05-26T10:41:22Z",
          "updatedAt": "2022-05-26T10:41:22Z"
        }
      ]
    },
    {
      "number": 321,
      "id": "I_kwDOBphpts5Czjhj",
      "title": "Introduce a counter to `Blind`",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/321",
      "state": "CLOSED",
      "author": "daxpedda",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Currently some inputs exist that can't be used in `Blind` because they could yield the identity element through `HashToGroup`. One solution to this problem could be to introduce a counter, like in `DeriveKeyPair`.\r\n\r\nFrom #320.",
      "createdAt": "2022-02-01T15:09:03Z",
      "updatedAt": "2022-02-01T15:29:13Z",
      "closedAt": "2022-02-01T15:29:13Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "This doesn't solve the problem. It just makes the (already negligible) probability of failure smaller. ",
          "createdAt": "2022-02-01T15:17:46Z",
          "updatedAt": "2022-02-01T15:17:46Z"
        },
        {
          "author": "daxpedda",
          "authorAssociation": "NONE",
          "body": "> This doesn't solve the problem. It just makes the (already negligible) probability of failure smaller.\r\n\r\nAs discussed in #320, this is pointless.",
          "createdAt": "2022-02-01T15:29:13Z",
          "updatedAt": "2022-02-01T15:29:13Z"
        }
      ]
    },
    {
      "number": 322,
      "id": "I_kwDOBphpts5C6Wz7",
      "title": "Update reference implementation to match pseudocode",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/322",
      "state": "OPEN",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Naming of parameters and arguments has fallen behind the pseudocode description, even though the two match functionally. We should update the reference implementation to make things easier to line up. While we're in there, we should also provide some documentation for folks that want to use the reference implementation in other specifications.",
      "createdAt": "2022-02-03T02:44:06Z",
      "updatedAt": "2022-02-03T02:44:06Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 323,
      "id": "I_kwDOBphpts5C-X7y",
      "title": "Test vectors for POPRF: batching?",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/323",
      "state": "CLOSED",
      "author": "kevinlewi",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Should the test vectors for POPRF include batch sizes > 1, since they support batch evaluation?",
      "createdAt": "2022-02-03T23:12:57Z",
      "updatedAt": "2022-02-07T15:25:41Z",
      "closedAt": "2022-02-07T15:25:41Z",
      "comments": []
    },
    {
      "number": 324,
      "id": "I_kwDOBphpts5C-YJT",
      "title": "Remove extraneous reference to \"Context-\" string",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/324",
      "state": "CLOSED",
      "author": "kevinlewi",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Here: https://github.com/cfrg/draft-irtf-cfrg-voprf/blame/main/draft-irtf-cfrg-voprf.md#L345 this sentence makes a little less sense now that \"Context-\" doesn't actually appear anywhere in the protocol anymore. Perhaps we could consider renaming this example to something that does appear, like \"Finalize\"?",
      "createdAt": "2022-02-03T23:14:18Z",
      "updatedAt": "2022-02-07T15:25:41Z",
      "closedAt": "2022-02-07T15:25:41Z",
      "comments": []
    },
    {
      "number": 326,
      "id": "I_kwDOBphpts5DDZgP",
      "title": "PublicInput and PrivateInput length bounds",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/326",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "~~These are currently 2^13, but they should be 2^16, since we encode their length in two bytes~~\r\nEdit: Oops, duh, this is correct. \r\n\r\nWe could remove this constraint since these are currently passed as inputs to hash functions, but then we would need to define the limits of these hash functions, which we should probably do anyway.",
      "createdAt": "2022-02-05T16:01:19Z",
      "updatedAt": "2022-02-08T22:23:29Z",
      "closedAt": "2022-02-08T22:23:29Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Related: https://github.com/cfrg/draft-irtf-cfrg-hash-to-curve/issues/336",
          "createdAt": "2022-02-08T14:16:38Z",
          "updatedAt": "2022-02-08T14:16:38Z"
        }
      ]
    },
    {
      "number": 333,
      "id": "I_kwDOBphpts5Hc-8S",
      "title": "Test vectors for failing conditions and edge-cases",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/333",
      "state": "CLOSED",
      "author": "bytemare",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "It is important for implementers to test their work produces correct results, and I believe that it is also important that the implementations fail or return relevant errors when necessary.\r\n\r\nHas the addition of test vectors for particular cases or failing conditions been envisioned? Do you plan in adding such vectors?\r\n\r\nThis would greatly support tests for other protocols that use (V)OPRF, such as OPAQUE.",
      "createdAt": "2022-04-09T21:43:48Z",
      "updatedAt": "2023-02-22T10:15:57Z",
      "closedAt": "2023-02-22T10:15:57Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "We could include test vectors with invalid request or response messages (maybe they deserialize to the identity element), or test cases where the proofs are corrupted or otherwise bogus. However, we can't come up with proofs for invalid inputs to the protocol (inputs that map to the identity element in the group).",
          "createdAt": "2022-04-29T22:53:24Z",
          "updatedAt": "2022-04-29T22:53:24Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing since no one got around to doing this.",
          "createdAt": "2023-02-22T10:15:57Z",
          "updatedAt": "2023-02-22T10:15:57Z"
        }
      ]
    },
    {
      "number": 335,
      "id": "I_kwDOBphpts5Ibrid",
      "title": "Add pointers to proven constructions",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/335",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "armfazh"
      ],
      "labels": [],
      "body": "The [crypto review panel feedback](https://mailarchive.ietf.org/arch/msg/crypto-panel/QXC3drh1hs-XGkXyjwyCj_pFNNI/) pointed out that there's a missing link between the different constructions in the draft and the papers in which they were proven secure. After offline exchanges with @vkumar-qc, adding these links would resolve the issue, so this issue tracks that.",
      "createdAt": "2022-04-26T01:03:07Z",
      "updatedAt": "2022-05-25T17:51:09Z",
      "closedAt": "2022-05-25T17:51:09Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@armfazh or @alxdavids, is this something one of you can take?",
          "createdAt": "2022-04-26T01:52:11Z",
          "updatedAt": "2022-04-26T01:52:11Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "I can take this, just let me know what are the specific comments given offline.",
          "createdAt": "2022-04-29T01:31:57Z",
          "updatedAt": "2022-04-29T01:31:57Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks! We should also be sure to note differences between what was in these papers and what's done here. For example, I think the DLEQ proof in the original privacy pass paper included the group generator in the transcript, but we don't do that here. There might be other small differences too, but I don't recall them offhand.",
          "createdAt": "2022-04-29T22:51:33Z",
          "updatedAt": "2022-04-29T22:51:33Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "Refer to #344 for updates on this ticket.",
          "createdAt": "2022-05-25T08:50:01Z",
          "updatedAt": "2022-05-25T08:50:01Z"
        }
      ]
    },
    {
      "number": 340,
      "id": "I_kwDOBphpts5IsL8x",
      "title": "Comments in Kumar's review",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/340",
      "state": "CLOSED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Tracking issues raised in [review](https://mailarchive.ietf.org/arch/msg/crypto-panel/QXC3drh1hs-XGkXyjwyCj_pFNNI/)\r\n\r\n\r\n> Major comments:\r\n>   1.  2.1 on page 9 says \"This function can raise a DeserializeError if deserialization fails or A is the identity element of the group\": This implies that if I serialize and then serialize the identity element, I will get an error!\r\n\r\nTracked in #342 \r\n\r\n>   2.  2.2 on page 10 says \"... proving that the discrete log of two values is identical in zero knowledge\" without ever defining discrete log and zero knowledge proofs. The authors say that their construction is built on Chaum-Pedersen proof, but no further details are provided.\r\n\r\nFixed in #336 \r\n\r\n>   3.  2.2.1 on page 11 has statements like Cs = [C], Ds = [D] without explaining what square brackets [ ] actually mean.\r\n\r\nTODO: Tracked in #297 \r\n\r\n>   4.  2.2.1 on page 11 ends the description of GenerateProof without ever describing why the output of the function [c , s] is a discrete log equivalence proof and why is it zero knowledge.\r\n\r\nFixed in #336 \r\n\r\n\r\n> Minor comments:\r\n>   1.  1.3 on page 7: object x --> byte array x\r\n\r\nAlready fixed.\r\n\r\n>   2.  1.3 on page 7: Better to separate I2SOP and OS2IP, because the current description might be taken to suggest that I2SOP converts a byte array to a non-negative integer, which according to RFC 8017 is just the opposite, i.e., converts a non-negative integer to a byte array.\r\n\r\nFixed in #338 \r\n\r\n>   3.  1.3 on page 8 says \"String values such as \"Finalize\" are ASCII string literals\": It would be good to have all the strings mentioned here not just an example.\r\n\r\nFixed in #339 and #346\r\n\r\n>   4.  2 on page 8: Redundant long at the end of this sentence \"A cryptographic hash function whose output length is Nh bytes long\".\r\n\r\nFixed in #338 \r\n\r\n\r\n>   5.  2.1 on page 8 starts talking about groups and then suddenly mentions finite fields without explaining what they are. It becomes clear reading further down that the authors need them for scalars. It would have been less confusing if they simply used the set of integers {0, 1, ..., p-1}.\r\n\r\nFixed in #336 \r\n\r\n\r\n>   6.  2.1 on page 9 says \"... multiplicative inverse of input Scalar s modulo ...\". This is the first time modulo operation is mentioned.\r\n\r\nFixed in #338 \r\n\r\n\r\n",
      "createdAt": "2022-04-29T01:25:46Z",
      "updatedAt": "2022-05-27T22:50:45Z",
      "closedAt": "2022-05-27T22:50:45Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@armfazh if possible could you please give an update on this issue?",
          "createdAt": "2022-05-21T00:45:18Z",
          "updatedAt": "2022-05-21T00:45:18Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "The remaining issues are:\r\n - #342 This is easy to fix.\r\n   - Here are the proposed changes -> #343\r\n - #297 This needs a bit of more refactor on the document. No big changes tough. I will work on a proposal for this issue this week, and want also hear other alternatives. \r\n   - Here are the proposed changes -> #345\r\n \r\nThe other points in the review have been already addressed.\r\n \r\n ",
          "createdAt": "2022-05-23T22:57:14Z",
          "updatedAt": "2022-05-25T20:46:27Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "This ticket has all the listed issues addressed/resolved now.",
          "createdAt": "2022-05-26T17:23:48Z",
          "updatedAt": "2022-05-26T17:23:48Z"
        }
      ]
    },
    {
      "number": 341,
      "id": "I_kwDOBphpts5IsMMN",
      "title": "Better explain the batching API used in DLEQ proof ",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/341",
      "state": "CLOSED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "From [review](https://mailarchive.ietf.org/arch/msg/crypto-panel/QXC3drh1hs-XGkXyjwyCj_pFNNI/)\r\n\r\n> 2.2.1 on page 11 has statements like Cs = [C], Ds = [D] without explaining what square brackets [ ] actually mean.\r\n",
      "createdAt": "2022-04-29T01:26:55Z",
      "updatedAt": "2022-05-03T17:46:01Z",
      "closedAt": "2022-05-03T17:46:01Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "This is related to #297.",
          "createdAt": "2022-04-29T22:45:09Z",
          "updatedAt": "2022-04-29T22:45:09Z"
        }
      ]
    },
    {
      "number": 342,
      "id": "I_kwDOBphpts5IsMb9",
      "title": "Deserialization error",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/342",
      "state": "CLOSED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "armfazh"
      ],
      "labels": [],
      "body": "From [review](https://mailarchive.ietf.org/arch/msg/crypto-panel/QXC3drh1hs-XGkXyjwyCj_pFNNI/)\r\n\r\n> 2.1 on page 9 says \"This function can raise a DeserializeError if deserialization fails or A is the identity element of the group\": This implies that if I serialize and then serialize the identity element, I will get an error!",
      "createdAt": "2022-04-29T01:28:05Z",
      "updatedAt": "2022-05-25T17:52:38Z",
      "closedAt": "2022-05-25T17:52:38Z",
      "comments": [
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "I consider the current text is correct, that is deserialization must fail both due to an encoding error, _AND_ when the point is the identity element.",
          "createdAt": "2022-04-29T01:29:55Z",
          "updatedAt": "2022-04-29T01:29:55Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Yep, I agree. We can resolve this by noting this feature when we describe the serialization function. Would that work?",
          "createdAt": "2022-04-29T22:48:46Z",
          "updatedAt": "2022-04-29T22:48:46Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "On a second thought, I think the focus for invalid input must be explicit in the `Input validation` section, rather than on deserialization.\r\n\r\nSee my proposal in #343 .",
          "createdAt": "2022-05-24T20:26:05Z",
          "updatedAt": "2022-05-24T20:26:05Z"
        }
      ]
    },
    {
      "number": 362,
      "id": "I_kwDOBphpts5UComU",
      "title": "RGLC Review: Chris P.: Editorial",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/362",
      "state": "CLOSED",
      "author": "cjpatton",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "- [x] (nit) s.2.1: In the list of group member functions, each item is prefixed by \"A member function of Group that\" except for the first three. I think you could remove these prefixes.\r\n- [ ] s.2.2: \"noninteractive\" -> \"non-interactive\"\r\n- [x] s.3: \"In this section, we define three protocol variants referred as the OPRF, VOPRF, and POPRF modes with the following properties.\" -> \"referred to as\" \r\n- [x] (nit) s.3.1: Table 1: \"Identifiers for OPRF modes\" -> \"identifiers for protocol types\" (VOPRF, POPRF, OPRF are not \"modes of OPRF\")\r\n- [x] s.3.3: \"in which case the application MUST abort the protocol with a DeserializeError failure\": Elsewhere (s.2.1) you write \"raise a DeserializeError\". Consistent verbiage would be helpful I think. (The latter seems better for this draft.)\r\n- [ ] s.4: \"each group specifies an integer order that is used in reducing integer values to a member of the corresponding scalar field\": \"modulus\" is clearer than \"integer order\" here.\r\n- [x] s.4.3: \"In the elliptic curve setting, this deterministically maps inputs x (as byte arrays) to uniformly chosen points on the curve\": Here a variable \"x\" is named but not used. I think this sentence would be perfectly readable without \"x\".\r\n- [ ] s.5.4: \"Functionally, the VOPRF and POPRF variants differ in that the POPRF variant admits public input, whereas the VOPRF variant does not.\" The same statement applies equally to OPRF and POPRF. Maybe write \"(V)OPRF\" here instead?\r\n- [x] s.6: \"This section discusses the cryptographic security of our protocol\": \"protocol\" -> \"protocols\" or \"protocol variants\". Also (nit): The word \"cryptographic\" doesn't add much here, in my opinion.\r\n- [x] s.6.1: \"A consequence of showing that a function is pseudorandom, is that it is necessarily non-malleable\": Remove the \",\" in this sentence.\r\n- [ ] s.6.1: \"Verifiable: The client must only complete execution of the protocol if it can successfully assert that the output it computes is correct. This is taken with respect to the private key held by the server.\" Do you mean \"public key\" here? (Just checking.)\r\n- [x] s.6.2.1: \"[[JKK14](https://www.ietf.org/archive/id/draft-irtf-cfrg-voprf-14.html#JKK14)] proves these properties for one instance\": I read \"JKK14\" as \"Jarecki, Kiayias, and Krawczyk, 2014\", hence I would write \"prove\" instead of \"proves\" here.\r\n- [x] s.6.2.2: \"The construction is identical to 3HashSDHI, except that this design can optionally perform multiple POPRF evaluations in one go, ...\": \"in one go\" is an English colloquialism, and thus may not be appropriate for non-native English speaking audiences.\r\n- [x] s.6.2.3: \"As a result of this class of attack, ...\": Hmm, should it be \"class of attacks\"? ",
      "createdAt": "2022-10-15T00:03:30Z",
      "updatedAt": "2022-11-21T23:12:21Z",
      "closedAt": "2022-11-21T23:12:21Z",
      "comments": [
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "I made some comments about some suggestions that produced no changes. \r\n\r\n\r\n> * [:x:]  s.2.2: \"noninteractive\" -> \"non-interactive\"\r\n\r\nAccording to Merriam website, it is used without dash\r\nhttps://www.merriam-webster.com/dictionary/noninteractive\r\n\r\n> * [:x:]  s.4: \"each group specifies an integer order that is used in reducing integer values to a member of the corresponding scalar field\": \"modulus\" is clearer than \"integer order\" here.\r\n\r\nModulus may be good fit when talking about modular reduction. We avoid get into that details and leave the description a bit more abstract.\r\n\r\n> * [:x:]  s.5.4: \"Functionally, the VOPRF and POPRF variants differ in that the POPRF variant admits public input, whereas the VOPRF variant does not.\" The same statement applies equally to OPRF and POPRF. Maybe write \"(V)OPRF\" here instead?\r\n\r\nYour observation is ok, but another difference between OPRF and POPRF is verifiability.\r\n\r\n> * [:x:]  s.6.1: \"Verifiable: The client must only complete execution of the protocol if it can successfully assert that the output it computes is correct. This is taken with respect to the private key held by the server.\" Do you mean \"public key\" here? (Just checking.)\r\n\r\nI think the current text is correct, and also the following is correct. \r\n\r\n```diff\r\n- This is taken with respect to the private key held by the server.\r\n+ This is taken with respect to the key pair held by the server.\r\n```",
          "createdAt": "2022-10-15T01:45:01Z",
          "updatedAt": "2022-10-15T02:04:52Z"
        }
      ]
    },
    {
      "number": 365,
      "id": "I_kwDOBphpts5WXYkf",
      "title": "On preparation for v15",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/365",
      "state": "CLOSED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This PRs must be merged for v15.\r\n\r\n#360 \r\n#361 \r\n#363 \r\n#364 ",
      "createdAt": "2022-11-15T00:27:25Z",
      "updatedAt": "2022-11-22T14:52:52Z",
      "closedAt": "2022-11-22T14:52:52Z",
      "comments": []
    },
    {
      "number": 377,
      "id": "I_kwDOBphpts5cqVgw",
      "title": "Section 7.2.3-3 references old cipher suite ID",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/377",
      "state": "CLOSED",
      "author": "tmthrgd",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "This section contains references to the pre-draft-v17 cipher suite IDs rather than the newer identifiers:\r\n\r\nhttps://github.com/cfrg/draft-irtf-cfrg-voprf/blob/8e9121f0976b0ba5dce93495c9c5c66ca9215436/draft-irtf-cfrg-voprf.md?plain=1#L1719-L1720",
      "createdAt": "2023-01-24T09:18:22Z",
      "updatedAt": "2023-02-01T22:38:22Z",
      "closedAt": "2023-02-01T22:38:21Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Thank you! Addressed in #378.",
          "createdAt": "2023-02-01T19:45:03Z",
          "updatedAt": "2023-02-01T19:45:03Z"
        },
        {
          "author": "tmthrgd",
          "authorAssociation": "NONE",
          "body": "@chris-wood No worries. \ud83d\ude42 I\u2019ll close this as #378 has merged. ",
          "createdAt": "2023-02-01T22:38:21Z",
          "updatedAt": "2023-02-01T22:38:21Z"
        }
      ]
    },
    {
      "number": 380,
      "id": "I_kwDOBphpts5eKxu4",
      "title": "Derivation of b unclear",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/380",
      "state": "OPEN",
      "author": "jhoyla",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "In section {#random-scalar} the text reads:\r\n> As an optimization, if the group order is very close to a power of 2, it is acceptable to omit the rejection test completely. In particular, if the group order is p, and there is an integer b such that |p - 2b| is less than 2^(b/2), then RandomScalar can simply return a uniformly random integer of at most b bits.\r\n\r\nThis just reads like magic. It's not obvious how to choose b, or that any value of b satisfying the requirements is valid.",
      "createdAt": "2023-02-10T15:26:12Z",
      "updatedAt": "2023-02-23T18:58:35Z",
      "closedAt": null,
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "The salient point is that there _exists_ an integer b such that the condition holds. We could add more explanation about why this is sufficient, but I'm inclined to not burden the reader with that. ",
          "createdAt": "2023-02-22T10:18:45Z",
          "updatedAt": "2023-02-22T10:18:45Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "does it help to mention that `p` is a `b`-bit integer?",
          "createdAt": "2023-02-23T18:58:35Z",
          "updatedAt": "2023-02-23T18:58:35Z"
        }
      ]
    },
    {
      "number": 382,
      "id": "I_kwDOBphpts5fCIYq",
      "title": "DeriveKeyPair DST prefix differs from others",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/382",
      "state": "CLOSED",
      "author": "tmthrgd",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "I'm not sure if it's worth correcting at this point in the standardization process, but when implementing, I noticed that `\"DeriveKeyPair\"` is the only string concatenated to `contextString` without a separating dash (`-`).\r\n\r\nhttps://github.com/cfrg/draft-irtf-cfrg-voprf/blob/002ca6a8809186692984863cbb897bee1501abda/draft-irtf-cfrg-voprf.md?plain=1#L764\r\n\r\nhttps://github.com/cfrg/draft-irtf-cfrg-voprf/blob/002ca6a8809186692984863cbb897bee1501abda/draft-irtf-cfrg-voprf.md?plain=1#L1260\r\n\r\nhttps://github.com/cfrg/draft-irtf-cfrg-voprf/blob/002ca6a8809186692984863cbb897bee1501abda/draft-irtf-cfrg-voprf.md?plain=1#L1263\r\n\r\nhttps://github.com/cfrg/draft-irtf-cfrg-voprf/blob/002ca6a8809186692984863cbb897bee1501abda/draft-irtf-cfrg-voprf.md?plain=1#L499\r\n\r\n",
      "createdAt": "2023-02-22T03:23:56Z",
      "updatedAt": "2023-02-22T10:15:34Z",
      "closedAt": "2023-02-22T10:15:34Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Yeah, given (1) that we've locked in the test vectors for the final version and (2) the key generation mechanism can always be updated separately if desired, I don't think we should change this. Thanks for flagging the issue. If this document is updated in the future, we'll keep this on the list of things to possibly update.",
          "createdAt": "2023-02-22T10:15:34Z",
          "updatedAt": "2023-02-22T10:15:34Z"
        }
      ]
    },
    {
      "number": 384,
      "id": "I_kwDOBphpts5mxthG",
      "title": "seed size is 32 or Ns bytes?",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/384",
      "state": "CLOSED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "> There appears to be a small discrepancy in the seed size used in the draft.\r\n> Ns is defined in Section 2.1, as the fixed length scalar size encoding for a curve.\r\n> Ns is used in Section 3.2.1 Deterministic Key Generation as the input of the seed[Ns].\r\n> However, your test vectors use a fixed 32-byte seed size.\r\n\r\n\r\nTest vectors use 32-fixed size, while document recommends a size depending on the base field.  ",
      "createdAt": "2023-05-24T15:53:33Z",
      "updatedAt": "2023-11-03T12:04:11Z",
      "closedAt": "2023-11-03T12:04:10Z",
      "comments": [
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "@chris-wood here are two options:\r\n1) update the text to set `Ns=32` for all cases. This avoids to recalculate test vectors.\r\n2) set Ns correctly in the test vectors.  See #390 \r\nwhich would be the one to pursue?",
          "createdAt": "2023-10-10T04:13:47Z",
          "updatedAt": "2023-10-10T04:30:36Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't think either is acceptable at this point given that we are in AUTH48. I think the best we can do is note that the test vectors deviated from `Ns` and used 32.",
          "createdAt": "2023-10-10T10:27:54Z",
          "updatedAt": "2023-10-10T10:28:09Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@armfazh on more reflection, I think your first suggestion may be workable. I'll propose that to the RFC editors.",
          "createdAt": "2023-10-13T13:31:04Z",
          "updatedAt": "2023-10-13T13:31:04Z"
        },
        {
          "author": "juhesse",
          "authorAssociation": "NONE",
          "body": "@armfazh @chris-wood In the alternative DeriveKeyPair method in Section 3.2.1, the random seed of length Ns is the only entropy that goes into the OPRF key (DeriveKeyPair function). If you set that to 32 fixed, the security level of the OPRF will be upper bound by 32. This is significantly lower than key derivation through RandomScalar(). Can you explain for which applications such an OPRF implementation would be suitable? Currently the draft says \"can use either\" method, and I cannot find further guidance.\r\n",
          "createdAt": "2023-10-24T18:37:08Z",
          "updatedAt": "2023-10-24T18:37:08Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> If you set that to 32 fixed, the security level of the OPRF will be upper bound by 32. This is significantly lower than key derivation through RandomScalar()\r\n\r\nSure, it may be significantly lower, but the security bound is large enough in all cases that this difference does not matter. 32 bytes of entropy will always be enough -- we don't need anything more.",
          "createdAt": "2023-10-24T21:15:28Z",
          "updatedAt": "2023-10-24T21:15:28Z"
        },
        {
          "author": "juhesse",
          "authorAssociation": "NONE",
          "body": "I was talking about a security level of 32 bits, which seems insufficient to me ;) \r\n\r\nLet's see where this confusion comes from. Section 2.1 sets Ns to be the length of the *byte* array. E.g., for a group of size 256, Ns will be 32. Then DeriveKeyPair in Section 3.2.1 uses it as \"seed[Ns]\", and from what you write, this function seed[] should interpret its input in terms of bytes, not bits as I thought. \r\n\r\nOk, I read it now in the first paragraph of 3.2.1:  \"It accepts a seed of Ns bytes generated...\" - If this is not super standard notation for RFCs I would recommend making that clear by formally defining this seed function.\r\n\r\nThank you for clarifying, Chris! And to answer the original question, it seems fine to me to set the seed entropy to 32 *bytes* fixed. ",
          "createdAt": "2023-10-25T07:38:46Z",
          "updatedAt": "2023-10-25T07:38:46Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "No problem. =)",
          "createdAt": "2023-10-25T14:40:27Z",
          "updatedAt": "2023-10-25T14:40:27Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing as resolved.",
          "createdAt": "2023-11-03T12:04:11Z",
          "updatedAt": "2023-11-03T12:04:11Z"
        }
      ]
    },
    {
      "number": 385,
      "id": "I_kwDOBphpts5rfrUj",
      "title": "Multiple functions with the same names",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/385",
      "state": "OPEN",
      "author": "jyasskin",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The current draft has `def BlindEvaluate` in https://www.ietf.org/archive/id/draft-irtf-cfrg-voprf-21.html#name-oprf-protocol, https://www.ietf.org/archive/id/draft-irtf-cfrg-voprf-21.html#name-voprf-protocol, and https://www.ietf.org/archive/id/draft-irtf-cfrg-voprf-21.html#name-poprf-protocol. `def Blind` is in https://www.ietf.org/archive/id/draft-irtf-cfrg-voprf-21.html#name-oprf-protocol and https://www.ietf.org/archive/id/draft-irtf-cfrg-voprf-21.html#name-poprf-protocol. `def Evaluate` is in https://www.ietf.org/archive/id/draft-irtf-cfrg-voprf-21.html#name-oprf-protocol and https://www.ietf.org/archive/id/draft-irtf-cfrg-voprf-21.html#name-poprf-protocol.\r\n\r\nWhen writing a specification that depends on one of this draft's protocols (as I'm currently reviewing in https://github.com/WICG/trust-token-api/pull/257), the specification needs to call the appropriate function. While it's possible to link to a specific section or name the active protocol so that a careful reader will implement the right function, it would be better if we didn't have to be so careful.\r\n\r\nWould it be possible to give every distinct function in this spec a distinct name?",
      "createdAt": "2023-07-13T17:26:39Z",
      "updatedAt": "2023-07-13T20:26:22Z",
      "closedAt": null,
      "comments": [
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "The name of the primitives are generic, similar to Encrypt/Decrypt or Sign/Verify.\r\nAll the variants follow this abstraction, so for the sake of clarity, specifications should announce which variant (OPRF/VOPRF/POPRF) is used. Additionally, the draft provides test vectors and reference implementations so people can verify their implementation as an additional measure.\r\n\r\n\r\n\r\n\r\n",
          "createdAt": "2023-07-13T20:26:21Z",
          "updatedAt": "2023-07-13T20:26:21Z"
        }
      ]
    },
    {
      "number": 386,
      "id": "I_kwDOBphpts5rfu2V",
      "title": "How long are the serialized byte arrays?",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/386",
      "state": "CLOSED",
      "author": "jyasskin",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "question"
      ],
      "body": "https://www.ietf.org/archive/id/draft-irtf-cfrg-voprf-21.html#name-online-protocol says\r\n\r\n> Elements and scalars are serialized to byte arrays\r\n\r\nbut doesn't say how long the arrays are. I suspect the lengths are implied by the ciphersuite, but it would be good to say it explicitly so that implementers are sure to pick the same lengths.",
      "createdAt": "2023-07-13T17:36:54Z",
      "updatedAt": "2023-09-01T01:45:15Z",
      "closedAt": "2023-09-01T01:45:15Z",
      "comments": [
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "[Section 2.1](https://www.ietf.org/archive/id/draft-irtf-cfrg-voprf-21.html#name-prime-order-group) already explains that: the size of elements is the constant `Ne` and the size of scalars is the constant `Ns`.\r\n\r\nAlso, each ciphersuite define the value of these constant values.\r\n",
          "createdAt": "2023-07-13T19:19:45Z",
          "updatedAt": "2023-07-13T19:19:45Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing as answered.",
          "createdAt": "2023-09-01T01:45:15Z",
          "updatedAt": "2023-09-01T01:45:15Z"
        }
      ]
    },
    {
      "number": 389,
      "id": "I_kwDOBphpts5wIBn6",
      "title": "investigate DST for hash to scalar",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/389",
      "state": "CLOSED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Jonas has pointed a possible issue in the specification of DST for hash to scalar.\r\n\r\nhttps://mailarchive.ietf.org/arch/msg/cfrg/q3j7QMfb_06XlB0IyLr8OjOCuuw/\r\n",
      "createdAt": "2023-09-05T04:12:39Z",
      "updatedAt": "2023-10-10T04:01:04Z",
      "closedAt": "2023-10-10T04:01:04Z",
      "comments": [
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "the issue pointed is about the Python notation used in the draft. In Python, one can specify default parameters of a function. Thus, the function can be called with or without arguments,  or passing explicitly the parameters by name. \r\n\r\ne.g.\r\n\r\n```python\r\ndef foo(param=10):\r\n    print(param)\r\n\r\nfoo()        // prints 10\r\nfoo(7)       // prints 7\r\nfoo(param=3) // prints 3\r\n```\r\n\r\n",
          "createdAt": "2023-10-10T04:01:04Z",
          "updatedAt": "2023-10-10T04:01:04Z"
        }
      ]
    }
  ],
  "pulls": [
    {
      "number": 1,
      "id": "MDExOlB1bGxSZXF1ZXN0MTcyMTg3MjU4",
      "title": "Some comments on first look",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/1",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I have made some small changes and also some comments (prefaced with ALEX:). I plan to have a more detailed run-through soon, particularly with the algorithmic stuff to make sure the inputs/outputs are consistent throughout. Maybe the best thing would be to respond to the comments on here and then I can change/not change accordingly?\r\n\r\nI'm not sure of the process for IETF drafts but I guess there will need to be some justification of the security properties that are proposed. I guess proofs might be a stretch but it might be possible to get some intuition down, what do you think?\r\n\r\nAlso, were there any TODOs that you were considering before you went ahead with submission?\r\n\r\n(I tried make-ing the changes but it was complaining about the {{H2c}} reference?)",
      "createdAt": "2018-03-01T09:47:11Z",
      "updatedAt": "2020-11-10T14:40:28Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "40a93ff139333887ec4a57b6cd0af532bd25f0b9",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids-comments",
      "headRefOid": "8ca1e222f9f2e79461b5a40089cf1bc3ccbd1247",
      "closedAt": "2018-03-05T02:33:25Z",
      "mergedAt": "2018-03-05T02:33:25Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "686fd89d4bdf52385777d912afb3c3dc32cd863d"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I like the changes overall. Please remove the \"ALEX:\" comments and file them as issues to discuss. And please proceed with the suggested changes if you can. Once done, we'll merge. (Also, add yourself as an author if you feel so inclined!)",
          "createdAt": "2018-03-01T16:04:41Z",
          "updatedAt": "2018-03-01T16:04:41Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "Sounds good, I'll make the required changes soon.",
          "createdAt": "2018-03-02T07:08:32Z",
          "updatedAt": "2018-03-02T07:08:32Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@alxdavids don't worry about the H2C reference. That will be fixed in... the next day or so. We can merge this change while that's busted.",
          "createdAt": "2018-03-02T16:56:45Z",
          "updatedAt": "2018-03-02T16:56:45Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAwNDg4MDU5",
          "commit": {
            "abbreviatedOid": "3f0ff61"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-03-01T16:02:07Z",
          "updatedAt": "2018-03-01T16:02:08Z",
          "comments": [
            {
              "originalPosition": 51,
              "body": "PRF security and digital signature security against existential forgery are, IMO, very similar. That's what led to the comment.",
              "createdAt": "2018-03-01T16:02:08Z",
              "updatedAt": "2018-03-05T01:44:42Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAwNDg4MzYx",
          "commit": {
            "abbreviatedOid": "3f0ff61"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-03-01T16:02:50Z",
          "updatedAt": "2018-03-01T16:02:50Z",
          "comments": [
            {
              "originalPosition": 61,
              "body": "I would actually prefer learn here as it doesn't matter how y is derived in this context. ",
              "createdAt": "2018-03-01T16:02:50Z",
              "updatedAt": "2018-03-05T01:44:42Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAwNDg4NTU2",
          "commit": {
            "abbreviatedOid": "3f0ff61"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-03-01T16:03:19Z",
          "updatedAt": "2018-03-01T16:03:19Z",
          "comments": [
            {
              "originalPosition": 114,
              "body": "Yes -- we need to state so in the security section. Can you please do that?",
              "createdAt": "2018-03-01T16:03:19Z",
              "updatedAt": "2018-03-05T01:44:42Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAwNDg4NjU3",
          "commit": {
            "abbreviatedOid": "3f0ff61"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-03-01T16:03:32Z",
          "updatedAt": "2018-03-01T16:03:33Z",
          "comments": [
            {
              "originalPosition": 106,
              "body": "Agreed. Can you please do so?",
              "createdAt": "2018-03-01T16:03:32Z",
              "updatedAt": "2018-03-05T01:44:42Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAwNDg4ODA3",
          "commit": {
            "abbreviatedOid": "3f0ff61"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-03-01T16:03:50Z",
          "updatedAt": "2018-03-01T16:03:51Z",
          "comments": [
            {
              "originalPosition": 99,
              "body": "I'm missing something here.",
              "createdAt": "2018-03-01T16:03:50Z",
              "updatedAt": "2018-03-05T01:44:42Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAwNDg5NTAw",
          "commit": {
            "abbreviatedOid": "3f0ff61"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "(See comments in Conversation thread.)",
          "createdAt": "2018-03-01T16:05:29Z",
          "updatedAt": "2018-03-01T16:05:29Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAwNjg5NDQy",
          "commit": {
            "abbreviatedOid": "3f0ff61"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-03-02T07:07:02Z",
          "updatedAt": "2018-03-02T07:07:02Z",
          "comments": [
            {
              "originalPosition": 61,
              "body": "My only opposition to 'learn' is that the security definition of a PRF allows an adversary to learn outputs on any inputs that it wants.",
              "createdAt": "2018-03-02T07:07:02Z",
              "updatedAt": "2018-03-05T01:44:42Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAwNjg5NDY0",
          "commit": {
            "abbreviatedOid": "3f0ff61"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-03-02T07:07:11Z",
          "updatedAt": "2018-03-02T07:07:11Z",
          "comments": [
            {
              "originalPosition": 114,
              "body": "Yep will do.",
              "createdAt": "2018-03-02T07:07:11Z",
              "updatedAt": "2018-03-05T01:44:42Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAwNjg5NjE5",
          "commit": {
            "abbreviatedOid": "3f0ff61"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-03-02T07:08:10Z",
          "updatedAt": "2018-03-02T07:08:11Z",
          "comments": [
            {
              "originalPosition": 99,
              "body": "The notation G is used for two different functions, it's not linked to the removal above. I will change it so that the group is called something else.",
              "createdAt": "2018-03-02T07:08:10Z",
              "updatedAt": "2018-03-05T01:44:42Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAwODQxMzQ0",
          "commit": {
            "abbreviatedOid": "3f0ff61"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-03-02T16:56:08Z",
          "updatedAt": "2018-03-02T16:56:08Z",
          "comments": [
            {
              "originalPosition": 61,
              "body": "Oh good point. Nevermind then!",
              "createdAt": "2018-03-02T16:56:08Z",
              "updatedAt": "2018-03-05T01:44:42Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTAwODQxMzg2",
          "commit": {
            "abbreviatedOid": "3f0ff61"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-03-02T16:56:18Z",
          "updatedAt": "2018-03-02T16:56:18Z",
          "comments": [
            {
              "originalPosition": 99,
              "body": "Good catch!",
              "createdAt": "2018-03-02T16:56:18Z",
              "updatedAt": "2018-03-05T01:44:42Z"
            }
          ]
        }
      ]
    },
    {
      "number": 2,
      "id": "MDExOlB1bGxSZXF1ZXN0MTczMDY0NTQx",
      "title": "add contributor",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/2",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "add myself to the document and fixed a small error",
      "createdAt": "2018-03-06T05:54:03Z",
      "updatedAt": "2020-11-10T14:40:29Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "f03b12c5898ea69bae5465149cdc367646eeba28",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "contributor",
      "headRefOid": "70119842da555a230f2206a6e0565d58e19dfbbf",
      "closedAt": "2018-03-18T09:14:37Z",
      "mergedAt": "2018-03-18T09:14:37Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "23b30779734f8c494d74cffcd822cc5f9837d1c1"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 8,
      "id": "MDExOlB1bGxSZXF1ZXN0MTk1MzQ2MzE4",
      "title": "Add parameter commitment and application information.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/8",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2018-06-16T19:47:38Z",
      "updatedAt": "2020-11-10T14:40:30Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "9ffe7574350d760bf79aec317aa538bbbe6dfadb",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/parameters",
      "headRefOid": "ec48cff4687894735362bf66aa6f350af9fa7699",
      "closedAt": "2018-06-18T00:55:52Z",
      "mergedAt": "2018-06-18T00:55:52Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "55b90f4396841b953a3be5a3ffdb56ae8ccb61e4"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@alxdavids okay to merge, or do you want to see changes?",
          "createdAt": "2018-06-17T23:44:42Z",
          "updatedAt": "2018-06-17T23:44:42Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm happy with you merging",
          "createdAt": "2018-06-18T00:44:27Z",
          "updatedAt": "2018-06-18T00:44:27Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTI5Mzc3Mjc2",
          "commit": {
            "abbreviatedOid": "ec48cff"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Looks good. just a few things that we might want to add.",
          "createdAt": "2018-06-17T02:28:22Z",
          "updatedAt": "2018-06-17T02:37:15Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "Not that important, but privacy pass also helps vpn users.",
              "createdAt": "2018-06-17T02:28:22Z",
              "updatedAt": "2018-06-17T02:37:15Z"
            },
            {
              "originalPosition": 36,
              "body": "If we want to be more precise, the shared key is derived from the signed token. The MAC is then computed over the Host header and HTTP path of the outgoing request.",
              "createdAt": "2018-06-17T02:35:00Z",
              "updatedAt": "2018-06-17T02:37:15Z"
            },
            {
              "originalPosition": 47,
              "body": "https://eprint.iacr.org/2016/144 and http://webee.technion.ac.il/~hugo/sphinx.pdf are some examples that do something like this, do we need to add references? (especially the first since a similar VOPRF is used)",
              "createdAt": "2018-06-17T02:36:38Z",
              "updatedAt": "2018-06-17T02:37:15Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTI5NDA0Nzk4",
          "commit": {
            "abbreviatedOid": "ec48cff"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-06-17T23:30:38Z",
          "updatedAt": "2018-06-17T23:30:38Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "I don't think the HTTP bits are necessary here. ",
              "createdAt": "2018-06-17T23:30:38Z",
              "updatedAt": "2018-06-17T23:30:38Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTI5NDA1MDgz",
          "commit": {
            "abbreviatedOid": "ec48cff"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-06-17T23:41:23Z",
          "updatedAt": "2018-06-17T23:41:23Z",
          "comments": [
            {
              "originalPosition": 47,
              "body": "I'll file a separate issue for this.",
              "createdAt": "2018-06-17T23:41:23Z",
              "updatedAt": "2018-06-17T23:41:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTI5NDA1MTc3",
          "commit": {
            "abbreviatedOid": "ec48cff"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-06-17T23:44:28Z",
          "updatedAt": "2018-06-17T23:44:28Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "What's the use case there?",
              "createdAt": "2018-06-17T23:44:28Z",
              "updatedAt": "2018-06-17T23:44:28Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTI5NDA3NzEy",
          "commit": {
            "abbreviatedOid": "ec48cff"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-06-18T00:44:05Z",
          "updatedAt": "2018-06-18T00:44:05Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "Just the same as Tor, some VPN providers use IP addresses that have poor reputations in the same way.",
              "createdAt": "2018-06-18T00:44:05Z",
              "updatedAt": "2018-06-18T00:44:05Z"
            }
          ]
        }
      ]
    },
    {
      "number": 9,
      "id": "MDExOlB1bGxSZXF1ZXN0MTk1MzU4NjQz",
      "title": "consistent dleq notation",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/9",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "#3 ",
      "createdAt": "2018-06-17T02:55:06Z",
      "updatedAt": "2020-11-10T14:40:32Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "9ffe7574350d760bf79aec317aa538bbbe6dfadb",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "dleq-notation",
      "headRefOid": "2021234f3ea49c8be19ccd3ad87c786db3dd0db4",
      "closedAt": "2018-06-18T00:43:24Z",
      "mergedAt": "2018-06-18T00:43:24Z",
      "mergedBy": "alxdavids",
      "mergeCommit": {
        "oid": "84c72b3687f2efee4243607ce156aa167e708e18"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTI5NDA1MjIy",
          "commit": {
            "abbreviatedOid": "2021234"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good. Ship it.",
          "createdAt": "2018-06-17T23:45:35Z",
          "updatedAt": "2018-06-17T23:45:35Z",
          "comments": []
        }
      ]
    },
    {
      "number": 11,
      "id": "MDExOlB1bGxSZXF1ZXN0MTk2NjU5NzMy",
      "title": "add references",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/11",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "#10 \r\n(also updated the .txt file)",
      "createdAt": "2018-06-22T07:36:00Z",
      "updatedAt": "2020-11-10T14:40:32Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "776a3da461831bdaf66d2bb5e9cfe7690e29e642",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "refs",
      "headRefOid": "1e37c07dba3c49797c15f9c43a78e1ed3e22889b",
      "closedAt": "2018-06-23T14:20:15Z",
      "mergedAt": "2018-06-23T14:20:15Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "247c871fee36f9301b47a797c796721f344c6fdf"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I think the hash2curve reference should be: I-D.irtf-cfrg-.... Can you please give that a shot? Also, can you please sort the authors in alphabetical order by surname? (You, Nick, then myself.)",
          "createdAt": "2018-06-22T11:22:58Z",
          "updatedAt": "2018-06-22T11:22:58Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "Okay I've changed the references back, they don't seem to build correctly (I think the ref is missing). Also switched the authors up.",
          "createdAt": "2018-06-23T11:35:15Z",
          "updatedAt": "2018-06-23T11:35:15Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 12,
      "id": "MDExOlB1bGxSZXF1ZXN0MjIzOTk0MTky",
      "title": "Using SWU encoding for hash-to-curve",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/12",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Not an expert with hashing to curves but it seems like the SWU encoding seems to work for P-256, so shall we go with that?  We already have noted with privacy pass that we should look to move towards this method of encoding so it seems to fit well.",
      "createdAt": "2018-10-18T15:08:51Z",
      "updatedAt": "2020-11-10T14:40:32Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "247c871fee36f9301b47a797c796721f344c6fdf",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/h2c",
      "headRefOid": "518621f0f2e51de397685baae997c7dd79dcaff8",
      "closedAt": "2018-10-20T01:44:05Z",
      "mergedAt": "2018-10-20T01:44:05Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "c3526b7f2216dc32922491c97ecc8a88fd36de7a"
      },
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "Ooops sorry, yeah you're right. I'll change them.",
          "createdAt": "2018-10-19T08:35:32Z",
          "updatedAt": "2018-10-19T08:35:32Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "I've updated now, also using Icart for P384 as per the h2c draft.",
          "createdAt": "2018-10-19T10:59:10Z",
          "updatedAt": "2018-10-19T10:59:10Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTY2MzM0Nzkw",
          "commit": {
            "abbreviatedOid": "5293feb"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "I think the Curve25519 variants should use Elligator2. @grittygrease, what do you think?",
          "createdAt": "2018-10-18T23:34:07Z",
          "updatedAt": "2018-10-18T23:34:07Z",
          "comments": []
        }
      ]
    },
    {
      "number": 14,
      "id": "MDExOlB1bGxSZXF1ZXN0MjI0NTM2MjY2",
      "title": "ECVOPRF->VOPRF",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/14",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Related to #13 ",
      "createdAt": "2018-10-21T11:58:41Z",
      "updatedAt": "2020-11-10T14:40:33Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "c3526b7f2216dc32922491c97ecc8a88fd36de7a",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/voprf",
      "headRefOid": "c9fc3b8583885a1dced287207dbd158196729462",
      "closedAt": "2018-10-22T13:03:28Z",
      "mergedAt": "2018-10-22T13:03:28Z",
      "mergedBy": "alxdavids",
      "mergeCommit": {
        "oid": "54f2d05b44f1abd799bfa4191fba284de60aa9ec"
      },
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "@chris-wood Sure, I am happy for you to submit this. I fixed the suggestion you made above, and now going to merge (if github actually allows me...).",
          "createdAt": "2018-10-22T11:16:15Z",
          "updatedAt": "2018-10-22T11:16:15Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTY2Nzk4MjMz",
          "commit": {
            "abbreviatedOid": "84416d7"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM -- only one small comment. Please feel free to merge (with or without the change). @alxdavids, do you want me to submit this?",
          "createdAt": "2018-10-21T19:48:36Z",
          "updatedAt": "2018-10-21T19:49:18Z",
          "comments": [
            {
              "originalPosition": 257,
              "body": "Maybe we should drop \"our\" here?",
              "createdAt": "2018-10-21T19:48:36Z",
              "updatedAt": "2018-10-22T08:39:44Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTY2ODU5OTIw",
          "commit": {
            "abbreviatedOid": "c9fc3b8"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-10-22T08:40:48Z",
          "updatedAt": "2018-10-22T08:40:52Z",
          "comments": [
            {
              "originalPosition": 257,
              "body": "Fixed",
              "createdAt": "2018-10-22T08:40:50Z",
              "updatedAt": "2018-10-22T08:40:53Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTY2ODU5OTUy",
          "commit": {
            "abbreviatedOid": "c9fc3b8"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2018-10-22T08:41:00Z",
          "updatedAt": "2018-10-22T08:41:04Z",
          "comments": [
            {
              "originalPosition": 257,
              "body": "Fixed",
              "createdAt": "2018-10-22T08:41:02Z",
              "updatedAt": "2018-10-22T08:41:05Z"
            }
          ]
        }
      ]
    },
    {
      "number": 18,
      "id": "MDExOlB1bGxSZXF1ZXN0MjUyNjk5MDgz",
      "title": "Add secret key to DLEQ_Generate and rewrap main body lines",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/18",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "For #17 ",
      "createdAt": "2019-02-13T13:44:20Z",
      "updatedAt": "2020-11-10T14:40:34Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "007965f2519f76bae53ca65067b1bccc01b20058",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/add-key-to-dleq-gen",
      "headRefOid": "165893dc24ef5d19dd04680cd55ece6888535c95",
      "closedAt": "2019-02-13T14:26:19Z",
      "mergedAt": "2019-02-13T14:26:19Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "ef72e0a0519a6c25b41a00e3ce7a786cc05fb8a4"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjAzMjM2OTYz",
          "commit": {
            "abbreviatedOid": "165893d"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-02-13T14:26:14Z",
          "updatedAt": "2019-02-13T14:26:14Z",
          "comments": []
        }
      ]
    },
    {
      "number": 19,
      "id": "MDExOlB1bGxSZXF1ZXN0MjU0MjM3NDY5",
      "title": "Make verifiability optional and add batched DLEQ case",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/19",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "For #15 and #16, big change so I'm happy to iterate on this.\r\n",
      "createdAt": "2019-02-19T12:40:38Z",
      "updatedAt": "2020-11-10T14:40:34Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "ef72e0a0519a6c25b41a00e3ce7a786cc05fb8a4",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/oprf",
      "headRefOid": "beeccae5310afbb3fd162ce431421f2aac7f8895",
      "closedAt": "2019-02-27T11:41:36Z",
      "mergedAt": "2019-02-27T11:41:36Z",
      "mergedBy": "alxdavids",
      "mergeCommit": {
        "oid": "389064d2f1a159426b545507becb6e59de3b1697"
      },
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for your feedback! I've made the necessary fixes.",
          "createdAt": "2019-02-26T10:22:30Z",
          "updatedAt": "2019-02-26T10:22:30Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjA1Mzg2NDkw",
          "commit": {
            "abbreviatedOid": "ed8d086"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "First pass done. Looks great so far! I left some technical questions and editorial comments. Please let me know if anything is unclear.",
          "createdAt": "2019-02-19T18:45:10Z",
          "updatedAt": "2019-02-20T02:54:58Z",
          "comments": [
            {
              "originalPosition": 65,
              "body": "Should we also explicitly say that the server learns nothing during the computation?",
              "createdAt": "2019-02-19T18:45:11Z",
              "updatedAt": "2019-02-27T11:40:07Z"
            },
            {
              "originalPosition": 65,
              "body": "s/learn the server's/learn anything about the server's?",
              "createdAt": "2019-02-19T18:46:11Z",
              "updatedAt": "2019-02-27T11:40:07Z"
            },
            {
              "originalPosition": 68,
              "body": "s/evaluating the underlying PRF/evaluating the underlying PRF with a known public key?",
              "createdAt": "2019-02-19T18:46:41Z",
              "updatedAt": "2019-02-27T11:40:07Z"
            },
            {
              "originalPosition": 104,
              "body": "The end of this sentence seems a bit out of context. Perhaps: \"... with the addition of a proof that demonstrates correctness of the computation using a known public key.\"",
              "createdAt": "2019-02-20T02:41:14Z",
              "updatedAt": "2019-02-27T11:40:07Z"
            },
            {
              "originalPosition": 105,
              "body": "s/ECVOPRF/ECOPRF?",
              "createdAt": "2019-02-20T02:41:27Z",
              "updatedAt": "2019-02-27T11:40:07Z"
            },
            {
              "originalPosition": 129,
              "body": "s/OPRF\\/VOPRF protocol/OPRF and VOPRF protocols",
              "createdAt": "2019-02-20T02:41:50Z",
              "updatedAt": "2019-02-27T11:40:07Z"
            },
            {
              "originalPosition": 146,
              "body": "s/Broadly/Briefly?",
              "createdAt": "2019-02-20T02:42:41Z",
              "updatedAt": "2019-02-27T11:40:07Z"
            },
            {
              "originalPosition": 163,
              "body": "s/K/k?",
              "createdAt": "2019-02-20T02:43:08Z",
              "updatedAt": "2019-02-27T11:40:07Z"
            },
            {
              "originalPosition": 162,
              "body": "Perhaps we should assign `PRF(k, x)` a value, e.g., `y = PRF(k, x)`?",
              "createdAt": "2019-02-20T02:43:38Z",
              "updatedAt": "2019-02-27T11:40:07Z"
            },
            {
              "originalPosition": 168,
              "body": "Should `K` be capitalized or not? Whatever is right, we should one consistent.",
              "createdAt": "2019-02-20T02:43:59Z",
              "updatedAt": "2019-02-27T11:40:07Z"
            },
            {
              "originalPosition": 198,
              "body": "s/separate/additional?",
              "createdAt": "2019-02-20T02:44:47Z",
              "updatedAt": "2019-02-27T11:40:07Z"
            },
            {
              "originalPosition": 200,
              "body": "Is this the best way to phrase this particular property? Must V actually verify to achieve this? I'm just not sure. @grittygrease?",
              "createdAt": "2019-02-20T02:47:39Z",
              "updatedAt": "2019-02-27T11:40:07Z"
            },
            {
              "originalPosition": 222,
              "body": "s/VOPRF/OPRF",
              "createdAt": "2019-02-20T02:48:07Z",
              "updatedAt": "2019-02-27T11:40:07Z"
            },
            {
              "originalPosition": 302,
              "body": "Possibly add: \"This means the VOPRF computation is finalized with 'OPRF_Finalize'.\"",
              "createdAt": "2019-02-20T02:50:48Z",
              "updatedAt": "2019-02-27T11:40:07Z"
            },
            {
              "originalPosition": 366,
              "body": "Should we always multiply Z by the curve cofactor, to be safe?",
              "createdAt": "2019-02-20T02:51:36Z",
              "updatedAt": "2019-02-27T11:40:07Z"
            },
            {
              "originalPosition": 385,
              "body": "Can we move this to a specific routine that converts a binary string to an integer of fixed length? Relatedly, what is the width of `k`?",
              "createdAt": "2019-02-20T02:52:29Z",
              "updatedAt": "2019-02-27T11:40:07Z"
            },
            {
              "originalPosition": 506,
              "body": "\ud83d\udc4d ",
              "createdAt": "2019-02-20T02:52:58Z",
              "updatedAt": "2019-02-27T11:40:07Z"
            },
            {
              "originalPosition": 803,
              "body": "s/that they had with/with",
              "createdAt": "2019-02-20T02:54:19Z",
              "updatedAt": "2019-02-27T11:40:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjA4MDk3OTY0",
          "commit": {
            "abbreviatedOid": "39b6776"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Approved pending suggested changes!",
          "createdAt": "2019-02-26T17:25:13Z",
          "updatedAt": "2019-02-26T17:27:06Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "s/subgroups/groups?",
              "createdAt": "2019-02-26T17:25:14Z",
              "updatedAt": "2019-02-27T11:40:07Z"
            },
            {
              "originalPosition": 67,
              "body": "s/PRF(k,x)/y",
              "createdAt": "2019-02-26T17:25:51Z",
              "updatedAt": "2019-02-27T11:40:07Z"
            },
            {
              "originalPosition": 179,
              "body": "Several documents use `h` as the cofactor -- can we adopt that same terminology? Can we move it to a \"definitions\" section?",
              "createdAt": "2019-02-26T17:26:51Z",
              "updatedAt": "2019-02-27T11:40:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjA4NDc1ODM5",
          "commit": {
            "abbreviatedOid": "39b6776"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-02-27T11:39:17Z",
          "updatedAt": "2019-02-27T11:39:17Z",
          "comments": [
            {
              "originalPosition": 179,
              "body": "I've mentioned the use of h in the opening steps of section {{#oprf}}",
              "createdAt": "2019-02-27T11:39:17Z",
              "updatedAt": "2019-02-27T11:40:07Z"
            }
          ]
        }
      ]
    },
    {
      "number": 21,
      "id": "MDExOlB1bGxSZXF1ZXN0MjU3MDM4NzQ5",
      "title": "Updated test vectors and ciphersuites",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/21",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "For #6 \r\n- Provide test vectors for DLEQ proofs and batched DLEQ. \r\n- Also focus on fewer ciphersuites that we support (think this is easier for providing reference implementations). Do you think this is enough? Are there any others you would like to see included?",
      "createdAt": "2019-02-28T11:49:32Z",
      "updatedAt": "2020-11-10T14:40:36Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "389064d2f1a159426b545507becb6e59de3b1697",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/updated-testvecs",
      "headRefOid": "e5edcddaa576d3e52b0d69b2fa4a7a67d8026e87",
      "closedAt": "2019-03-01T15:52:32Z",
      "mergedAt": "2019-03-01T15:52:32Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "343156390d60cac248257c7e25f81d1ad839fc01"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjA5Mjg2Mjcx",
          "commit": {
            "abbreviatedOid": "29ab987"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2019-02-28T20:12:39Z",
          "updatedAt": "2019-02-28T20:13:57Z",
          "comments": [
            {
              "originalPosition": 50,
              "body": "Can you drop references to both here?",
              "createdAt": "2019-02-28T20:12:39Z",
              "updatedAt": "2019-03-01T14:11:44Z"
            },
            {
              "originalPosition": 54,
              "body": "Should we drop \"Samples that are larger...\" and make the former sentence say \"d1,...,dn MUST be smaller\"?",
              "createdAt": "2019-02-28T20:13:25Z",
              "updatedAt": "2019-03-01T14:11:44Z"
            },
            {
              "originalPosition": 73,
              "body": "What hash function is used for HKDF here? ",
              "createdAt": "2019-02-28T20:13:41Z",
              "updatedAt": "2019-03-01T14:11:44Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjA5NjUxMzAx",
          "commit": {
            "abbreviatedOid": "e5edcdd"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-03-01T15:52:26Z",
          "updatedAt": "2019-03-01T15:52:26Z",
          "comments": []
        }
      ]
    },
    {
      "number": 22,
      "id": "MDExOlB1bGxSZXF1ZXN0MjU4NzM3NDk5",
      "title": "Make ciphersuites explicit and add discussion of additive blinding",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/22",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2019-03-06T14:19:05Z",
      "updatedAt": "2020-11-10T14:40:36Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "343156390d60cac248257c7e25f81d1ad839fc01",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/ciphersuites",
      "headRefOid": "7f176d85b6c14c17a7af952ccb411c654d1d01d2",
      "closedAt": "2019-03-08T17:48:27Z",
      "mergedAt": "2019-03-08T17:48:27Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "da7bc6a3d49616e53760a9014b2acc94907a1a06"
      },
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "Made the ciphersuites more explicit in line with the specification in https://github.com/chris-wood/draft-irtf-cfrg-hash-to-curve. I also removed the P-521 ciphersuite because I don't think there is a secure way of instantiating it with SHA-2 primitives.",
          "createdAt": "2019-03-08T10:12:54Z",
          "updatedAt": "2019-03-08T10:16:56Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "@chris-wood still happy to merge?",
          "createdAt": "2019-03-08T17:33:02Z",
          "updatedAt": "2019-03-08T17:33:02Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjExNDAyMjc4",
          "commit": {
            "abbreviatedOid": "55c6412"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Please feel free to merge. Thanks!",
          "createdAt": "2019-03-06T18:37:51Z",
          "updatedAt": "2019-03-06T18:38:53Z",
          "comments": [
            {
              "originalPosition": 342,
              "body": "s/ECVOPRF/ECOPRF, here and elsewhere? Or are we keeping the V in VOPRF to indicate that it's optional?",
              "createdAt": "2019-03-06T18:37:52Z",
              "updatedAt": "2019-03-08T10:43:59Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjEyMzk4Mjc4",
          "commit": {
            "abbreviatedOid": "7f176d8"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-03-08T17:48:12Z",
          "updatedAt": "2019-03-08T17:48:12Z",
          "comments": []
        }
      ]
    },
    {
      "number": 23,
      "id": "MDExOlB1bGxSZXF1ZXN0MjU5Nzg2MDgz",
      "title": "Add notes on additional key consistency constraints.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/23",
      "state": "CLOSED",
      "author": "e271828-",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Covers some of the points we went over in person last month, and corrects a few typos.",
      "createdAt": "2019-03-10T20:16:39Z",
      "updatedAt": "2019-03-11T05:25:35Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "9186bd55e639dc38c33e8e9b032f5132807e1cb8",
      "headRepository": "e271828-/draft-sullivan-cfrg-oprf",
      "headRefName": "key-consistency",
      "headRefOid": "58e8e7c00fcd3d07e075b51e63709aa35975927d",
      "closedAt": "2019-03-11T05:25:35Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for the suggested changes. We're currently working from draft-sullivan-cfrg-voprf.md for the latest draft, would it be possible to make the changes to this file instead? Thanks!",
          "createdAt": "2019-03-10T20:40:46Z",
          "updatedAt": "2019-03-10T20:40:46Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 24,
      "id": "MDExOlB1bGxSZXF1ZXN0MjU5Nzg3NDMy",
      "title": "Small changes and typos",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/24",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "- Change file name to oprf\r\n- Fix typos in algorithm inputs\r\n- Make the h2c ciphersuites a bit briefer\r\n- Switched the Ristretto ciphersuite to use SHA-512 to be consistent with the Curve25519 h2c ciphersuite.",
      "createdAt": "2019-03-10T20:36:32Z",
      "updatedAt": "2020-11-10T14:40:37Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "9186bd55e639dc38c33e8e9b032f5132807e1cb8",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/oprf-name-change",
      "headRefOid": "eaa5c04156bb734166385744aaab8cb52f235f87",
      "closedAt": "2019-03-11T15:19:36Z",
      "mergedAt": "2019-03-11T15:19:36Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "a7e7f5b7075512b882ec487adfb4a2c239835f5d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjEyOTAwMzg2",
          "commit": {
            "abbreviatedOid": "eaa5c04"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-03-11T15:19:32Z",
          "updatedAt": "2019-03-11T15:19:32Z",
          "comments": []
        }
      ]
    },
    {
      "number": 25,
      "id": "MDExOlB1bGxSZXF1ZXN0MjU5ODM2NDc5",
      "title": "Add notes on additional key consistency constraints.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/25",
      "state": "CLOSED",
      "author": "e271828-",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Covers some of the points we went over in person last month, and corrects a few typos.\r\n\r\n(On the correct document this time.)",
      "createdAt": "2019-03-11T05:26:36Z",
      "updatedAt": "2019-03-11T16:33:05Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "9186bd55e639dc38c33e8e9b032f5132807e1cb8",
      "headRepository": "e271828-/draft-sullivan-cfrg-oprf",
      "headRefName": "key-consistency-v2",
      "headRefOid": "ee99160e849d6dfbac39d3b68bf91c682fb8bf9c",
      "closedAt": "2019-03-11T16:33:04Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@e271828- can you please resolve the conflicts so we can merge?",
          "createdAt": "2019-03-11T16:31:55Z",
          "updatedAt": "2019-03-11T16:31:55Z"
        },
        {
          "author": "e271828-",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closing in favor of https://github.com/chris-wood/draft-sullivan-cfrg-oprf/pull/26",
          "createdAt": "2019-03-11T16:33:04Z",
          "updatedAt": "2019-03-11T16:33:04Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjEyNzIyNjY1",
          "commit": {
            "abbreviatedOid": "fa17562"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-03-11T09:16:01Z",
          "updatedAt": "2019-03-11T09:16:01Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjEyODEwODgx",
          "commit": {
            "abbreviatedOid": "fa17562"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-03-11T12:42:40Z",
          "updatedAt": "2019-03-11T12:42:40Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "Hmm, I don't quite understand this example. Could we provide some more details?",
              "createdAt": "2019-03-11T12:42:40Z",
              "updatedAt": "2019-03-11T16:21:27Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjEyODExMTIx",
          "commit": {
            "abbreviatedOid": "fa17562"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "The second example LGTM! I just don't quite understand the first. ",
          "createdAt": "2019-03-11T12:43:13Z",
          "updatedAt": "2019-03-11T12:43:13Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjEyODcyNzYw",
          "commit": {
            "abbreviatedOid": "fa17562"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-03-11T14:36:39Z",
          "updatedAt": "2019-03-11T14:36:40Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "I believe this is just referring to the fact that having short key cycles can lead to a similar deanonymising effect as using individual keys for each client V.\r\n\r\nPerhaps we could reword to the following:\r\n\r\n> For this side effect to hold, P must also be prevented from using other techniques to manipulate their public key within the trusted registry to reduce client anonymity. For example, if P's public key is rotated too frequently then this may stratify the user base into small anonymity groups (those with VOPRF_Sign outputs taken from a given key epoch). In this case, it may become practical to link VOPRF sessions for a given user and thus compromises their privacy.",
              "createdAt": "2019-03-11T14:36:40Z",
              "updatedAt": "2019-03-11T16:21:27Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjEyOTQ2MTMw",
          "commit": {
            "abbreviatedOid": "ee99160"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-03-11T16:31:23Z",
          "updatedAt": "2019-03-11T16:31:23Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjEyOTQ2ODc4",
          "commit": {
            "abbreviatedOid": "ee99160"
          },
          "author": "e271828-",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-03-11T16:32:44Z",
          "updatedAt": "2019-03-11T16:32:45Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "This is correct. I've accepted @alxdavids wording and resubmitted in https://github.com/chris-wood/draft-sullivan-cfrg-oprf/pull/26 to keep the diff clean.",
              "createdAt": "2019-03-11T16:32:45Z",
              "updatedAt": "2019-03-11T16:32:45Z"
            }
          ]
        }
      ]
    },
    {
      "number": 26,
      "id": "MDExOlB1bGxSZXF1ZXN0MjYwMDQzMzA2",
      "title": "Clarifying key consistency comments.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/26",
      "state": "MERGED",
      "author": "e271828-",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Covers some of the points we went over in person last month, and corrects a few typos.",
      "createdAt": "2019-03-11T16:31:29Z",
      "updatedAt": "2019-03-11T23:04:34Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "a7e7f5b7075512b882ec487adfb4a2c239835f5d",
      "headRepository": "e271828-/draft-sullivan-cfrg-oprf",
      "headRefName": "key-consistency-v3",
      "headRefOid": "fc90b3d19a5d5d2b7342bd1156d5159555d5ae43",
      "closedAt": "2019-03-11T16:32:21Z",
      "mergedAt": "2019-03-11T16:32:21Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "036752b6d0aa40c408ee400842dda7aa6d7961b5"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjEyOTQ2NjI2",
          "commit": {
            "abbreviatedOid": "fc90b3d"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-03-11T16:32:16Z",
          "updatedAt": "2019-03-11T16:32:16Z",
          "comments": []
        }
      ]
    },
    {
      "number": 38,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjk0Nzk2NzQ0",
      "title": "Clarifies OPRF applications",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/38",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "- Fixes #37: correct applications of OPRF for password domain\r\n- Add txt for 03 release\r\n- Update address information",
      "createdAt": "2019-07-05T09:09:52Z",
      "updatedAt": "2019-07-05T13:36:33Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "036752b6d0aa40c408ee400842dda7aa6d7961b5",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/passwords",
      "headRefOid": "b07d64c8e1dd7e5af1848a81417972e52b99f2c3",
      "closedAt": "2019-07-05T13:36:18Z",
      "mergedAt": "2019-07-05T13:36:18Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "f2f79d02e9e2ee347ca7e9c3438397af55a284de"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU4NDA3NzI1",
          "commit": {
            "abbreviatedOid": "b07d64c"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-07-05T13:35:07Z",
          "updatedAt": "2019-07-05T13:35:07Z",
          "comments": []
        }
      ]
    },
    {
      "number": 39,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjk0ODExNTcw",
      "title": "Fix minor issues from Hugo",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/39",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses #35 ",
      "createdAt": "2019-07-05T09:52:41Z",
      "updatedAt": "2020-11-10T14:40:42Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "95bd6f07e5c50d4a612f9cf07a8b21fec9d08521",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/minor-comments-from-hugo",
      "headRefOid": "50b9a592fbbad5ec342e5529aa2262dbe98968d7",
      "closedAt": "2019-07-08T13:34:46Z",
      "mergedAt": "2019-07-08T13:34:46Z",
      "mergedBy": "alxdavids",
      "mergeCommit": {
        "oid": "95e77f81fcb6906ab6bbedd59674c7cb7301d4a1"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@alxdavids can you resolve the conflicts? Feel free to merge when done!",
          "createdAt": "2019-07-08T13:05:51Z",
          "updatedAt": "2019-07-08T13:05:51Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU4NDA5Mzcx",
          "commit": {
            "abbreviatedOid": "d17d804"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2019-07-05T13:38:45Z",
          "updatedAt": "2019-07-05T13:43:42Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "GG is of prime order p, right? We should say so if that's the case.",
              "createdAt": "2019-07-05T13:38:45Z",
              "updatedAt": "2019-07-08T13:33:44Z"
            },
            {
              "originalPosition": 92,
              "body": "Did {{NIST}} not work?",
              "createdAt": "2019-07-05T13:39:52Z",
              "updatedAt": "2019-07-08T13:33:44Z"
            },
            {
              "originalPosition": 119,
              "body": "```suggestion\r\n 1. N := (r^(-1))Z\r\n```",
              "createdAt": "2019-07-05T13:40:15Z",
              "updatedAt": "2019-07-08T13:33:44Z"
            },
            {
              "originalPosition": 101,
              "body": "```suggestion\r\n 1. N := (r^(-1))Z\r\n```",
              "createdAt": "2019-07-05T13:40:20Z",
              "updatedAt": "2019-07-08T13:33:44Z"
            },
            {
              "originalPosition": 150,
              "body": "```suggestion\r\nfashion as is possible in Schnorr or (EC)DSA scenarios where fresh randomness is\r\n```",
              "createdAt": "2019-07-05T13:41:36Z",
              "updatedAt": "2019-07-08T13:33:44Z"
            },
            {
              "originalPosition": 133,
              "body": "I wonder if this is a choice we should specify. It seems use of a different blinding technique is an entirely separate protocol. Maybe we ought to (in a future issue) make the blinding choice a parameter and put it behind a parameterized function, e.g., `Blind()`?",
              "createdAt": "2019-07-05T13:43:38Z",
              "updatedAt": "2019-07-08T13:33:44Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU4NzY0Mjk2",
          "commit": {
            "abbreviatedOid": "d17d804"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-07-08T08:47:54Z",
          "updatedAt": "2019-07-08T08:47:54Z",
          "comments": [
            {
              "originalPosition": 92,
              "body": "No, because it's in a ~~~ block I believe",
              "createdAt": "2019-07-08T08:47:54Z",
              "updatedAt": "2019-07-08T13:33:44Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU4NzY1NTM5",
          "commit": {
            "abbreviatedOid": "d292389"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-07-08T08:50:03Z",
          "updatedAt": "2019-07-08T08:50:04Z",
          "comments": [
            {
              "originalPosition": 133,
              "body": "I agree, I think this would be a good change to make for a future version.",
              "createdAt": "2019-07-08T08:50:03Z",
              "updatedAt": "2019-07-08T13:33:44Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU4NzczMDY2",
          "commit": {
            "abbreviatedOid": "0ba38a3"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-07-08T09:04:03Z",
          "updatedAt": "2019-07-08T09:04:03Z",
          "comments": [
            {
              "originalPosition": 133,
              "body": "I'll make a separate issue to track it after the submission today",
              "createdAt": "2019-07-08T09:04:03Z",
              "updatedAt": "2019-07-08T13:33:44Z"
            }
          ]
        }
      ]
    },
    {
      "number": 40,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjk0ODE0MDU2",
      "title": "Remove signing terminology",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/40",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #34:\r\n- Replace signing terminology to avoid confusion with asymmetric primitives\r\n- Replace OPRF_Sign with OPRF_Eval",
      "createdAt": "2019-07-05T09:59:43Z",
      "updatedAt": "2020-11-10T14:40:38Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "036752b6d0aa40c408ee400842dda7aa6d7961b5",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/oprf-eval",
      "headRefOid": "ecc8161333c4edd2d9cab0da9c6644c57a85d472",
      "closedAt": "2019-07-05T13:46:59Z",
      "mergedAt": "2019-07-05T13:46:59Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "8d4d4d8e6754db177152b842af51ae0e53230eb3"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU4NDEzNDU5",
          "commit": {
            "abbreviatedOid": "ecc8161"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-07-05T13:46:53Z",
          "updatedAt": "2019-07-05T13:46:53Z",
          "comments": []
        }
      ]
    },
    {
      "number": 41,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjk0ODE2MjE2",
      "title": "Use a fixed generator taken from group description.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/41",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #33",
      "createdAt": "2019-07-05T10:05:42Z",
      "updatedAt": "2020-11-10T14:40:40Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "8d4d4d8e6754db177152b842af51ae0e53230eb3",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/generator-desc",
      "headRefOid": "2f8adbbefc865d2726807061d540d4100e687295",
      "closedAt": "2019-07-05T13:51:30Z",
      "mergedAt": "2019-07-05T13:51:30Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "cc1eff10d07b8c9f632e81760b8bd07dec071837"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU4NDE0Mzcy",
          "commit": {
            "abbreviatedOid": "c45ba39"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-07-05T13:48:47Z",
          "updatedAt": "2019-07-05T13:48:47Z",
          "comments": []
        }
      ]
    },
    {
      "number": 42,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjk0ODIxODE4",
      "title": "Streamline and correct OPRF security properties",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/42",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #32",
      "createdAt": "2019-07-05T10:23:06Z",
      "updatedAt": "2020-11-10T14:40:43Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "036752b6d0aa40c408ee400842dda7aa6d7961b5",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/oprf-sec",
      "headRefOid": "a12777268966122ba418d5103fb58727762e2553",
      "closedAt": "2019-07-08T16:51:09Z",
      "mergedAt": "2019-07-08T16:51:08Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "af83879c57bf7bc579cf44c73353b96ebfc61d34"
      },
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "The reason that I removed these definitions is because they're implied by pseudorandomness. Any function that is malleable cannot be pseudorandom, because it would be distinguishable from some random function (which is not malleable with high probability). The same with unlinkability, if you have obliviousness and pseudorandomness then you shouldn't be able to invert the function.\r\n\r\nIf you would prefer I could add some text that describes that (based on pseudoranomness and unlinkability) then we have unlinkability and non-malleability. But, I agree with Hugo that listing these properties separately from pseudorandomness is unnecessary.",
          "createdAt": "2019-07-08T10:10:50Z",
          "updatedAt": "2019-07-08T10:10:50Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> If you would prefer I could add some text that describes that (based on pseudoranomness and unlinkability) then we have unlinkability and non-malleability.\r\n\r\nYeah, I think adding even parenthetical text that says these properties hold is useful. Can we do that?",
          "createdAt": "2019-07-08T13:03:54Z",
          "updatedAt": "2019-07-08T13:03:54Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "> > If you would prefer I could add some text that describes that (based on pseudoranomness and unlinkability) then we have unlinkability and non-malleability.\r\n> \r\n> Yeah, I think adding even parenthetical text that says these properties hold is useful. Can we do that?\r\n\r\nSure, will do!",
          "createdAt": "2019-07-08T13:06:20Z",
          "updatedAt": "2019-07-08T13:06:20Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "@chris-wood let me know what you think about the new text that I have added.",
          "createdAt": "2019-07-08T13:43:05Z",
          "updatedAt": "2019-07-08T13:43:05Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU4NTg5OTI5",
          "commit": {
            "abbreviatedOid": "f682387"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Good correction in the pseudo randomness definition! I only have concerns about dropping two other properties. @alxdavids, can you comment?",
          "createdAt": "2019-07-06T13:44:48Z",
          "updatedAt": "2019-07-06T13:45:30Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "Why did we remove this property?",
              "createdAt": "2019-07-06T13:44:48Z",
              "updatedAt": "2019-07-08T13:42:00Z"
            },
            {
              "originalPosition": 21,
              "body": "And this one?",
              "createdAt": "2019-07-06T13:44:58Z",
              "updatedAt": "2019-07-08T13:42:00Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU5MDMwODk3",
          "commit": {
            "abbreviatedOid": "a127772"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-07-08T16:51:04Z",
          "updatedAt": "2019-07-08T16:51:04Z",
          "comments": []
        }
      ]
    },
    {
      "number": 43,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjk0ODMwMDY2",
      "title": "Update blinding terminology",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/43",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #28:\r\n- Denote the additive blinding case (from OPAQUE) by fixed-base blinding (FBB)\r\n- Denote multiplicative case (from Privacy Pass) by variable-base blinding (VBB)",
      "createdAt": "2019-07-05T10:50:20Z",
      "updatedAt": "2020-11-10T14:40:39Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "036752b6d0aa40c408ee400842dda7aa6d7961b5",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/blinding",
      "headRefOid": "895fbbe5014498e57834c41ef13a58e044ec46ab",
      "closedAt": "2019-07-05T13:45:07Z",
      "mergedAt": "2019-07-05T13:45:06Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "cc891c1c79e393925f4b54100da5f6f7c415627b"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU4NDEyNTUy",
          "commit": {
            "abbreviatedOid": "895fbbe"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-07-05T13:45:00Z",
          "updatedAt": "2019-07-05T13:45:00Z",
          "comments": []
        }
      ]
    },
    {
      "number": 44,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjk0ODM3NTM0",
      "title": "Replace PRNG with additional RO function",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/44",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #36\r\n- Usage of PRNG is unnecessary.\r\n- We now instantiate with a generic RO\r\n- Specific ciphersuites are unchanged\r\n- HKDF -> HKDF_Expand",
      "createdAt": "2019-07-05T11:16:11Z",
      "updatedAt": "2020-11-10T14:40:42Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "ecc849706ddac8d054ca9b6fdd0c400b5a02e4e9",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/prng-to-ro",
      "headRefOid": "06d10866c3cf30fd20aa09ce10f43b34bc6d0304",
      "closedAt": "2019-07-08T13:18:31Z",
      "mergedAt": "2019-07-08T13:18:31Z",
      "mergedBy": "alxdavids",
      "mergeCommit": {
        "oid": "95bd6f07e5c50d4a612f9cf07a8b21fec9d08521"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for the changes! Once the conflicts are resolved, feel free to merge.",
          "createdAt": "2019-07-08T13:08:26Z",
          "updatedAt": "2019-07-08T13:08:26Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU4NTg5NDg2",
          "commit": {
            "abbreviatedOid": "b0f81d3"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2019-07-06T13:31:19Z",
          "updatedAt": "2019-07-06T13:35:53Z",
          "comments": [
            {
              "originalPosition": 72,
              "body": "```suggestion\r\n## Random oracle instantiations for proofs\r\n```",
              "createdAt": "2019-07-06T13:31:19Z",
              "updatedAt": "2019-07-08T13:18:07Z"
            },
            {
              "originalPosition": 80,
              "body": "```suggestion\r\nor we can use a variable-length output generator. For example, for groups with an\r\n```",
              "createdAt": "2019-07-06T13:32:17Z",
              "updatedAt": "2019-07-08T13:18:07Z"
            },
            {
              "originalPosition": 82,
              "body": "Is one preferred over the other? Why? (We should probably include some rationale text here.)",
              "createdAt": "2019-07-06T13:33:21Z",
              "updatedAt": "2019-07-08T13:18:07Z"
            },
            {
              "originalPosition": 92,
              "body": "```suggestion\r\nIn these cases, the iterating integer i is increased monotonically to i' until such di' is\r\n```",
              "createdAt": "2019-07-06T13:34:10Z",
              "updatedAt": "2019-07-08T13:18:07Z"
            },
            {
              "originalPosition": 92,
              "body": "In general, this is underspecified. We should leave a TODO here at least to write this out.",
              "createdAt": "2019-07-06T13:34:26Z",
              "updatedAt": "2019-07-08T13:18:07Z"
            },
            {
              "originalPosition": 103,
              "body": "It's typically written as `HKDF-Expand`, not `HKDF_Expand`. Can we use that instead?",
              "createdAt": "2019-07-06T13:34:52Z",
              "updatedAt": "2019-07-08T13:18:07Z"
            },
            {
              "originalPosition": 117,
              "body": "Are these test vectors correct with HKDF? We should probably remove them, temporarily, if not.",
              "createdAt": "2019-07-06T13:35:15Z",
              "updatedAt": "2019-07-08T13:18:07Z"
            },
            {
              "originalPosition": 65,
              "body": "```suggestion\r\nmultiple blinded PRF inputs\u00a0[ Mi ] for i in 1...n. Then P computes the array [Zi]\r\n```",
              "createdAt": "2019-07-06T13:35:39Z",
              "updatedAt": "2019-07-08T13:18:07Z"
            },
            {
              "originalPosition": 66,
              "body": "```suggestion\r\nand replaces DLEQ_Generate with Batched_DLEQ_Generate over these arrays. The\r\n```",
              "createdAt": "2019-07-06T13:35:46Z",
              "updatedAt": "2019-07-08T13:18:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU4ODA4NDMy",
          "commit": {
            "abbreviatedOid": "b0f81d3"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-07-08T10:13:02Z",
          "updatedAt": "2019-07-08T10:13:02Z",
          "comments": [
            {
              "originalPosition": 82,
              "body": "I don't think either is preferred, they're just examples of functions that you might want to use. We give ciphersuites below that use HKDF_Expand, is that enough?",
              "createdAt": "2019-07-08T10:13:02Z",
              "updatedAt": "2019-07-08T13:18:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU4ODA4NTMw",
          "commit": {
            "abbreviatedOid": "b0f81d3"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-07-08T10:13:14Z",
          "updatedAt": "2019-07-08T10:13:14Z",
          "comments": [
            {
              "originalPosition": 92,
              "body": "Good point, I will add this.",
              "createdAt": "2019-07-08T10:13:14Z",
              "updatedAt": "2019-07-08T13:18:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU4ODA4NTc2",
          "commit": {
            "abbreviatedOid": "b0f81d3"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-07-08T10:13:20Z",
          "updatedAt": "2019-07-08T10:13:21Z",
          "comments": [
            {
              "originalPosition": 103,
              "body": "Sure",
              "createdAt": "2019-07-08T10:13:20Z",
              "updatedAt": "2019-07-08T13:18:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU4ODA4ODcx",
          "commit": {
            "abbreviatedOid": "b0f81d3"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-07-08T10:13:59Z",
          "updatedAt": "2019-07-08T10:13:59Z",
          "comments": [
            {
              "originalPosition": 117,
              "body": "Yeah they are correct with HKDF (rather than Shake)",
              "createdAt": "2019-07-08T10:13:59Z",
              "updatedAt": "2019-07-08T13:18:07Z"
            }
          ]
        }
      ]
    },
    {
      "number": 45,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjk1MjcxNjI0",
      "title": "Remove detailed specification of blind RSA",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/45",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #31: the RSA specification is a bit redundant",
      "createdAt": "2019-07-08T10:25:19Z",
      "updatedAt": "2020-11-10T14:40:41Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "cc1eff10d07b8c9f632e81760b8bd07dec071837",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/fix-rsa-intro",
      "headRefOid": "4d7ea8adeafd5af223adcdd272ed1c9ff4766533",
      "closedAt": "2019-07-08T13:06:08Z",
      "mergedAt": "2019-07-08T13:06:08Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "ecc849706ddac8d054ca9b6fdd0c400b5a02e4e9"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU4ODg0NzE1",
          "commit": {
            "abbreviatedOid": "3ec7fc7"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-07-08T13:01:38Z",
          "updatedAt": "2019-07-08T13:02:39Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "```suggestion\r\nthat is signed. One of the more popular blind signature schemes is based on the\r\n```",
              "createdAt": "2019-07-08T13:01:38Z",
              "updatedAt": "2019-07-08T13:05:23Z"
            },
            {
              "originalPosition": 39,
              "body": "```suggestion\r\nvalue x. The verification procedure is thus symmetric as it requires\r\n```",
              "createdAt": "2019-07-08T13:02:33Z",
              "updatedAt": "2019-07-08T13:05:23Z"
            }
          ]
        }
      ]
    },
    {
      "number": 46,
      "id": "MDExOlB1bGxSZXF1ZXN0Mjk1MjcyNjM3",
      "title": "Remove Section Section refs",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/46",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #30",
      "createdAt": "2019-07-08T10:28:06Z",
      "updatedAt": "2020-11-10T14:40:41Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "cc1eff10d07b8c9f632e81760b8bd07dec071837",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/correct-sections",
      "headRefOid": "ee78e3889347514da1530ebdc7c77b0da6f05dc9",
      "closedAt": "2019-07-08T13:00:55Z",
      "mergedAt": "2019-07-08T13:00:55Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "dc8ef33f9ec3be7ca877da81d9e153903babd6c1"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU4ODg0Mjcy",
          "commit": {
            "abbreviatedOid": "ee78e38"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-07-08T13:00:49Z",
          "updatedAt": "2019-07-08T13:00:49Z",
          "comments": []
        }
      ]
    },
    {
      "number": 47,
      "id": "MDExOlB1bGxSZXF1ZXN0MzAwNzE0NDQ2",
      "title": "Update ciphersuites to be in line with latest h2c draft",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/47",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2019-07-24T13:03:30Z",
      "updatedAt": "2020-11-10T14:41:07Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "c2610a6762792f5b675a398b40e3103039f5c812",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/update-ciphersuites",
      "headRefOid": "411eed89453afc4a9a2e186cd68d49fe0217b465",
      "closedAt": "2019-07-24T13:26:00Z",
      "mergedAt": "2019-07-24T13:26:00Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "2d5eece270e08d0697862676903a53214cb28fa9"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjY2MDE2OTAx",
          "commit": {
            "abbreviatedOid": "411eed8"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-07-24T13:25:55Z",
          "updatedAt": "2019-07-24T13:25:55Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjY2MTg2NDU1",
          "commit": {
            "abbreviatedOid": "411eed8"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-07-24T17:54:27Z",
          "updatedAt": "2019-07-24T17:54:27Z",
          "comments": [
            {
              "originalPosition": 3,
              "body": "This should be `NIST P-256` or `secp256r1`\r\n",
              "createdAt": "2019-07-24T17:54:27Z",
              "updatedAt": "2019-07-24T17:54:27Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjY2MTg2NzY2",
          "commit": {
            "abbreviatedOid": "411eed8"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-07-24T17:55:02Z",
          "updatedAt": "2019-07-24T17:55:02Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "Here the group name is `ristretto255`",
              "createdAt": "2019-07-24T17:55:02Z",
              "updatedAt": "2019-07-24T17:55:02Z"
            }
          ]
        }
      ]
    },
    {
      "number": 48,
      "id": "MDExOlB1bGxSZXF1ZXN0MzAwNzMxNzYz",
      "title": "Fix modular reduction nits",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/48",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "(as mentioned in #27)",
      "createdAt": "2019-07-24T13:44:43Z",
      "updatedAt": "2020-11-10T14:41:08Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "2d5eece270e08d0697862676903a53214cb28fa9",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/modp",
      "headRefOid": "ee6c2c3675db35a38e9b8dc4a514d9faeea5bfba",
      "closedAt": "2019-07-24T20:18:26Z",
      "mergedAt": "2019-07-24T20:18:26Z",
      "mergedBy": "alxdavids",
      "mergeCommit": {
        "oid": "6c2269e2c1a4f3c9f51e8ac2282b96d331c3ac34"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjY2MTg4NzIz",
          "commit": {
            "abbreviatedOid": "ee3f97e"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "make sure the modulo operation is applied only to integers. \r\n",
          "createdAt": "2019-07-24T17:58:24Z",
          "updatedAt": "2019-07-24T18:03:32Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": " Modulo operation is only applied to integers since H2 outputs a point.",
              "createdAt": "2019-07-24T17:58:24Z",
              "updatedAt": "2019-07-24T19:39:09Z"
            },
            {
              "originalPosition": 14,
              "body": "here H1 outputs a string, which cannot be added to a point. Also,  modulo operation can be applied to points",
              "createdAt": "2019-07-24T18:00:26Z",
              "updatedAt": "2019-07-24T19:39:09Z"
            },
            {
              "originalPosition": 37,
              "body": "```suggestion\r\n 1. A' := (sG + cY)\r\n```",
              "createdAt": "2019-07-24T18:01:40Z",
              "updatedAt": "2019-07-24T19:39:09Z"
            },
            {
              "originalPosition": 38,
              "body": "```suggestion\r\n 2. B' := (sM + cZ)\r\n```",
              "createdAt": "2019-07-24T18:01:48Z",
              "updatedAt": "2019-07-24T19:39:09Z"
            },
            {
              "originalPosition": 24,
              "body": "```suggestion\r\n 2. A := rG and B := rM\r\n```",
              "createdAt": "2019-07-24T18:02:36Z",
              "updatedAt": "2019-07-24T19:39:09Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjY2MTkyMDI4",
          "commit": {
            "abbreviatedOid": "ee3f97e"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-07-24T18:04:23Z",
          "updatedAt": "2019-07-24T18:04:23Z",
          "comments": [
            {
              "originalPosition": 49,
              "body": "In the line \r\n- GG: Ristretto {{RISTRETTO}}\r\n\r\nshould be \r\n- GG: Ristretto255 {{RISTRETTO}}\r\n\r\n\r\n",
              "createdAt": "2019-07-24T18:04:23Z",
              "updatedAt": "2019-07-24T19:39:09Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjY2MjMwNTQz",
          "commit": {
            "abbreviatedOid": "ee3f97e"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-07-24T19:14:25Z",
          "updatedAt": "2019-07-24T19:14:25Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "s/can be applied to points/cannot",
              "createdAt": "2019-07-24T19:14:25Z",
              "updatedAt": "2019-07-24T19:39:09Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjY2MjMxMDUx",
          "commit": {
            "abbreviatedOid": "ee3f97e"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Thanks for the corrections! Requesting changes to fix the `mod p` misuses.",
          "createdAt": "2019-07-24T19:15:24Z",
          "updatedAt": "2019-07-24T19:15:24Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjY2MjUxNDM0",
          "commit": {
            "abbreviatedOid": "ee6c2c3"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-07-24T19:57:27Z",
          "updatedAt": "2019-07-24T19:57:27Z",
          "comments": []
        }
      ]
    },
    {
      "number": 49,
      "id": "MDExOlB1bGxSZXF1ZXN0MzE4ODk5NDM2",
      "title": "Add release 01 changes",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/49",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Release 01 was done a while ago but I never pushed some of the changes here, so here they are.",
      "createdAt": "2019-09-18T16:28:59Z",
      "updatedAt": "2020-11-10T14:41:08Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "6c2269e2c1a4f3c9f51e8ac2282b96d331c3ac34",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "release-01",
      "headRefOid": "d3b8d4659a25bef29dc96981af49f407dabe8d39",
      "closedAt": "2019-09-19T23:22:51Z",
      "mergedAt": "2019-09-19T23:22:51Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "346323edd87ee1ad5f5fbef7a34b4ac14874d712"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjkwODkxMzA0",
          "commit": {
            "abbreviatedOid": "d3b8d46"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-09-19T23:22:44Z",
          "updatedAt": "2019-09-19T23:22:44Z",
          "comments": []
        }
      ]
    },
    {
      "number": 55,
      "id": "MDExOlB1bGxSZXF1ZXN0MzI0NzM0NDU2",
      "title": "Updated security considerations",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/55",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Intended to address #50 and #52. \r\n\r\nChanges:\r\n- Discussion of Q-strong-DH oracle attacks and effects on OPRF security\r\n- Updated ciphersuites with larger security parameters (> 128 bits of security)\r\n- More discussion of cryptographic security reduction from [JKK14] for the construction that we give\r\n- More detailed discussion of security/privacy implications arising from user segregation and key rotation",
      "createdAt": "2019-10-04T15:28:53Z",
      "updatedAt": "2019-11-03T03:09:40Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "346323edd87ee1ad5f5fbef7a34b4ac14874d712",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/sec-considerations",
      "headRefOid": "93a5742788681488121cbfefa8510be6513183bb",
      "closedAt": "2019-11-03T03:09:40Z",
      "mergedAt": "2019-11-03T03:09:40Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "a920c2292f56231410576eadf10071a8791a4749"
      },
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "cc @armfazh",
          "createdAt": "2019-10-04T15:32:22Z",
          "updatedAt": "2019-10-04T15:32:22Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "@chris-wood also CI builds seem to be routinely failing due to ghpages:\r\n```\r\ngit -C /tmp/ghpages121 push -q https://github.com/cfrg/draft-irtf-cfrg-voprf gh-pages\r\nPassword for 'https://97cdf725d3395a6b62805b85760906d122321d22@github.com': lib/ghpages.mk:101: recipe for target 'ghpages' failed\r\nmake: *** [ghpages] Hangup\r\n``` \r\nany ideas on what the best fix is?",
          "createdAt": "2019-10-04T15:41:37Z",
          "updatedAt": "2019-10-04T15:41:37Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> @chris-wood also CI builds seem to be routinely failing due to ghpages:\r\n\r\nI think it was building the wrong branch. I updated things. Hopefully it's working now!",
          "createdAt": "2019-10-04T15:46:25Z",
          "updatedAt": "2019-10-04T15:46:25Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mjk3NTc0OTA1",
          "commit": {
            "abbreviatedOid": "8c38c39"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Great stuff! Requesting some changes around key rotation frequency, since I think we can probably do better there.",
          "createdAt": "2019-10-04T16:07:20Z",
          "updatedAt": "2019-10-28T16:39:52Z",
          "comments": [
            {
              "originalPosition": 51,
              "body": "This should probably go into the security considerations section, right?",
              "createdAt": "2019-10-04T16:07:20Z",
              "updatedAt": "2019-10-29T12:07:59Z"
            },
            {
              "originalPosition": 99,
              "body": "```suggestion\r\nessentially without providing zero-knowledge proofs that verify the output\r\n```",
              "createdAt": "2019-10-04T16:08:30Z",
              "updatedAt": "2019-10-29T12:07:59Z"
            },
            {
              "originalPosition": 74,
              "body": "```suggestion\r\n- if d == 0: C = ab*G; else: C is sampled uniformly GG(sp).\r\n```",
              "createdAt": "2019-10-28T16:29:31Z",
              "updatedAt": "2019-10-29T12:07:59Z"
            },
            {
              "originalPosition": 112,
              "body": "```suggestion\r\nprover's (P) secret key, and Y = k*G be its corresponding 'public key' for some\r\n```",
              "createdAt": "2019-10-28T16:30:20Z",
              "updatedAt": "2019-10-29T12:07:59Z"
            },
            {
              "originalPosition": 183,
              "body": "```suggestion\r\nprotocol only. See the paper for further details.\r\n```",
              "createdAt": "2019-10-28T16:31:28Z",
              "updatedAt": "2019-10-29T12:07:59Z"
            },
            {
              "originalPosition": 266,
              "body": "```suggestion\r\nAs mentioned previously, the hardness of our (V)OPRF protocol depends on the\r\n```",
              "createdAt": "2019-10-28T16:32:16Z",
              "updatedAt": "2019-10-29T12:07:59Z"
            },
            {
              "originalPosition": 261,
              "body": "```suggestion\r\nThis section discusses OPRF usage implications, along with some suggestions\r\n```",
              "createdAt": "2019-10-28T16:32:34Z",
              "updatedAt": "2019-10-29T12:07:59Z"
            },
            {
              "originalPosition": 290,
              "body": "```suggestion\r\n(for example, {{BG04}} and {{Cheon06}}). In summary, known attacks reduce the\r\n```",
              "createdAt": "2019-10-28T16:32:56Z",
              "updatedAt": "2019-10-29T12:07:59Z"
            },
            {
              "originalPosition": 335,
              "body": "```suggestion\r\nThis implies that any instantiation of H1 must be pre-image and collision\r\n```",
              "createdAt": "2019-10-28T16:34:14Z",
              "updatedAt": "2019-10-29T12:07:59Z"
            },
            {
              "originalPosition": 426,
              "body": "```suggestion\r\nThe VOPRF variant helps mitigate this attack since each server evaluation can be bound to a known public key. However,\r\n```",
              "createdAt": "2019-10-28T16:36:31Z",
              "updatedAt": "2019-10-29T12:07:59Z"
            },
            {
              "originalPosition": 427,
              "body": "```suggestion\r\n\r\n```",
              "createdAt": "2019-10-28T16:36:43Z",
              "updatedAt": "2019-10-29T12:07:59Z"
            },
            {
              "originalPosition": 433,
              "body": "Could we mention some form of key transparency as a mitigation here, too?",
              "createdAt": "2019-10-28T16:37:34Z",
              "updatedAt": "2019-10-29T12:07:59Z"
            },
            {
              "originalPosition": 462,
              "body": "```suggestion\r\nTo combat attacks of this nature, regular key rotation\r\n```",
              "createdAt": "2019-10-28T16:37:58Z",
              "updatedAt": "2019-10-29T12:07:59Z"
            },
            {
              "originalPosition": 464,
              "body": "I wouldn't call this \"fairly regular\" -- maybe we can make it on the order of days or weeks, like TLS STEKs?",
              "createdAt": "2019-10-28T16:38:23Z",
              "updatedAt": "2019-10-29T12:07:59Z"
            },
            {
              "originalPosition": 470,
              "body": "```suggestion\r\nsituations where client privacy is paramount, longer key cycles should be\r\n```",
              "createdAt": "2019-10-28T16:38:45Z",
              "updatedAt": "2019-10-29T12:07:59Z"
            },
            {
              "originalPosition": 471,
              "body": "As above, I think some form of transparency might help achieve high update frequencies without compromising client privacy. ",
              "createdAt": "2019-10-28T16:39:21Z",
              "updatedAt": "2019-10-29T12:07:59Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzA4MDI2NDc1",
          "commit": {
            "abbreviatedOid": "2fa4d9a"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-10-28T17:35:14Z",
          "updatedAt": "2019-10-28T17:35:14Z",
          "comments": [
            {
              "originalPosition": 433,
              "body": "Yeah I can add this in.",
              "createdAt": "2019-10-28T17:35:14Z",
              "updatedAt": "2019-10-29T12:07:59Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzA4MDI2OTYy",
          "commit": {
            "abbreviatedOid": "2fa4d9a"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-10-28T17:35:58Z",
          "updatedAt": "2019-10-28T17:35:58Z",
          "comments": [
            {
              "originalPosition": 464,
              "body": "Days seem too short. We could possibly go to 1 week, but I think this is highly dependent on the number of users as well?",
              "createdAt": "2019-10-28T17:35:58Z",
              "updatedAt": "2019-10-29T12:07:59Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzA4NDUzMzI0",
          "commit": {
            "abbreviatedOid": "2fa4d9a"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-10-29T11:57:37Z",
          "updatedAt": "2019-10-29T11:57:37Z",
          "comments": [
            {
              "originalPosition": 471,
              "body": "I'll mention key transparency, but I still think that high update frequencies are going to be a problem? Key transparency just allows the client to check that the server is not mis-behaving right? ",
              "createdAt": "2019-10-29T11:57:37Z",
              "updatedAt": "2019-10-29T12:07:59Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzEwNzk3NjA1",
          "commit": {
            "abbreviatedOid": "93a5742"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-11-03T03:09:25Z",
          "updatedAt": "2019-11-03T03:09:25Z",
          "comments": []
        }
      ]
    },
    {
      "number": 57,
      "id": "MDExOlB1bGxSZXF1ZXN0MzI1MzIyOTkx",
      "title": "Protocol integration suggestions",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/57",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Branch to be merged into alxdavids/sec-considerations branch as it depends on some changes in that branch.\r\n\r\nChanges:\r\n- Changes to some of the (V)OPRF functions\r\n- Suggestions for implementing OPRF evaluation as part of wider protocol\r\n\r\n@chris-wood are these recommendations for protocol integration helpful?",
      "createdAt": "2019-10-07T14:12:04Z",
      "updatedAt": "2020-11-10T14:41:14Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "alxdavids/sec-considerations",
      "baseRefOid": "93a5742788681488121cbfefa8510be6513183bb",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/protocol-integrations",
      "headRefOid": "5a4c4ec0655abe1463b3f5325062357fa34e6881",
      "closedAt": "2019-11-04T20:27:00Z",
      "mergedAt": "2019-11-04T20:27:00Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "b2cab8dfeb8450579759a97a4dd84f82d8332bc7"
      },
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "@chris-wood Yeah I like your suggestions, happy to move things around and update the PR",
          "createdAt": "2019-10-28T17:43:57Z",
          "updatedAt": "2019-10-28T17:43:57Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "Okay I've reordered the embedding section into the protocol specification section now @chris-wood, and removed redundant sections. Does this look better now?",
          "createdAt": "2019-10-29T12:41:21Z",
          "updatedAt": "2019-10-29T12:41:21Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzA3OTkwODkw",
          "commit": {
            "abbreviatedOid": "49194b6"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "The \"Recommended protocol integration\" section seems to contain a lot of redundant information that is probably better put elsewhere, e.g., in the core protocol description or in the security considerations. What do you think, @alxdavids?",
          "createdAt": "2019-10-28T16:42:52Z",
          "updatedAt": "2019-10-28T16:55:47Z",
          "comments": [
            {
              "originalPosition": 46,
              "body": "```suggestion\r\nprotocol takes place between a verifier (V) and a prover (P). Commonly, V is a client and P is a server, and so we use these names interchangeably throughout.\r\n```",
              "createdAt": "2019-10-28T16:42:52Z",
              "updatedAt": "2019-11-04T20:26:47Z"
            },
            {
              "originalPosition": 49,
              "body": "```suggestion\r\nholds a secret key k for a PRF. The protocol allows the client to learn PRF evaluations\r\n```",
              "createdAt": "2019-10-28T16:43:00Z",
              "updatedAt": "2019-11-04T20:26:47Z"
            },
            {
              "originalPosition": 50,
              "body": "```suggestion\r\non chosen inputs x in such a way that the server learns nothing of x.\r\n```",
              "createdAt": "2019-10-28T16:43:31Z",
              "updatedAt": "2019-11-04T20:26:47Z"
            },
            {
              "originalPosition": 85,
              "body": "Can we use `DST` instead of `lbl` (to match hash-to-curve)?",
              "createdAt": "2019-10-28T16:44:07Z",
              "updatedAt": "2019-11-04T20:26:47Z"
            },
            {
              "originalPosition": 139,
              "body": "```suggestion\r\n- VOPRF_Setup(l): Run (k,p) = OPRF_Setup(l), compute Y = k*G, where G is a\r\n```",
              "createdAt": "2019-10-28T16:45:08Z",
              "updatedAt": "2019-11-04T20:26:47Z"
            },
            {
              "originalPosition": 139,
              "body": "(We should probably apply this to all expressions.)",
              "createdAt": "2019-10-28T16:46:22Z",
              "updatedAt": "2019-11-04T20:26:47Z"
            },
            {
              "originalPosition": 303,
              "body": "This usage of HMAC is interesting! Could we not get the same result by computing H(lbl || x .. N)?",
              "createdAt": "2019-10-28T16:47:53Z",
              "updatedAt": "2019-11-04T20:26:47Z"
            },
            {
              "originalPosition": 470,
              "body": "```suggestion\r\nsince {{JKK14}} provides a security proof of the VOPRF construction in the UC\r\n```",
              "createdAt": "2019-10-28T16:48:28Z",
              "updatedAt": "2019-11-04T20:26:47Z"
            },
            {
              "originalPosition": 474,
              "body": "```suggestion\r\nThus, it is RECOMMENDED that any protocol that wishes to include an OPRF stage\r\n```",
              "createdAt": "2019-10-28T16:48:49Z",
              "updatedAt": "2019-11-04T20:26:47Z"
            },
            {
              "originalPosition": 666,
              "body": "```suggestion\r\nimplies that any instantiation of H1 must be pre-image and collision resistant.\r\n```",
              "createdAt": "2019-10-28T16:49:28Z",
              "updatedAt": "2019-11-04T20:26:47Z"
            },
            {
              "originalPosition": 541,
              "body": "Perhaps we should say these bytes SHOULD be uniformly distributed, and then describe what happens if they're not? (I'd move this to the security considerations, actually.)",
              "createdAt": "2019-10-28T16:51:26Z",
              "updatedAt": "2019-11-04T20:26:47Z"
            },
            {
              "originalPosition": 544,
              "body": "What's the \"utility of client privacy\"?",
              "createdAt": "2019-10-28T16:51:36Z",
              "updatedAt": "2019-11-04T20:26:47Z"
            },
            {
              "originalPosition": 546,
              "body": "I'd drop this section.",
              "createdAt": "2019-10-28T16:51:55Z",
              "updatedAt": "2019-11-04T20:26:47Z"
            },
            {
              "originalPosition": 553,
              "body": "I'd drop this section, too, and maybe replace it with a sentence akin to, \"protocols which embed an OPRF evaluation MUST specify how group elements are encoded.\"",
              "createdAt": "2019-10-28T16:52:29Z",
              "updatedAt": "2019-11-04T20:26:47Z"
            },
            {
              "originalPosition": 568,
              "body": "I think we should drop this section. Maybe it should just be a part of the Privacy pass spec?",
              "createdAt": "2019-10-28T16:53:36Z",
              "updatedAt": "2019-11-04T20:26:47Z"
            },
            {
              "originalPosition": 607,
              "body": "We should mention this in the description of the protocol above! (And then drop this section.)",
              "createdAt": "2019-10-28T16:54:21Z",
              "updatedAt": "2019-11-04T20:26:47Z"
            },
            {
              "originalPosition": 616,
              "body": "Again, I'd prefer this be part of the core protocol description. Maybe we include a \"key identifier\" as part of the server's response?",
              "createdAt": "2019-10-28T16:55:07Z",
              "updatedAt": "2019-11-04T20:26:47Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzA4MDMxMTMw",
          "commit": {
            "abbreviatedOid": "49194b6"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-10-28T17:42:23Z",
          "updatedAt": "2019-10-28T17:42:24Z",
          "comments": [
            {
              "originalPosition": 303,
              "body": "Yeah that would be the same, I was just trying to reinforce the difference between the key and the input?",
              "createdAt": "2019-10-28T17:42:23Z",
              "updatedAt": "2019-11-04T20:26:47Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzExMzM2NDY2",
          "commit": {
            "abbreviatedOid": "20efd12"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-11-04T20:25:38Z",
          "updatedAt": "2019-11-04T20:25:38Z",
          "comments": [
            {
              "originalPosition": 337,
              "body": "```suggestion\r\n 1. DST := \"oprf_derive_output\"\r\n```",
              "createdAt": "2019-11-04T20:25:38Z",
              "updatedAt": "2019-11-04T20:26:47Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzExMzM2NTQ0",
          "commit": {
            "abbreviatedOid": "20efd12"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2019-11-04T20:25:46Z",
          "updatedAt": "2019-11-04T20:25:47Z",
          "comments": [
            {
              "originalPosition": 338,
              "body": "```suggestion\r\n 2. dk := H_2(DST, x .. N)\r\n```",
              "createdAt": "2019-11-04T20:25:46Z",
              "updatedAt": "2019-11-04T20:26:47Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzExMzM2OTUx",
          "commit": {
            "abbreviatedOid": "20efd12"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-11-04T20:26:29Z",
          "updatedAt": "2019-11-04T20:26:29Z",
          "comments": []
        }
      ]
    },
    {
      "number": 59,
      "id": "MDExOlB1bGxSZXF1ZXN0MzI2NzcwNDE1",
      "title": "Update batching section",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/59",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "For #56:\r\n- More specificity on rejection sampling\r\n- Add batched unblinding algorithm",
      "createdAt": "2019-10-10T14:34:15Z",
      "updatedAt": "2020-11-10T14:41:09Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "a920c2292f56231410576eadf10071a8791a4749",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/update-batching",
      "headRefOid": "ce69d7c7f7cd2d734bcbd5393a07bc8661b73781",
      "closedAt": "2019-11-03T03:16:55Z",
      "mergedAt": "2019-11-03T03:16:55Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "864cc76655ee6fa6ec639140786eade6edad1479"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzEwNzk3Njk4",
          "commit": {
            "abbreviatedOid": "6931fc2"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2019-11-03T03:14:49Z",
          "updatedAt": "2019-11-03T03:14:49Z",
          "comments": []
        }
      ]
    },
    {
      "number": 60,
      "id": "MDExOlB1bGxSZXF1ZXN0MzI2NzgwOTE0",
      "title": "Update OPRF_Finalize algorithm",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/60",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "It is helpful in some applications to allow finalization over specific data. This change is based on the existing PR for protocol integrations and so needs to be merged into that branch before master.\r\n\r\nChanges:\r\n- Allows finalization over auxiliary data",
      "createdAt": "2019-10-10T14:54:19Z",
      "updatedAt": "2020-11-10T14:41:14Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "alxdavids/protocol-integrations",
      "baseRefOid": "c69e67c6364a0308315763f9c6c5c703519bb16e",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/voprf-finalize",
      "headRefOid": "9973aae75782b7ccd8a8893cf8e3068fa809e2ea",
      "closedAt": "2019-11-04T20:24:05Z",
      "mergedAt": "2019-11-04T20:24:05Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "20efd124e504100d1425a3d7473720fb295473d1"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 61,
      "id": "MDExOlB1bGxSZXF1ZXN0MzM2NDYyNTEw",
      "title": "Alxdavids/sec considerations",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/61",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2019-11-04T20:28:21Z",
      "updatedAt": "2020-11-10T14:41:15Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "864cc76655ee6fa6ec639140786eade6edad1479",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/sec-considerations",
      "headRefOid": "13fb2369789e2fdddb7bb1da3dacdb763af75cec",
      "closedAt": "2019-11-04T20:30:33Z",
      "mergedAt": "2019-11-04T20:30:33Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "115dce59acdbacf88cb2a2820a05f4c96a05b8aa"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 63,
      "id": "MDExOlB1bGxSZXF1ZXN0MzcxMzUxNjEx",
      "title": "Specify modifications in batching paradigm",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/63",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #62.\r\n\r\n- Previously batched versions of VOPRF_Eval, VOPRF_Blind and VOPRF_Unblind were not specified.\r\n- This change provides descriptions accepting with a modified API to allow for batched inputs/outputs.\r\n- Also change the way that we describe inputs and outputs to be more generic.\r\n- Describe conventions around the way that we talk about groups.\r\n- Provide some more context for notation that is used.",
      "createdAt": "2020-02-05T12:38:59Z",
      "updatedAt": "2020-03-01T21:14:36Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "9a20d27d05a23d6d950ff0b4e6d9d20b9130f30f",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/fix-batching-algorithms",
      "headRefOid": "19ae93a00dd82602d15decbe99a1263ad580d15d",
      "closedAt": "2020-03-01T21:14:36Z",
      "mergedAt": "2020-03-01T21:14:36Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "4ca97f73319a737e081b67bb14e1ea5ef624bdfd"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzOTUyNzAz",
          "commit": {
            "abbreviatedOid": "2915cd1"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-02-05T18:44:34Z",
          "updatedAt": "2020-03-01T21:14:07Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\ndocname: draft-irtf-cfrg-voprf-latest\r\n```",
              "createdAt": "2020-02-05T18:44:35Z",
              "updatedAt": "2020-03-01T21:14:27Z"
            }
          ]
        }
      ]
    },
    {
      "number": 64,
      "id": "MDExOlB1bGxSZXF1ZXN0MzcxMzk4NTEw",
      "title": "Update ciphersuites",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/64",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "- Specify OPRF ciphersuites explicitly\r\n- Use SSWU for P384\r\n- Update DST used for h2c\r\n",
      "createdAt": "2020-02-05T14:19:22Z",
      "updatedAt": "2020-11-10T14:41:16Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "9a20d27d05a23d6d950ff0b4e6d9d20b9130f30f",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/fix-ciphersuites",
      "headRefOid": "01f2ab25140a0c8e84f29f275896752c08f683e4",
      "closedAt": "2020-03-01T19:30:11Z",
      "mergedAt": "2020-03-01T19:30:11Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "4ed4aace32bef9360c241fb5d6ffc2cdcf2cdc23"
      },
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "Updated, I'll merge if you're happy.",
          "createdAt": "2020-02-07T12:14:29Z",
          "updatedAt": "2020-02-07T12:14:29Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzOTQ5MzQ2",
          "commit": {
            "abbreviatedOid": "93a6ccf"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thanks for adding these! Looks good pending comments and question.",
          "createdAt": "2020-02-05T18:39:23Z",
          "updatedAt": "2020-02-05T18:40:07Z",
          "comments": [
            {
              "originalPosition": 66,
              "body": "Should we replace \"OPRF\" and \"VOPRF\" in the DST strings with \"RFCXXX-OPRF\" or \"RFCXXX-VOPRF\" (resp.)?",
              "createdAt": "2020-02-05T18:39:23Z",
              "updatedAt": "2020-02-07T12:17:32Z"
            },
            {
              "originalPosition": 10,
              "body": "```suggestion\r\n  - hash-to-curve DST: \"OPRF-curve448-SHA512-SSWU-RO-\"\r\n```\r\n\r\n(here and elsewhere)",
              "createdAt": "2020-02-05T18:39:47Z",
              "updatedAt": "2020-02-07T12:17:32Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1MTE0Nzc2",
          "commit": {
            "abbreviatedOid": "93a6ccf"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-02-07T12:09:46Z",
          "updatedAt": "2020-02-07T12:09:47Z",
          "comments": [
            {
              "originalPosition": 66,
              "body": "Yeah I think that's a good idea.",
              "createdAt": "2020-02-07T12:09:46Z",
              "updatedAt": "2020-02-07T12:17:32Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1MjM4MzE3",
          "commit": {
            "abbreviatedOid": "01f2ab2"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2020-02-07T15:32:19Z",
          "updatedAt": "2020-02-07T15:32:23Z",
          "comments": [
            {
              "originalPosition": 79,
              "body": "We should probably keep the JSON representation elsewhere, i.e., not in the main document. Can we reformat this and drop a pointer to a JSON file, perhaps. stored in this repo?",
              "createdAt": "2020-02-07T15:32:19Z",
              "updatedAt": "2020-02-07T15:32:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MzY2MTI3",
          "commit": {
            "abbreviatedOid": "01f2ab2"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-02-27T01:47:38Z",
          "updatedAt": "2020-02-27T01:47:38Z",
          "comments": [
            {
              "originalPosition": 512,
              "body": "Can we remove these, and then make issues for these vectors?",
              "createdAt": "2020-02-27T01:47:38Z",
              "updatedAt": "2020-02-27T01:47:38Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2ODc4MjI5",
          "commit": {
            "abbreviatedOid": "01f2ab2"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-03-01T18:52:10Z",
          "updatedAt": "2020-03-01T18:52:11Z",
          "comments": [
            {
              "originalPosition": 79,
              "body": "This change is dealt with in #65, I can merge that branch into this one if you think that would be better?",
              "createdAt": "2020-03-01T18:52:11Z",
              "updatedAt": "2020-03-01T18:52:11Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2ODc4MjM1",
          "commit": {
            "abbreviatedOid": "01f2ab2"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-03-01T18:52:18Z",
          "updatedAt": "2020-03-01T18:52:18Z",
          "comments": [
            {
              "originalPosition": 512,
              "body": "Same as above.",
              "createdAt": "2020-03-01T18:52:18Z",
              "updatedAt": "2020-03-01T18:52:18Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2ODgwNjE0",
          "commit": {
            "abbreviatedOid": "01f2ab2"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-03-01T19:30:34Z",
          "updatedAt": "2020-03-01T19:30:34Z",
          "comments": [
            {
              "originalPosition": 79,
              "body": "Either works for me! Let\u2019s just merge this and fix after. ",
              "createdAt": "2020-03-01T19:30:34Z",
              "updatedAt": "2020-03-01T19:30:34Z"
            }
          ]
        }
      ]
    },
    {
      "number": 65,
      "id": "MDExOlB1bGxSZXF1ZXN0MzcyNTIzMzIy",
      "title": "Add test vectors generated from PoC",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/65",
      "state": "CLOSED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "- Uses test vectors generated here: https://github.com/alxdavids/voprf-poc/tree/master/test-vectors\r\n- Still need test vectors for curve448",
      "createdAt": "2020-02-07T17:34:52Z",
      "updatedAt": "2020-11-10T14:41:20Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "b9e0a19edea436e815858a357ea7ecc58c704feb",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/test-vectors",
      "headRefOid": "f4573f1dcdf5ec85a4d2c985913b75fc3aaa9cc7",
      "closedAt": "2020-03-03T10:41:42Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "This fixes #51 ",
          "createdAt": "2020-02-10T11:33:54Z",
          "updatedAt": "2020-02-10T11:33:54Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "@chris-wood This should be ready to go now.",
          "createdAt": "2020-03-02T10:53:39Z",
          "updatedAt": "2020-03-02T10:53:39Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "Sure, yeah happy to approach this at a later date. Will create a separate PR to remove everything.",
          "createdAt": "2020-03-03T10:41:42Z",
          "updatedAt": "2020-03-03T10:41:42Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3MjY3Mjk3",
          "commit": {
            "abbreviatedOid": "f4573f1"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Can we remove all vectors until the document is more stable? (Then we can talk about the formatting and tooling around them.)",
          "createdAt": "2020-03-02T15:02:56Z",
          "updatedAt": "2020-03-02T15:03:47Z",
          "comments": [
            {
              "originalPosition": 2285,
              "body": "What are the private and public keys for this test vector?",
              "createdAt": "2020-03-02T15:02:56Z",
              "updatedAt": "2020-03-02T15:03:48Z"
            }
          ]
        }
      ]
    },
    {
      "number": 67,
      "id": "MDExOlB1bGxSZXF1ZXN0MzczMDg1MDYw",
      "title": "Update DLEQ challenge sampling",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/67",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "- Use HKDF-Expand-SHA512 for sampling scalars in DLEQ\r\n- Fixes #66",
      "createdAt": "2020-02-10T11:33:21Z",
      "updatedAt": "2020-11-10T14:41:17Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "alxdavids/fix-batching-algorithms",
      "baseRefOid": "2915cd17b2cfd9daf713bc37db2a9fe8ae20348c",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/dleq-chl-sample",
      "headRefOid": "15a75d20e246c763b02496e28341b92b5ec0a909",
      "closedAt": "2020-03-02T15:01:03Z",
      "mergedAt": "2020-03-02T15:01:03Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "0c25f28c4e4060255c68c9e44cf6b68a234c6e29"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Approved pending one question above (hash_to_field)!",
          "createdAt": "2020-03-01T21:13:38Z",
          "updatedAt": "2020-03-01T21:13:38Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MzY4NjEx",
          "commit": {
            "abbreviatedOid": "15a75d2"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-02-27T01:56:28Z",
          "updatedAt": "2020-03-01T21:13:19Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "We can probably make this text a bit more concise (in the future). I'll suggest a PR after we merge this!",
              "createdAt": "2020-02-27T01:56:29Z",
              "updatedAt": "2020-03-01T21:13:19Z"
            },
            {
              "originalPosition": 360,
              "body": "Can we re-use hash_to_field from the hash-to-curve draft?",
              "createdAt": "2020-02-27T02:10:46Z",
              "updatedAt": "2020-03-01T21:13:19Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3MDk1NjUx",
          "commit": {
            "abbreviatedOid": "15a75d2"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-03-02T10:34:08Z",
          "updatedAt": "2020-03-02T10:34:08Z",
          "comments": [
            {
              "originalPosition": 360,
              "body": "I think we can, but I was waiting for more detailed feedback on the usage of that function before we adopted it here.What do you think?",
              "createdAt": "2020-03-02T10:34:08Z",
              "updatedAt": "2020-03-02T10:34:08Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3MjY1Njg2",
          "commit": {
            "abbreviatedOid": "15a75d2"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-03-02T15:00:57Z",
          "updatedAt": "2020-03-02T15:00:58Z",
          "comments": [
            {
              "originalPosition": 360,
              "body": "Works for me! (Let's merge to keep the ball rolling.)",
              "createdAt": "2020-03-02T15:00:58Z",
              "updatedAt": "2020-03-02T15:00:58Z"
            }
          ]
        }
      ]
    },
    {
      "number": 68,
      "id": "MDExOlB1bGxSZXF1ZXN0MzgyMDk3OTEz",
      "title": "Drop OPRF/VOPRF prefix (as it's implied from document context).",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/68",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-03-01T21:33:28Z",
      "updatedAt": "2020-11-10T14:41:19Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "4ca97f73319a737e081b67bb14e1ea5ef624bdfd",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/notation",
      "headRefOid": "424490259a30443a98bf538c791f04dfcbeb0a94",
      "closedAt": "2020-03-02T10:48:24Z",
      "mergedAt": "2020-03-02T10:48:24Z",
      "mergedBy": "alxdavids",
      "mergeCommit": {
        "oid": "b9e0a19edea436e815858a357ea7ecc58c704feb"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3MDk0NTk0",
          "commit": {
            "abbreviatedOid": "4244902"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-03-02T10:32:25Z",
          "updatedAt": "2020-03-02T10:32:25Z",
          "comments": []
        }
      ]
    },
    {
      "number": 69,
      "id": "MDExOlB1bGxSZXF1ZXN0MzgyODc4NDQ1",
      "title": "Remove test vectors and add contributors section",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/69",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "- Remove test vectors section until we have a more stable version of the draft\r\n- Add section with contributors to draft\r\n- Wrap all lines at 72 characters",
      "createdAt": "2020-03-03T10:51:58Z",
      "updatedAt": "2020-11-10T14:41:22Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "b9e0a19edea436e815858a357ea7ecc58c704feb",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/remove-test-vectors",
      "headRefOid": "6e59e95cd4535d06e41340b59af3c6d2d8b17d19",
      "closedAt": "2020-03-03T13:46:42Z",
      "mergedAt": "2020-03-03T13:46:42Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "2fc87ef77bf9c5604d8d29b6da7561539d3ff40e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3OTg4OTky",
          "commit": {
            "abbreviatedOid": "6e59e95"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-03-03T13:46:33Z",
          "updatedAt": "2020-03-03T13:46:33Z",
          "comments": []
        }
      ]
    },
    {
      "number": 70,
      "id": "MDExOlB1bGxSZXF1ZXN0MzgzODY2MTEy",
      "title": "Add domain separation text.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/70",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-03-04T20:49:40Z",
      "updatedAt": "2020-11-10T14:41:04Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "2fc87ef77bf9c5604d8d29b6da7561539d3ff40e",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/domain-separation",
      "headRefOid": "98655424d93052d42723bfefcb4e0a8a405d2b04",
      "closedAt": "2020-03-06T11:24:49Z",
      "mergedAt": "2020-03-06T11:24:49Z",
      "mergedBy": "alxdavids",
      "mergeCommit": {
        "oid": "17375ecdb22bca3ba3f6ef890733723c6f1e5285"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwMjU0NTgz",
          "commit": {
            "abbreviatedOid": "9865542"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-03-06T11:24:44Z",
          "updatedAt": "2020-03-06T11:24:44Z",
          "comments": []
        }
      ]
    },
    {
      "number": 71,
      "id": "MDExOlB1bGxSZXF1ZXN0MzgzODY3ODk2",
      "title": "Remove client/server integration advice.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/71",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Upon re-review, this seems to distract from the core of this document. Maybe we can move this the PrivacyPass document? (I note that neither hash-to-curve nor HPKE have such integration advice. They just provide the core primitives.) \r\n\r\n@grittygrease, what do you think?",
      "createdAt": "2020-03-04T20:52:11Z",
      "updatedAt": "2020-11-10T14:41:03Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "2fc87ef77bf9c5604d8d29b6da7561539d3ff40e",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/remove-integration",
      "headRefOid": "60718a6e297cb67f784ffd4d5115db5655bb7fca",
      "closedAt": "2020-03-09T09:13:52Z",
      "mergedAt": "2020-03-09T09:13:52Z",
      "mergedBy": "alxdavids",
      "mergeCommit": {
        "oid": "f04dafbd80ded32b3fd3a6fd84d77446dda4a9ae"
      },
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm happy with removing this",
          "createdAt": "2020-03-06T11:24:11Z",
          "updatedAt": "2020-03-06T11:24:11Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwMjU0MTAw",
          "commit": {
            "abbreviatedOid": "60718a6"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-03-06T11:23:47Z",
          "updatedAt": "2020-03-06T11:23:47Z",
          "comments": []
        }
      ]
    },
    {
      "number": 72,
      "id": "MDExOlB1bGxSZXF1ZXN0Mzg1NDY5NDgw",
      "title": "Certify public key (fixes #29)",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/72",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-03-09T09:19:04Z",
      "updatedAt": "2020-03-09T12:25:05Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "f04dafbd80ded32b3fd3a6fd84d77446dda4a9ae",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/certify-public-key",
      "headRefOid": "58b9e8544733d6d0af7c248e4c35c1ef4d89244a",
      "closedAt": "2020-03-09T12:25:05Z",
      "mergedAt": "2020-03-09T12:25:05Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "66bddb16c38b581898115a3da015df6862f75cef"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxMTE4OTQw",
          "commit": {
            "abbreviatedOid": "58b9e85"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-03-09T12:25:00Z",
          "updatedAt": "2020-03-09T12:25:00Z",
          "comments": []
        }
      ]
    },
    {
      "number": 73,
      "id": "MDExOlB1bGxSZXF1ZXN0Mzg1NDc0MDk0",
      "title": "Update changelog for submission",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/73",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Will submit once this PR is merged.",
      "createdAt": "2020-03-09T09:28:30Z",
      "updatedAt": "2020-03-09T12:25:48Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "alxdavids/certify-public-key",
      "baseRefOid": "58b9e8544733d6d0af7c248e4c35c1ef4d89244a",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/update-changelog",
      "headRefOid": "fac1fb0928f96ad955a889b7451ddc880ef3d7f4",
      "closedAt": "2020-03-09T12:25:48Z",
      "mergedAt": "2020-03-09T12:25:48Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "34ee80c2c9a709b2babd577d6dfe59583981c68c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxMTE5Mzkz",
          "commit": {
            "abbreviatedOid": "fac1fb0"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-03-09T12:25:43Z",
          "updatedAt": "2020-03-09T12:25:43Z",
          "comments": []
        }
      ]
    },
    {
      "number": 74,
      "id": "MDExOlB1bGxSZXF1ZXN0Mzg1NjA5MTA5",
      "title": "Update changelog (merge into master)",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/74",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Target branch in #73 should have been master.",
      "createdAt": "2020-03-09T14:07:19Z",
      "updatedAt": "2020-11-10T14:41:23Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "66bddb16c38b581898115a3da015df6862f75cef",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/update-changelog",
      "headRefOid": "774128d2d64244602f117ec2d3e1d6c1066ac66c",
      "closedAt": "2020-03-09T14:07:53Z",
      "mergedAt": "2020-03-09T14:07:53Z",
      "mergedBy": "alxdavids",
      "mergeCommit": {
        "oid": "7f5c1eef22bd29539f48ca1127d3dcad354e97d3"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 75,
      "id": "MDExOlB1bGxSZXF1ZXN0Mzg1NjIwODU0",
      "title": "Changes before release-03",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/75",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "New document version posted, these changes were made before submission:\r\n\r\n- I noticed that the protocol integration section was replicated in Section 4 and so I removed this before posting.\r\n- Also fixed a section reference",
      "createdAt": "2020-03-09T14:28:05Z",
      "updatedAt": "2020-11-10T14:41:23Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "7f5c1eef22bd29539f48ca1127d3dcad354e97d3",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/release-03",
      "headRefOid": "b29ddafae20d94b6298a209db67ce252ff8ad89d",
      "closedAt": "2020-03-09T14:29:50Z",
      "mergedAt": "2020-03-09T14:29:50Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "3752295a31bf2b6bd971fff159cc11190cee4da9"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxMjMxMDcz",
          "commit": {
            "abbreviatedOid": "b29ddaf"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-03-09T14:29:33Z",
          "updatedAt": "2020-03-09T14:29:33Z",
          "comments": []
        }
      ]
    },
    {
      "number": 78,
      "id": "MDExOlB1bGxSZXF1ZXN0NDI0ODAwMTgy",
      "title": "Some clarifications, but still needs more work to be done.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/78",
      "state": "MERGED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Some comments for improving draft.\r\nHappy to hear your thoughts.",
      "createdAt": "2020-05-28T23:40:25Z",
      "updatedAt": "2020-06-02T11:48:20Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "3752295a31bf2b6bd971fff159cc11190cee4da9",
      "headRepository": "armfazh/draft-irtf-cfrg-voprf",
      "headRefName": "armfazh/comments",
      "headRefOid": "4c5177c4055df642e29761817a679b0290169087",
      "closedAt": "2020-06-02T11:48:20Z",
      "mergedAt": "2020-06-02T11:48:20Z",
      "mergedBy": "alxdavids",
      "mergeCommit": {
        "oid": "5d53337a94898f438d1658c1728d9a7671262612"
      },
      "comments": [
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "Most suggestions were added and some other comments are now tracked as Issues.\r\n",
          "createdAt": "2020-06-01T17:14:19Z",
          "updatedAt": "2020-06-01T17:14:19Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwODY5MTM5",
          "commit": {
            "abbreviatedOid": "23803e9"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Thanks Armando, this is a great start and really helpful. I've left a few comments to address but I think your changes are worthwhile.",
          "createdAt": "2020-05-29T11:28:51Z",
          "updatedAt": "2020-05-29T11:36:17Z",
          "comments": [
            {
              "originalPosition": 75,
              "body": "I think this paragraph can be reworded, but I think it may retain importance for situating the security guarantees provided by the protocol. What do you think @chris-wood? ",
              "createdAt": "2020-05-29T11:28:51Z",
              "updatedAt": "2020-06-01T16:47:15Z"
            },
            {
              "originalPosition": 134,
              "body": "```suggestion\r\n    Output h [if b=false: abort]\r\n```",
              "createdAt": "2020-05-29T11:29:42Z",
              "updatedAt": "2020-06-01T16:47:15Z"
            },
            {
              "originalPosition": 175,
              "body": "```suggestion\r\n  representation of x in GG. To do so, the Verifier requires sampling a blind r, which is a scalar value that must be uniformly sampled from GF(p).\r\n```",
              "createdAt": "2020-05-29T11:30:33Z",
              "updatedAt": "2020-06-01T16:47:15Z"
            },
            {
              "originalPosition": 230,
              "body": "```suggestion\r\nA secure instance includes choosing GG as the group of squares of a finite field FF.\r\n```",
              "createdAt": "2020-05-29T11:31:29Z",
              "updatedAt": "2020-06-01T16:47:15Z"
            },
            {
              "originalPosition": 235,
              "body": "```suggestion\r\nA more efficient and secure way to instantiate the (V)OPRF protocol is using\r\n```",
              "createdAt": "2020-05-29T11:31:45Z",
              "updatedAt": "2020-06-01T16:47:15Z"
            },
            {
              "originalPosition": 235,
              "body": "What does \"more secure\" mean here?",
              "createdAt": "2020-05-29T11:32:27Z",
              "updatedAt": "2020-06-01T16:47:15Z"
            },
            {
              "originalPosition": 172,
              "body": "This isn't strictly true, we require hardness from a different assumption. I think it's best to remove the bit about discrete logarithms for now, and I'll completely rework how the Setup phase occurs.",
              "createdAt": "2020-05-29T11:35:17Z",
              "updatedAt": "2020-06-01T16:47:15Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwOTE5Nzg0",
          "commit": {
            "abbreviatedOid": "23803e9"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-05-29T12:49:25Z",
          "updatedAt": "2020-05-29T12:49:25Z",
          "comments": [
            {
              "originalPosition": 75,
              "body": "Indeed, and it should probably go to the security considerations. Putting it up front can be a bit cumbersome!",
              "createdAt": "2020-05-29T12:49:25Z",
              "updatedAt": "2020-06-01T16:47:15Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwOTIwOTYz",
          "commit": {
            "abbreviatedOid": "23803e9"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-05-29T12:50:55Z",
          "updatedAt": "2020-05-29T12:50:55Z",
          "comments": [
            {
              "originalPosition": 175,
              "body": "I don't think we should take this change, as it seems to prohibit fixed-base blinding. Let's revert to the old definition, which permitted additive and multiplicative blindings?",
              "createdAt": "2020-05-29T12:50:55Z",
              "updatedAt": "2020-06-01T16:47:15Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwOTIyOTQx",
          "commit": {
            "abbreviatedOid": "23803e9"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Looks good overall! I'm requesting changes to address the blinding definition. I'd also like to see us move away from specifics of groups. ",
          "createdAt": "2020-05-29T12:53:38Z",
          "updatedAt": "2020-05-29T12:54:44Z",
          "comments": [
            {
              "originalPosition": 230,
              "body": "Can we do away with this section entirely and just require that groups have prime order, a fixed generator, and can be implemented efficiently? We can then list examples of such groups, ideally in a table with relevant parameters?",
              "createdAt": "2020-05-29T12:53:38Z",
              "updatedAt": "2020-06-01T16:47:15Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMTc4NDE1",
          "commit": {
            "abbreviatedOid": "23803e9"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-05-29T18:11:26Z",
          "updatedAt": "2020-05-29T18:11:27Z",
          "comments": [
            {
              "originalPosition": 75,
              "body": "I set to be removed as is almost duplicated in Line 499.",
              "createdAt": "2020-05-29T18:11:27Z",
              "updatedAt": "2020-06-01T16:47:15Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMTgwNzE3",
          "commit": {
            "abbreviatedOid": "23803e9"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-05-29T18:15:08Z",
          "updatedAt": "2020-05-29T18:15:08Z",
          "comments": [
            {
              "originalPosition": 235,
              "body": "Agree, it does not sound good.",
              "createdAt": "2020-05-29T18:15:08Z",
              "updatedAt": "2020-06-01T16:47:15Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMTgxMDU1",
          "commit": {
            "abbreviatedOid": "23803e9"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-05-29T18:15:41Z",
          "updatedAt": "2020-05-29T18:15:42Z",
          "comments": [
            {
              "originalPosition": 235,
              "body": "```suggestion\r\nA more efficient way to instanciate the (V)OPRF protocol is using\r\n```",
              "createdAt": "2020-05-29T18:15:42Z",
              "updatedAt": "2020-06-01T16:47:15Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMTk4MDA1",
          "commit": {
            "abbreviatedOid": "0fa0c3a"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-05-29T18:40:04Z",
          "updatedAt": "2020-05-29T18:40:04Z",
          "comments": [
            {
              "originalPosition": 172,
              "body": "reverted",
              "createdAt": "2020-05-29T18:40:04Z",
              "updatedAt": "2020-06-01T16:47:15Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMTk4MDc2",
          "commit": {
            "abbreviatedOid": "0fa0c3a"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-05-29T18:40:11Z",
          "updatedAt": "2020-05-29T18:40:11Z",
          "comments": [
            {
              "originalPosition": 175,
              "body": "reverted",
              "createdAt": "2020-05-29T18:40:11Z",
              "updatedAt": "2020-06-01T16:47:15Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxNzQzODI2",
          "commit": {
            "abbreviatedOid": "1830fd0"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good to me. Over to @chris-wood for a last check",
          "createdAt": "2020-06-01T10:31:06Z",
          "updatedAt": "2020-06-01T10:31:06Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxOTI3MzM3",
          "commit": {
            "abbreviatedOid": "1830fd0"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-06-01T15:13:12Z",
          "updatedAt": "2020-06-01T15:19:25Z",
          "comments": [
            {
              "originalPosition": 87,
              "body": "Unrelated to this change, but what is `u` here? Is DST guaranteed to be of size `u`? (2HashDH doesn't specify the hash this way. Maybe we ought to go back to what's in the original paper?)",
              "createdAt": "2020-06-01T15:13:12Z",
              "updatedAt": "2020-06-01T16:47:15Z"
            },
            {
              "originalPosition": 104,
              "body": "```suggestion\r\nLet x be an arbitrary-length byte string representing the verifier's input to the OPRF protocol.\r\n```",
              "createdAt": "2020-06-01T15:13:36Z",
              "updatedAt": "2020-06-01T16:47:15Z"
            },
            {
              "originalPosition": 113,
              "body": "```suggestion\r\nmultiplies the blinded value by its secret key and returns the resulting element. \r\nTo finish the protocol, V then removes its blind and uses H_2 to hash the result (along \r\nwith a domain separating label DST) yielding an output.\r\n```",
              "createdAt": "2020-06-01T15:14:11Z",
              "updatedAt": "2020-06-01T16:47:15Z"
            },
            {
              "originalPosition": 139,
              "body": "```suggestion\r\nDLEQ_Verify) are REQUIRED for verifiability. These steps are\r\n```",
              "createdAt": "2020-06-01T15:14:46Z",
              "updatedAt": "2020-06-01T16:47:16Z"
            },
            {
              "originalPosition": 159,
              "body": "Unrelated to this change, but this doesn't match the diagram, where we output `H_2(DST, ...)` rather than `H_2(dk, ...)`.",
              "createdAt": "2020-06-01T15:15:47Z",
              "updatedAt": "2020-06-01T16:47:16Z"
            },
            {
              "originalPosition": 175,
              "body": "Should we unify around DST instead of `aux`?",
              "createdAt": "2020-06-01T15:16:15Z",
              "updatedAt": "2020-06-01T16:47:16Z"
            },
            {
              "originalPosition": 225,
              "body": "Should we include a table that lists the group (name) and its parameters, e.g., the generator, base field prime order, etc.?",
              "createdAt": "2020-06-01T15:18:13Z",
              "updatedAt": "2020-06-01T16:47:16Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMDIzNDY5",
          "commit": {
            "abbreviatedOid": "4c5177c"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-01T17:06:56Z",
          "updatedAt": "2020-06-01T17:06:57Z",
          "comments": [
            {
              "originalPosition": 159,
              "body": "Tracked on #89 ",
              "createdAt": "2020-06-01T17:06:56Z",
              "updatedAt": "2020-06-01T17:06:57Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMDI1MDMx",
          "commit": {
            "abbreviatedOid": "4c5177c"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-01T17:09:11Z",
          "updatedAt": "2020-06-01T17:09:11Z",
          "comments": [
            {
              "originalPosition": 175,
              "body": "Tracked in #83 ",
              "createdAt": "2020-06-01T17:09:11Z",
              "updatedAt": "2020-06-01T17:09:11Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMDI1OTU5",
          "commit": {
            "abbreviatedOid": "4c5177c"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-01T17:10:30Z",
          "updatedAt": "2020-06-01T17:10:31Z",
          "comments": [
            {
              "originalPosition": 225,
              "body": "Tracked in #90 ",
              "createdAt": "2020-06-01T17:10:30Z",
              "updatedAt": "2020-06-01T17:10:31Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMDI2NDUx",
          "commit": {
            "abbreviatedOid": "4c5177c"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-01T17:11:16Z",
          "updatedAt": "2020-06-01T17:11:17Z",
          "comments": [
            {
              "originalPosition": 87,
              "body": "Tracked in #89 ",
              "createdAt": "2020-06-01T17:11:16Z",
              "updatedAt": "2020-06-01T17:11:17Z"
            }
          ]
        }
      ]
    },
    {
      "number": 91,
      "id": "MDExOlB1bGxSZXF1ZXN0NDI2NTQ5NzE4",
      "title": "Significant API changes",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/91",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The first phase in a large number of changes to the protocol API:\r\n\r\n- Define explicit prime-order group API (#81)\r\n- Use concrete data structures for all types\r\n- Provide Serialization/Deserialization mechanisms for groups (#77)\r\n- Ensure that group elements are not exposed by API\r\n- Removes the Setup algorithm (#88, #82)\r\n- Unifies the DLEQ proof algorithms (#85)\r\n\r\nAddresses: \r\n\r\ncc @armfazh as initial reporter.",
      "createdAt": "2020-06-02T12:23:29Z",
      "updatedAt": "2020-06-04T20:08:24Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "5d53337a94898f438d1658c1728d9a7671262612",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/protocol-api-changes",
      "headRefOid": "375dd77b09152c9ad90fa3b05b094c83081fcba2",
      "closedAt": "2020-06-04T20:08:24Z",
      "mergedAt": "2020-06-04T20:08:24Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "9f736f1b85d8f6d433804a3d300a9981214ebb56"
      },
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "We should merge #92 and #93 into this PR before we eventually merge this into master.",
          "createdAt": "2020-06-03T09:59:09Z",
          "updatedAt": "2020-06-03T13:46:01Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyNjIxNDgy",
          "commit": {
            "abbreviatedOid": "474450d"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Great refactor! I left some comments that I think can make things even more clear. ",
          "createdAt": "2020-06-02T12:24:12Z",
          "updatedAt": "2020-06-03T19:13:03Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Is this your markdown editor? :-)",
              "createdAt": "2020-06-02T12:24:13Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 55,
              "body": "```suggestion\r\n- Addition: For any elements `A` and `B` that are members of the\r\n```",
              "createdAt": "2020-06-02T12:24:48Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 55,
              "body": "I might lift field and group operations to their own paragraph:\r\n\r\n```\r\nThe group operation of `GG` is addition (`+`), wherein given any two members \r\n`A` and `B` in `GG`, `C = A + B` is also a member of the group. Scalar \r\nmultiplication (`*`) is a commutative operator that takes as input an element `r` \r\nfrom the base field `GF(p)` and member of `GG` `A` and produces as output \r\n`A + ... + A` (`r` times), denote `r*A`.\r\n```",
              "createdAt": "2020-06-02T12:30:03Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 62,
              "body": "We use `returns` here and `outputs` above -- perhaps we should unify around one of these verbs?",
              "createdAt": "2020-06-02T12:30:52Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 75,
              "body": "```suggestion\r\n  reverse the mapping. For an example of such a mapping to prime-order (sub)groups of elliptic curves, see\r\n```",
              "createdAt": "2020-06-02T12:31:37Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 78,
              "body": "I'd lift this to be closer to the text that discusses point addition and scalar multiplication.",
              "createdAt": "2020-06-02T12:32:21Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 87,
              "body": "```suggestion\r\nin network-order byte array format for the purpose of providing wherever it is\r\n```",
              "createdAt": "2020-06-02T12:32:49Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 112,
              "body": "A reader might ask, \"what does secure mean?\" -- do we need to clarify?",
              "createdAt": "2020-06-02T12:33:37Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 112,
              "body": "Related, this is just an example, right? If we don't want to standardize/support this group, I'd remove this paragraph entirely.",
              "createdAt": "2020-06-02T12:34:43Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 134,
              "body": "We can probably fold this into the preceding bullet, e.g., \"As an example, `x <- {0,1}^u` denotes sampling `x` uniformly from `{0,1}^u.`\"",
              "createdAt": "2020-06-02T12:35:46Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 161,
              "body": "```suggestion\r\nLet GG be an additive group of prime-order p with the interface defined in\r\n```",
              "createdAt": "2020-06-02T12:36:09Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 169,
              "body": "Did we define EncodeToGroup? Maybe this was meant to be HashToGroup?",
              "createdAt": "2020-06-02T12:36:39Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 180,
              "body": "Did we define the type \"PrivateKey\" yet? If not, I might just make this \"private key\". (Same for PublicKey below.)",
              "createdAt": "2020-06-02T12:47:06Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 184,
              "body": "```suggestion\r\nreferred to as a commitment to the OPRF key `k`. Let x be the verifier's arbitrary-length byte array\r\ninput to the OPRF protocol. We provide an overview of the protocol below as an\r\n```",
              "createdAt": "2020-06-02T12:50:06Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 186,
              "body": "s/API/interface, I think",
              "createdAt": "2020-06-02T12:50:18Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 195,
              "body": "We use \"the verifier\" and \"V\" interchangeably -- can we unify around one or the other? V might be better, assuming we define it appropriately.",
              "createdAt": "2020-06-02T12:57:34Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 198,
              "body": "```suggestion\r\nDST) yielding an output. This flow is illustrated below.\r\n```",
              "createdAt": "2020-06-02T12:57:45Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 230,
              "body": "```suggestion\r\nSteps enclosed in `[[ ]]` are REQUIRED for achieving\r\n```",
              "createdAt": "2020-06-02T12:57:58Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 234,
              "body": "```suggestion\r\nverifiable mode, we assume that P's public key is known by V. \r\n\r\nNote that revealing `Y` does not reveal k by the well-known hardness of the\r\ndiscrete log problem.\r\n```",
              "createdAt": "2020-06-02T12:58:24Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 248,
              "body": "```suggestion\r\nThis output is computed when the client\r\n```",
              "createdAt": "2020-06-02T12:58:48Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 342,
              "body": "What if the server wants to publish `kG` non-serialized? We probably don't need to preclude that.",
              "createdAt": "2020-06-02T12:59:55Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 355,
              "body": "Can we use single-character notation for these? It might be confused with scalar multiplication above (e.g., rA).",
              "createdAt": "2020-06-02T14:33:17Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 355,
              "body": "Alternatively, we remove the shorthand `rA` for scalar multiplication and include the operator `r*A`?",
              "createdAt": "2020-06-03T12:24:40Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 511,
              "body": "```suggestion\r\n  Scalar proof<0...2^16-1>; /* optional */\r\n```\r\n\r\nAnd we should probably state that if proof has non-zero length, then it must consist of exactly two Scalar elements, both of which are length-prefixed.",
              "createdAt": "2020-06-03T12:38:21Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 552,
              "body": "What is the value m here? (Also, is this intended to be TLS-style notation? If so, `m` is the upper bound on the number of bytes possibly stored by `inputs`, which I assume is probably `m * sizeof(ClientInput)`.)",
              "createdAt": "2020-06-03T12:40:51Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 795,
              "body": "Do we want a reference to OPAQUE here? (It'll introduce a cyclical dependency.)",
              "createdAt": "2020-06-03T12:42:04Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 824,
              "body": "```suggestion\r\nTherefore, it may be advantageous to implement the OPRF and VOPRF protocols\r\n```",
              "createdAt": "2020-06-03T12:43:32Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 817,
              "body": "```suggestion\r\nThe advantage of FBB is that it allows the client to\r\n```",
              "createdAt": "2020-06-03T12:43:55Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 825,
              "body": "We use FBB and additive blinding somewhat interchangeably -- can we pick one and stick with it? (I prefer additive!)",
              "createdAt": "2020-06-03T12:44:27Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 865,
              "body": "```suggestion\r\n 3. for i = 0 to m:\r\n```",
              "createdAt": "2020-06-03T18:54:23Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 900,
              "body": "```suggestion\r\n 3. for i = 0 to m:\r\n```",
              "createdAt": "2020-06-03T18:54:55Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 934,
              "body": "```suggestion\r\n    1. if (VerifyProof(public_key, blinded_tokens, ev) == false): ABORT\r\n```\r\n\r\nMaybe we should also define ABORT in some section earlier on?",
              "createdAt": "2020-06-03T18:55:28Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 949,
              "body": "```suggestion\r\nthe commutativity of scalar multiplication in GG. \r\n```",
              "createdAt": "2020-06-03T18:55:58Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 1016,
              "body": "```suggestion\r\n 3.  (a1, a2) = ComputeComposites(\r\n```\r\n\r\nFor camel-case consistency.",
              "createdAt": "2020-06-03T18:56:35Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 1024,
              "body": "In the h2c document, we omit parentheses around `mod p`. Should we do that here?",
              "createdAt": "2020-06-03T18:57:01Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 1052,
              "body": "Perhaps we should explain what verified means? The previous text was maybe a bit too specific, but here I think we swung the other way.",
              "createdAt": "2020-06-03T18:58:20Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 1081,
              "body": "```suggestion\r\n## ComputeComposites\r\n```",
              "createdAt": "2020-06-03T18:58:29Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 1314,
              "body": "```suggestion\r\n 6. Output [GG.Serialize(M), GG.Serialize(Z)]\r\n```\r\n\r\nDo we use list/tuple notation consistently?",
              "createdAt": "2020-06-03T18:59:08Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 1309,
              "body": "```suggestion\r\n          1. i = i-1 # decrement and try again\r\n```",
              "createdAt": "2020-06-03T18:59:18Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 1320,
              "body": "```suggestion\r\n`H_5`. `H_3` and `H_4` are hash functions that map arbitrary\r\n```",
              "createdAt": "2020-06-03T18:59:32Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 1321,
              "body": "What is the output size?",
              "createdAt": "2020-06-03T18:59:54Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 1322,
              "body": "Can we borrow language from h2c for this? Namely, \"should induce an output distribution in GF(GG.Order()) is statistically close to uniformly random.\"",
              "createdAt": "2020-06-03T19:01:29Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MjU4MjQz",
          "commit": {
            "abbreviatedOid": "63368d1"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-04T09:20:57Z",
          "updatedAt": "2020-06-04T09:20:58Z",
          "comments": [
            {
              "originalPosition": 112,
              "body": "You're right, I've just removed it.",
              "createdAt": "2020-06-04T09:20:57Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MjYwMDEy",
          "commit": {
            "abbreviatedOid": "63368d1"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-04T09:23:13Z",
          "updatedAt": "2020-06-04T09:23:13Z",
          "comments": [
            {
              "originalPosition": 195,
              "body": "This is something that is addressed in a later PR so I will leave this for now. Essentially I just do away with all of this and just use `Client` and `Server` as `Verifier` and `Prover` doesn't even make sense in the OPRF case.",
              "createdAt": "2020-06-04T09:23:13Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MjYwNDk4",
          "commit": {
            "abbreviatedOid": "63368d1"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-04T09:23:52Z",
          "updatedAt": "2020-06-04T09:23:52Z",
          "comments": [
            {
              "originalPosition": 342,
              "body": "How would you publish it non-serialized?",
              "createdAt": "2020-06-04T09:23:52Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MjY0MTEw",
          "commit": {
            "abbreviatedOid": "63368d1"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-04T09:28:19Z",
          "updatedAt": "2020-06-04T09:28:20Z",
          "comments": [
            {
              "originalPosition": 355,
              "body": "I've gone through and replaced `rA` notation with `r * A` as I think this is clearer.",
              "createdAt": "2020-06-04T09:28:19Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MjY1MTE5",
          "commit": {
            "abbreviatedOid": "63368d1"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-04T09:29:39Z",
          "updatedAt": "2020-06-04T09:29:40Z",
          "comments": [
            {
              "originalPosition": 552,
              "body": "Ah yes, `m * sizeof(ClientInput)` is correct, I'll change. `m` is some value chosen by the client, wasn't sure how best to articulate this?",
              "createdAt": "2020-06-04T09:29:39Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MjY3NzQ5",
          "commit": {
            "abbreviatedOid": "63368d1"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-04T09:32:54Z",
          "updatedAt": "2020-06-04T09:32:54Z",
          "comments": [
            {
              "originalPosition": 552,
              "body": "I've switched it to `Type x[m]` to indicate a fixed-size array corresponding to a size `m` chosen by the client, and added a clarifying paragraph.",
              "createdAt": "2020-06-04T09:32:54Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MjY4ODEw",
          "commit": {
            "abbreviatedOid": "63368d1"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-04T09:34:14Z",
          "updatedAt": "2020-06-04T09:34:15Z",
          "comments": [
            {
              "originalPosition": 795,
              "body": "Removed",
              "createdAt": "2020-06-04T09:34:14Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MjY4OTU2",
          "commit": {
            "abbreviatedOid": "63368d1"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-04T09:34:26Z",
          "updatedAt": "2020-06-04T09:34:26Z",
          "comments": [
            {
              "originalPosition": 825,
              "body": "Changing to additive and multiplicative",
              "createdAt": "2020-06-04T09:34:26Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NzgyMDAx",
          "commit": {
            "abbreviatedOid": "f04c20b"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I still have some comments, but let's land this now so we can keep the diffs small(er) going forward. I'll file issues for my comments!",
          "createdAt": "2020-06-04T19:56:31Z",
          "updatedAt": "2020-06-04T20:05:55Z",
          "comments": [
            {
              "originalPosition": 59,
              "body": "```suggestion\r\norder of the group. The fundamental group operation is addition (+) Specifically, for any \r\nelements `A` and `B` that are members of the group `GG`, `A + B = B + A` is also a member \r\nof `GG`. Scalar multiplication (*) is an efficient method for repeated addition operations. \r\nGiven a scalar `r` in `GF(p)` and element `A` in `GG`, `r*A = A + ... + A` (`r` times). \r\n```",
              "createdAt": "2020-06-04T19:56:31Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 210,
              "body": "Why not use camel case here?",
              "createdAt": "2020-06-04T19:57:33Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 229,
              "body": "```suggestion\r\nSteps enclosed in `[[ ]]` are REQUIRED for verifiability.\r\n```",
              "createdAt": "2020-06-04T19:57:58Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 234,
              "body": "```suggestion\r\n```",
              "createdAt": "2020-06-04T19:58:24Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 342,
              "body": "As a (stupid) example, consider an app which runs the client and server in the same process. This app wouldn't need to serialize `kG` for the application to use it. Presumably the client could use whatever type `kG` is directly. \r\n\r\nI guess my point is that this is an application specific concern. If an application needs to publish it and send it over the wire, yeah, they'll need to serialize it. But let's not assume that's always the case. ",
              "createdAt": "2020-06-04T20:01:39Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 1052,
              "body": "Is this resolved?",
              "createdAt": "2020-06-04T20:03:50Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            },
            {
              "originalPosition": 1216,
              "body": "```suggestion\r\n`ComputeComposites` is a utility function used in both\r\n```",
              "createdAt": "2020-06-04T20:05:13Z",
              "updatedAt": "2020-06-04T20:07:28Z"
            }
          ]
        }
      ]
    },
    {
      "number": 92,
      "id": "MDExOlB1bGxSZXF1ZXN0NDI3MDk0MzAx",
      "title": "Replace Verifier and Prover references",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/92",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The usage of `Verifier` and `Prover` (or `V` and `P`) is an artifact of only covering the case of VOPRFs. This PR replaces the references with generic `Client` and `Server` references throughout.\r\n\r\ncc @armfazh as initial reporter.\r\n\r\n**This change is based on top of #91, so we should merge this into that PR before we do any merging.**",
      "createdAt": "2020-06-03T09:58:43Z",
      "updatedAt": "2020-06-04T20:10:16Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "alxdavids/protocol-api-changes",
      "baseRefOid": "375dd77b09152c9ad90fa3b05b094c83081fcba2",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/verifier-prover",
      "headRefOid": "4fee087cdda4e7baccc74bb22c344a7785a1528d",
      "closedAt": "2020-06-04T20:10:16Z",
      "mergedAt": "2020-06-04T20:10:16Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "06b69a4bfb7a7de8f39481d10dd9bd203f3b6279"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 93,
      "id": "MDExOlB1bGxSZXF1ZXN0NDI3MjEyNjk5",
      "title": "Remove security parameter",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/93",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "- Remove mention of security parameter (addresses #84, #87)\r\n- Document setup procedure\r\n- Remove protocol overview (superfluous and notation was inconsistent)\r\n- Shorten ciphersuite spec\r\n\r\ncc @armfazh as initial reporter\r\n\r\n**Should be merged into #91 before that change is merged**",
      "createdAt": "2020-06-03T13:45:37Z",
      "updatedAt": "2020-11-10T14:40:22Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "f132e61d52603b5beb9cab08d5a7bd5493746564",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/remove-sec-param",
      "headRefOid": "a77e0d61278e23a9cff2f49cbf36af5389a84060",
      "closedAt": "2020-06-05T14:33:47Z",
      "mergedAt": "2020-06-05T14:33:47Z",
      "mergedBy": "alxdavids",
      "mergeCommit": {
        "oid": "2afa9f9f38b1c0d08bf613e6be50229fbcf2b4f2"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0ODA3NDU5",
          "commit": {
            "abbreviatedOid": "a529938"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Looks good! Left some comments and questions to help clean things up.",
          "createdAt": "2020-06-04T20:34:37Z",
          "updatedAt": "2020-06-04T20:38:24Z",
          "comments": [
            {
              "originalPosition": 63,
              "body": "Why `public_key` for the serialized version and `PK` for the deserialized one?",
              "createdAt": "2020-06-04T20:34:37Z",
              "updatedAt": "2020-06-05T14:33:22Z"
            },
            {
              "originalPosition": 69,
              "body": "This seems like a weird MUST. What if there's an application that genuinely does not require verifiability? I think we should reframe this a bit, e.g., \"Servers that support verifiability MUST make `public_key` available to clients.\" (And I'd drop the serialization requirement at the same time.)",
              "createdAt": "2020-06-04T20:35:03Z",
              "updatedAt": "2020-06-05T14:33:22Z"
            },
            {
              "originalPosition": 179,
              "body": "This section seems to revert to the old scalar multiplication notation. Is that an intentional regression?",
              "createdAt": "2020-06-04T20:36:07Z",
              "updatedAt": "2020-06-05T14:33:22Z"
            },
            {
              "originalPosition": 376,
              "body": "```suggestion\r\ncomputationally difficult to solve in relation to a particular choice of\r\n```",
              "createdAt": "2020-06-04T20:37:00Z",
              "updatedAt": "2020-06-05T14:33:22Z"
            },
            {
              "originalPosition": 379,
              "body": "```suggestion\r\nsecurity parameter `sp`.\r\n```",
              "createdAt": "2020-06-04T20:37:31Z",
              "updatedAt": "2020-06-05T14:33:22Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1MzQyOTE0",
          "commit": {
            "abbreviatedOid": "a529938"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-05T14:17:30Z",
          "updatedAt": "2020-06-05T14:17:30Z",
          "comments": [
            {
              "originalPosition": 179,
              "body": "Will fix",
              "createdAt": "2020-06-05T14:17:30Z",
              "updatedAt": "2020-06-05T14:33:22Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1MzUzNTY4",
          "commit": {
            "abbreviatedOid": "9e47d56"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-06-05T14:29:47Z",
          "updatedAt": "2020-06-05T14:31:10Z",
          "comments": [
            {
              "originalPosition": 135,
              "body": "```suggestion\r\nServers that support verifiability MUST make `PK` available to\r\n```",
              "createdAt": "2020-06-05T14:29:48Z",
              "updatedAt": "2020-06-05T14:33:22Z"
            },
            {
              "originalPosition": 290,
              "body": "```suggestion\r\nZ - PKR = k(P + r * G) - (rk) * G = k * P\r\n```",
              "createdAt": "2020-06-05T14:30:24Z",
              "updatedAt": "2020-06-05T14:33:22Z"
            }
          ]
        }
      ]
    },
    {
      "number": 96,
      "id": "MDExOlB1bGxSZXF1ZXN0NDI4NDc2NjM3",
      "title": "Replace Verifier and Prove language",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/96",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "- Fixes #80\r\n- Verifier and Prover is specific to verifiability mode\r\n- Replace with Client and Server identifiers\r\n\r\nThis change was already reviewed in #92 but merged into the wrong branch. This PR merges it into master.",
      "createdAt": "2020-06-05T14:13:06Z",
      "updatedAt": "2020-11-10T14:40:23Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "9f736f1b85d8f6d433804a3d300a9981214ebb56",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/verifier-prover",
      "headRefOid": "3482ddbbc67cc04daecbb0e3801b605d070e480e",
      "closedAt": "2020-06-05T14:13:21Z",
      "mergedAt": "2020-06-05T14:13:21Z",
      "mergedBy": "alxdavids",
      "mergeCommit": {
        "oid": "f132e61d52603b5beb9cab08d5a7bd5493746564"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 97,
      "id": "MDExOlB1bGxSZXF1ZXN0NDM0NzA1ODg5",
      "title": "Use a random oracle, per the 2HashDH construction.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/97",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "As discussed!\r\n\r\ncc @armfazh ",
      "createdAt": "2020-06-15T18:36:02Z",
      "updatedAt": "2020-11-10T14:40:09Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "3d26e11c8d5ede019c717c381f2178116a57f105",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/random-oracle",
      "headRefOid": "6cccb5f9dd537118cc41ae5c5d8c6747a18d0971",
      "closedAt": "2020-06-16T14:50:07Z",
      "mergedAt": "2020-06-16T14:50:07Z",
      "mergedBy": "alxdavids",
      "mergeCommit": {
        "oid": "e3ac1ba8c964d487f223a6c0cd1e62103ece13e2"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxMzEwNDEz",
          "commit": {
            "abbreviatedOid": "bdbc746"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Some comments",
          "createdAt": "2020-06-16T09:11:13Z",
          "updatedAt": "2020-06-16T13:59:53Z",
          "comments": [
            {
              "originalPosition": 71,
              "body": "Where is this defined? In https://tools.ietf.org/html/rfc8032#section-5.2.2 it is 57 bytes.",
              "createdAt": "2020-06-16T09:11:13Z",
              "updatedAt": "2020-06-16T14:48:13Z"
            },
            {
              "originalPosition": 82,
              "body": "Reference section 2.3.3 in SEC1. Also, does this mean we don't support compressed points?",
              "createdAt": "2020-06-16T09:12:21Z",
              "updatedAt": "2020-06-16T14:48:13Z"
            },
            {
              "originalPosition": 72,
              "body": "My understanding is that SHA512 on its own is not a random oracle because of merkle-damgard length-extension attacks. This is why HMAC was used (which can be shown to be a PRF under PRF assumptions on the compression function). In IKE (https://tools.ietf.org/html/rfc4868), HMAC-SHA*** is used as a PRF.",
              "createdAt": "2020-06-16T09:15:13Z",
              "updatedAt": "2020-06-16T14:48:13Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxNTM5Nzg4",
          "commit": {
            "abbreviatedOid": "bdbc746"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-16T14:03:51Z",
          "updatedAt": "2020-06-16T14:03:51Z",
          "comments": [
            {
              "originalPosition": 72,
              "body": "We use a prefix-free encoding, which is sufficient to make it a RO per [https://link.springer.com/content/pdf/10.1007/11535218_26.pdf].",
              "createdAt": "2020-06-16T14:03:51Z",
              "updatedAt": "2020-06-16T14:48:13Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxNTQwMjIy",
          "commit": {
            "abbreviatedOid": "bdbc746"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-16T14:04:18Z",
          "updatedAt": "2020-06-16T14:04:19Z",
          "comments": [
            {
              "originalPosition": 82,
              "body": "We need to make a decision about compressed or not: I went with not compressed.",
              "createdAt": "2020-06-16T14:04:19Z",
              "updatedAt": "2020-06-16T14:48:13Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxNTQ4NzE3",
          "commit": {
            "abbreviatedOid": "bdbc746"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-16T14:12:59Z",
          "updatedAt": "2020-06-16T14:12:59Z",
          "comments": [
            {
              "originalPosition": 82,
              "body": "Okay let's keep this for now and I'll create an issue to figure this out.",
              "createdAt": "2020-06-16T14:12:59Z",
              "updatedAt": "2020-06-16T14:48:13Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxNTQ5NTE1",
          "commit": {
            "abbreviatedOid": "bdbc746"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-16T14:13:53Z",
          "updatedAt": "2020-06-16T14:13:53Z",
          "comments": [
            {
              "originalPosition": 82,
              "body": "Sounds good!",
              "createdAt": "2020-06-16T14:13:53Z",
              "updatedAt": "2020-06-16T14:48:13Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxNTUwMDA5",
          "commit": {
            "abbreviatedOid": "bdbc746"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-16T14:14:23Z",
          "updatedAt": "2020-06-16T14:14:23Z",
          "comments": [
            {
              "originalPosition": 71,
              "body": "Hmm, I was basing this on RFC7748, which has 56 byte keys. (We're not using the Edwards form here.)",
              "createdAt": "2020-06-16T14:14:23Z",
              "updatedAt": "2020-06-16T14:48:13Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxNTg1ODA4",
          "commit": {
            "abbreviatedOid": "6cccb5f"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-06-16T14:49:20Z",
          "updatedAt": "2020-06-16T14:49:20Z",
          "comments": []
        }
      ]
    },
    {
      "number": 98,
      "id": "MDExOlB1bGxSZXF1ZXN0NDM0ODE3NTkz",
      "title": "Add 256-bit curves back (for OPAQUE).",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/98",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Static DH oracles are not a concern for OPAQUE, so, let's add back these curves!\r\n\r\ncc @armfazh ",
      "createdAt": "2020-06-15T21:35:31Z",
      "updatedAt": "2020-11-10T14:40:10Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "2afa9f9f38b1c0d08bf613e6be50229fbcf2b4f2",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/256-bit-curves",
      "headRefOid": "09d598e0844dc1368c77b762f8433a5f0d1e2e6e",
      "closedAt": "2020-06-16T14:19:35Z",
      "mergedAt": "2020-06-16T14:19:35Z",
      "mergedBy": "alxdavids",
      "mergeCommit": {
        "oid": "3d26e11c8d5ede019c717c381f2178116a57f105"
      },
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "In principle I think this could be okay, but there are some things that I'd like to have discussion on.\r\n\r\n1. Do we want to explicitly change the curve25519 and curve448 ciphersuites to actually reference ristretto and decaf? Effectively what we are currently saying is that you need to create a prime-order group and you can do this using ristretto and decaf, but maybe we need to be more explicit in only supporting these instantiations? The reason being that we may end up with a load of un-interoperable implementations with implementers that interpret the spec differently.\r\n\r\n2. I wonder whether we should be explicit on how many bits of security we are offering with each ciphersuite in the case of a static-DH oracle attack? Because P256 and curve25519 are affected differently, and so a curve25519 implementation would actually retain more security, but this is not obvious when just looking at the two group instantiations in isolation.",
          "createdAt": "2020-06-16T09:09:20Z",
          "updatedAt": "2020-06-16T09:09:20Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> Do we want to explicitly change the curve25519 and curve448 ciphersuites to actually reference ristretto and decaf? Effectively what we are currently saying is that you need to create a prime-order group and you can do this using ristretto and decaf, but maybe we need to be more explicit in only supporting these instantiations? The reason being that we may end up with a load of un-interoperable implementations with implementers that interpret the spec differently.\r\n\r\nThere's no specification for Decaf, yet, so I'm not sure. Until that's true, I'd prefer we have an entirely separate ciphersuite for Ristretto, which uses the FROM_UNIFORM_BYTES function accordingly. \r\n\r\n> I wonder whether we should be explicit on how many bits of security we are offering with each ciphersuite in the case of a static-DH oracle attack? Because P256 and curve25519 are affected differently, and so a curve25519 implementation would actually retain more security, but this is not obvious when just looking at the two group instantiations in isolation.\r\n\r\nI don't think this is necessary. We already discuss it in the security considerations.",
          "createdAt": "2020-06-16T13:39:49Z",
          "updatedAt": "2020-06-16T13:39:49Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxNTU1MjE3",
          "commit": {
            "abbreviatedOid": "09d598e"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Makes sense. I'm going to create a new issue to track talking about the prime-order group instantiation for 25519 and 448 a bit more.",
          "createdAt": "2020-06-16T14:19:30Z",
          "updatedAt": "2020-06-16T14:19:30Z",
          "comments": []
        }
      ]
    },
    {
      "number": 99,
      "id": "MDExOlB1bGxSZXF1ZXN0NDM1MjIyOTM2",
      "title": "Add initial Sage reference implementation",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/99",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "cc @armfazh ",
      "createdAt": "2020-06-16T13:42:29Z",
      "updatedAt": "2020-11-10T14:40:09Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "2afa9f9f38b1c0d08bf613e6be50229fbcf2b4f2",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/poc",
      "headRefOid": "bcb3ab76e1bee991a49de0b5a73604279bfc5ebf",
      "closedAt": "2020-06-16T13:57:00Z",
      "mergedAt": "2020-06-16T13:57:00Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "2ce885137c8e7f0297384da6721ddf6fd744f368"
      },
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "LGTM \ud83d\udc4d I think we can tackle verifiability in future PRs.",
          "createdAt": "2020-06-16T13:50:50Z",
          "updatedAt": "2020-06-16T13:50:50Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxNTIzMDI5",
          "commit": {
            "abbreviatedOid": "bcb3ab7"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-06-16T13:50:32Z",
          "updatedAt": "2020-06-16T13:50:32Z",
          "comments": []
        }
      ]
    },
    {
      "number": 102,
      "id": "MDExOlB1bGxSZXF1ZXN0NDM1ODUxNTIw",
      "title": "Add suffix-free domain separation for H_1.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/102",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "See https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-08#section-10.3.",
      "createdAt": "2020-06-17T13:27:06Z",
      "updatedAt": "2020-11-10T14:40:08Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "e3ac1ba8c964d487f223a6c0cd1e62103ece13e2",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/suffix-domain-separation",
      "headRefOid": "a2665e3950ec1732e5f38a7306ebcba07aa3a7e5",
      "closedAt": "2020-06-18T08:13:12Z",
      "mergedAt": "2020-06-18T08:13:12Z",
      "mergedBy": "alxdavids",
      "mergeCommit": {
        "oid": "456e2a6b48a5952b27d5ce0e1399078aea224a93"
      },
      "comments": [
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "Does the purpose of the `info` variable must be user-specific, rather than use it as domain separation tag? \r\nOne can define a separation tag without requiring the user to care about it. do you think this could work?",
          "createdAt": "2020-06-17T16:27:48Z",
          "updatedAt": "2020-06-17T16:27:48Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> Does the purpose of the info variable must be user-specific, rather than use it as domain separation tag?\r\n\r\n`info` is an application-specific domain separation string. If absent, we still require domain separation, so there's \"two\" layers of separation in play here.",
          "createdAt": "2020-06-17T17:11:21Z",
          "updatedAt": "2020-06-17T17:11:21Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@alxdavids if you're OK with these changes, please feel free to merge!",
          "createdAt": "2020-06-17T17:11:35Z",
          "updatedAt": "2020-06-17T17:11:35Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyNTE4NDgx",
          "commit": {
            "abbreviatedOid": "697dd1b"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-17T15:25:08Z",
          "updatedAt": "2020-06-17T15:25:09Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "shall we rename this to aux as well?",
              "createdAt": "2020-06-17T15:25:08Z",
              "updatedAt": "2020-06-17T17:01:53Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyNTYxMDI0",
          "commit": {
            "abbreviatedOid": "697dd1b"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-17T16:15:28Z",
          "updatedAt": "2020-06-17T16:15:29Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "Hmm? It is already named aux.",
              "createdAt": "2020-06-17T16:15:28Z",
              "updatedAt": "2020-06-17T17:01:53Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyNTc1NjM0",
          "commit": {
            "abbreviatedOid": "697dd1b"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-17T16:33:27Z",
          "updatedAt": "2020-06-17T16:33:27Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "oops, I meant `info`.",
              "createdAt": "2020-06-17T16:33:27Z",
              "updatedAt": "2020-06-17T17:01:53Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyNTk5NTE0",
          "commit": {
            "abbreviatedOid": "a2665e3"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-17T17:02:03Z",
          "updatedAt": "2020-06-17T17:02:03Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "Doh, yes, good catch! Fixed.",
              "createdAt": "2020-06-17T17:02:03Z",
              "updatedAt": "2020-06-17T17:02:03Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzMDQyNzY4",
          "commit": {
            "abbreviatedOid": "a2665e3"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-06-18T08:13:05Z",
          "updatedAt": "2020-06-18T08:13:05Z",
          "comments": []
        }
      ]
    },
    {
      "number": 104,
      "id": "MDExOlB1bGxSZXF1ZXN0NDM3MDUxNTE2",
      "title": "Fixes #101: use compressed point encoding",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/104",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-06-19T11:34:38Z",
      "updatedAt": "2020-11-10T14:40:52Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "75838bcc41235313f4ee3291bf070283255686c7",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/101",
      "headRefOid": "c61ba0c6ecdd1a5697d474d9c99095883aab0c4e",
      "closedAt": "2020-06-19T16:14:01Z",
      "mergedAt": "2020-06-19T16:14:01Z",
      "mergedBy": "alxdavids",
      "mergeCommit": {
        "oid": "49c463c9be2da940284eda01d297597e52384bc5"
      },
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "Rebased and simplified so will merge.",
          "createdAt": "2020-06-19T16:13:57Z",
          "updatedAt": "2020-06-19T16:13:57Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0MTYyMDM0",
          "commit": {
            "abbreviatedOid": "ed0f91a"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-19T15:23:13Z",
          "updatedAt": "2020-06-19T15:23:13Z",
          "comments": [
            {
              "originalPosition": 141,
              "body": "It took me a second to figure out what was happening here -- could we simplify?\r\n\r\n```\r\nb = 3 if sgn == 0 else 2\r\n```",
              "createdAt": "2020-06-19T15:23:13Z",
              "updatedAt": "2020-06-19T16:06:32Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0MTYyMzgz",
          "commit": {
            "abbreviatedOid": "ed0f91a"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good -- thanks! (please feel free to merge with or without the change above)",
          "createdAt": "2020-06-19T15:23:45Z",
          "updatedAt": "2020-06-19T15:24:03Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0MTY2MTI4",
          "commit": {
            "abbreviatedOid": "ed0f91a"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-19T15:29:05Z",
          "updatedAt": "2020-06-19T15:29:05Z",
          "comments": [
            {
              "originalPosition": 141,
              "body": "Sure I can simplify",
              "createdAt": "2020-06-19T15:29:05Z",
              "updatedAt": "2020-06-19T16:06:32Z"
            }
          ]
        }
      ]
    },
    {
      "number": 105,
      "id": "MDExOlB1bGxSZXF1ZXN0NDM3MDU0MDEx",
      "title": "Fixes #94: use camelcase globally",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/105",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-06-19T11:40:50Z",
      "updatedAt": "2020-11-10T14:40:53Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "456e2a6b48a5952b27d5ce0e1399078aea224a93",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/94",
      "headRefOid": "1906d04c37216381392388d59c128f4ba530b758",
      "closedAt": "2020-06-19T15:37:28Z",
      "mergedAt": "2020-06-19T15:37:28Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "75838bcc41235313f4ee3291bf070283255686c7"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0MTcxNzY3",
          "commit": {
            "abbreviatedOid": "1906d04"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-06-19T15:37:23Z",
          "updatedAt": "2020-06-19T15:37:23Z",
          "comments": []
        }
      ]
    },
    {
      "number": 106,
      "id": "MDExOlB1bGxSZXF1ZXN0NDM3MDg5MTQx",
      "title": "Fixes #76: Add KeyGen algorithm",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/106",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This can be used for OPAQUE to generate the Server's key pair",
      "createdAt": "2020-06-19T13:01:49Z",
      "updatedAt": "2020-11-10T14:40:52Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "49c463c9be2da940284eda01d297597e52384bc5",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/76",
      "headRefOid": "e049f3f57f46c91a2f036da6ed14134705f6d62d",
      "closedAt": "2020-06-22T08:25:14Z",
      "mergedAt": "2020-06-22T08:25:13Z",
      "mergedBy": "alxdavids",
      "mergeCommit": {
        "oid": "b2f7bcb5a3681cf5219a4c5f87a70119d0267cad"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@alxdavids after the resolve the conflicts, can you merge?",
          "createdAt": "2020-06-19T17:26:17Z",
          "updatedAt": "2020-06-19T17:26:17Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "> @alxdavids after the resolve the conflicts, can you merge?\r\n\r\nRebased, and merging",
          "createdAt": "2020-06-22T08:25:09Z",
          "updatedAt": "2020-06-22T08:25:09Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0MTQxODc0",
          "commit": {
            "abbreviatedOid": "a07068f"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "The KeyGen function looks good! I only have a blocking comment on notation.",
          "createdAt": "2020-06-19T14:55:22Z",
          "updatedAt": "2020-06-19T14:59:08Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "\ud83d\udc4d ",
              "createdAt": "2020-06-19T14:55:22Z",
              "updatedAt": "2020-06-22T08:23:59Z"
            },
            {
              "originalPosition": 24,
              "body": "```suggestion\r\nThe Server MUST run `KeyGen` to generate `(skS, pkS)`. The\r\n```\r\n\r\nOver in HPKE land, we use the terminology (skX, pkX) to denote private/public key pairs. Can we use that here? It might help keep things consistent across documents. An added bonus is that we can replace generic uses of \"publicKey\" with \"pkS\" to make it more clear whose public key it is.\r\n",
              "createdAt": "2020-06-19T14:56:11Z",
              "updatedAt": "2020-06-22T08:23:59Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0MjMwMDEx",
          "commit": {
            "abbreviatedOid": "e42cd5d"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-06-19T17:12:27Z",
          "updatedAt": "2020-06-19T17:12:27Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0MzczMzIw",
          "commit": {
            "abbreviatedOid": "e42cd5d"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-06-19T22:56:09Z",
          "updatedAt": "2020-06-19T22:56:09Z",
          "comments": []
        }
      ]
    },
    {
      "number": 107,
      "id": "MDExOlB1bGxSZXF1ZXN0NDM3MTAzNjUw",
      "title": "Fixes #79",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/107",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "- Removes H3 as it is the same as H1\r\n- Add prefix-free domain separation for hash function calls\r\n\r\ncc @armfazh ",
      "createdAt": "2020-06-19T13:31:12Z",
      "updatedAt": "2020-11-10T14:40:51Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "b2f7bcb5a3681cf5219a4c5f87a70119d0267cad",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/79",
      "headRefOid": "11214132b52ad3d34b7e56f8cfc44ed56e88b9b9",
      "closedAt": "2020-06-22T14:54:08Z",
      "mergedAt": "2020-06-22T14:54:08Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "7adc603724b59701199c83e19389aa94865c4ed9"
      },
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "> Nice reduction :) I only have one blocking comment on the DSTs. Namely, who specifies them? I think it should be this specification, and here's why: if an application chooses to not set these to anything, i.e., they're some default string or they're the same string across challenge, seed, and composite, then they don't do their job of effectively cloning the oracles. If the protocol specifies them as \"RFCXXXX-Challenge\", \"RFXXXX-Seed\", and \"RFCXXX-Composite\", for example, the application gets this separation for free.\r\n\r\nThanks for the review! Yeah you make a good point. I agree with this change, I'll make it and update the commit.",
          "createdAt": "2020-06-19T14:58:59Z",
          "updatedAt": "2020-06-19T14:58:59Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0MTI3ODY5",
          "commit": {
            "abbreviatedOid": "9187d7a"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Nice reduction :) I only have one blocking comment on the DSTs. Namely, who specifies them? I think it should be this specification, and here's why: if an application chooses to not set these to anything, i.e., they're some default string or they're the same string across challenge, seed, and composite, then they don't do their job of effectively cloning the oracles. If the protocol specifies them as \"RFCXXXX-Challenge\", \"RFXXXX-Seed\", and \"RFCXXX-Composite\", for example, the application gets this separation for free.",
          "createdAt": "2020-06-19T14:36:58Z",
          "updatedAt": "2020-06-19T14:55:03Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "```suggestion\r\n 1. finalizeDST = \"RFCXXXX-Finalize\"\r\n```",
              "createdAt": "2020-06-19T14:36:58Z",
              "updatedAt": "2020-06-22T08:34:25Z"
            },
            {
              "originalPosition": 36,
              "body": "```suggestion\r\nEach of these variables MUST be chosen by the Server implementation.\r\n```",
              "createdAt": "2020-06-19T14:37:28Z",
              "updatedAt": "2020-06-22T08:34:25Z"
            },
            {
              "originalPosition": 37,
              "body": "```suggestion\r\nIn addition, the choice SHOULD be made available to the Client.\r\n```",
              "createdAt": "2020-06-19T14:37:36Z",
              "updatedAt": "2020-06-22T08:34:25Z"
            },
            {
              "originalPosition": 60,
              "body": "```suggestion\r\n 8.  h2Input = I2OSP(len(gen), 2) || gen || \r\n               I2OSP(len(public_key), 2) || public_key || \r\n               I2OSP(len(a1), 2) || a1 || I2OSP(len(a2), 2) || a2 || \r\n               I2OSP(len(a3), 2) || a3 || I2OSP(len(a4), 2) || a4 || \r\n               I2OSP(len(challengeDST), 2) || challengeDST\r\n```",
              "createdAt": "2020-06-19T14:38:49Z",
              "updatedAt": "2020-06-22T08:34:25Z"
            },
            {
              "originalPosition": 85,
              "body": "```suggestion\r\n 8.  h2Input = I2OSP(len(gen), 2) || gen || \r\n            I2OSP(len(public_key), 2) || public_key || \r\n            I2OSP(len(a1), 2) || a1 || I2OSP(len(a2), 2) || a2 || \r\n            I2OSP(len(a3), 2) || a3 || I2OSP(len(a4), 2) || a4 || \r\n            I2OSP(len(challengeDST), 2) || challengeDST\r\n```",
              "createdAt": "2020-06-19T14:39:50Z",
              "updatedAt": "2020-06-22T08:34:25Z"
            },
            {
              "originalPosition": 60,
              "body": "(Noting for later -- `h2Input` case is inconsistent with `public_key` case.)",
              "createdAt": "2020-06-19T14:40:17Z",
              "updatedAt": "2020-06-22T08:34:25Z"
            },
            {
              "originalPosition": 123,
              "body": "Do we need to encode the length of `seed` here, as it's fixed-length based on H_1? (I don't see the harm in doing so. Just thinking out loud.)",
              "createdAt": "2020-06-19T14:41:37Z",
              "updatedAt": "2020-06-22T08:34:25Z"
            },
            {
              "originalPosition": 27,
              "body": "Since these are domain separators for the protocol, shouldn't we define them here, rather than punting to the application? We do this for `Finalize()` above, for example. ",
              "createdAt": "2020-06-19T14:52:59Z",
              "updatedAt": "2020-06-22T08:34:25Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0MTQ1MzUz",
          "commit": {
            "abbreviatedOid": "9187d7a"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-19T14:59:38Z",
          "updatedAt": "2020-06-19T14:59:39Z",
          "comments": [
            {
              "originalPosition": 123,
              "body": "Since we specify `H_1` as part of the ciphersuite, I think it's worth being consistent in case we decide to change it.",
              "createdAt": "2020-06-19T14:59:39Z",
              "updatedAt": "2020-06-22T08:34:25Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0MjA0ODU4",
          "commit": {
            "abbreviatedOid": "9187d7a"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-19T16:27:59Z",
          "updatedAt": "2020-06-19T16:27:59Z",
          "comments": [
            {
              "originalPosition": 60,
              "body": "Yep, will address this",
              "createdAt": "2020-06-19T16:27:59Z",
              "updatedAt": "2020-06-22T08:34:25Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0MjI2MTA0",
          "commit": {
            "abbreviatedOid": "00e2fd2"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-19T17:05:15Z",
          "updatedAt": "2020-06-19T17:05:16Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "Made this change",
              "createdAt": "2020-06-19T17:05:16Z",
              "updatedAt": "2020-06-22T08:34:25Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0MjI3NzMz",
          "commit": {
            "abbreviatedOid": "00e2fd2"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-19T17:08:14Z",
          "updatedAt": "2020-06-19T17:08:14Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "Should we move these to the functions where they're used, as we did with Finalize?",
              "createdAt": "2020-06-19T17:08:14Z",
              "updatedAt": "2020-06-22T08:34:25Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0Mzc5NzQz",
          "commit": {
            "abbreviatedOid": "00e2fd2"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "this looks good",
          "createdAt": "2020-06-19T23:31:27Z",
          "updatedAt": "2020-06-19T23:31:27Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0NzEyNzUw",
          "commit": {
            "abbreviatedOid": "1121413"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-22T08:34:31Z",
          "updatedAt": "2020-06-22T08:34:32Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "Sure, just made that change now",
              "createdAt": "2020-06-22T08:34:31Z",
              "updatedAt": "2020-06-22T08:34:32Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MDA0MDY3",
          "commit": {
            "abbreviatedOid": "1121413"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-06-22T14:53:53Z",
          "updatedAt": "2020-06-22T14:53:53Z",
          "comments": []
        }
      ]
    },
    {
      "number": 108,
      "id": "MDExOlB1bGxSZXF1ZXN0NDM3MzAxMzkx",
      "title": "Description of group properties.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/108",
      "state": "MERGED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Clarifies a bit the properties of the group. Feel free to edit if needed.",
      "createdAt": "2020-06-19T21:24:46Z",
      "updatedAt": "2020-06-22T16:38:50Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "d8e807e9828ea69c86761406bceeecbebf155f15",
      "headRepository": "armfazh/draft-irtf-cfrg-voprf",
      "headRefName": "armfazh/jun19",
      "headRefOid": "c50a62078494757cdcfa58ab60c4d94a3e4e84d7",
      "closedAt": "2020-06-22T16:38:49Z",
      "mergedAt": "2020-06-22T16:38:49Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "d118c741e60320de2cd9df98beb58d46cf07f547"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0NzE0NTI4",
          "commit": {
            "abbreviatedOid": "b72d533"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM! I'll leave to @chris-wood to approve & merge.",
          "createdAt": "2020-06-22T08:36:54Z",
          "updatedAt": "2020-06-22T08:38:01Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MDkzMTE2",
          "commit": {
            "abbreviatedOid": "b72d533"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-06-22T16:33:57Z",
          "updatedAt": "2020-06-22T16:33:57Z",
          "comments": []
        }
      ]
    },
    {
      "number": 117,
      "id": "MDExOlB1bGxSZXF1ZXN0NDM3NzgwNDM0",
      "title": "Fixes #114: unify byte array terminology",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/117",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "cc @armfazh ",
      "createdAt": "2020-06-22T08:42:00Z",
      "updatedAt": "2020-11-10T14:40:07Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "378b4f88d01c6d4f9f9e4e244bc2d74c2cac5f57",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/114",
      "headRefOid": "d06dcc000a5374d937fdff34664821e976698f10",
      "closedAt": "2020-06-22T16:28:51Z",
      "mergedAt": "2020-06-22T16:28:51Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "c53b7e5be4a3f6a5947013a0e43cb6a1de017f88"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MDA0Njky",
          "commit": {
            "abbreviatedOid": "4ac7494"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-06-22T14:54:31Z",
          "updatedAt": "2020-06-22T14:54:31Z",
          "comments": []
        }
      ]
    },
    {
      "number": 118,
      "id": "MDExOlB1bGxSZXF1ZXN0NDM3Nzg1MTEx",
      "title": "Fixes #113: removes verifiable variables",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/118",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "cc @armfazh ",
      "createdAt": "2020-06-22T08:50:18Z",
      "updatedAt": "2020-11-10T14:40:50Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "b2f7bcb5a3681cf5219a4c5f87a70119d0267cad",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/113",
      "headRefOid": "3a590b1bf6a6bce68e4826476732c005051b280c",
      "closedAt": "2020-06-22T15:42:44Z",
      "mergedAt": "2020-06-22T15:42:44Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "378b4f88d01c6d4f9f9e4e244bc2d74c2cac5f57"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MDQ5NjM5",
          "commit": {
            "abbreviatedOid": "3a590b1"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-06-22T15:42:33Z",
          "updatedAt": "2020-06-22T15:42:33Z",
          "comments": []
        }
      ]
    },
    {
      "number": 119,
      "id": "MDExOlB1bGxSZXF1ZXN0NDM3Nzg2NjI5",
      "title": "Fixes #112: Use big-endian byte order",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/119",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "cc @armfazh ",
      "createdAt": "2020-06-22T08:52:59Z",
      "updatedAt": "2020-11-10T14:40:53Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "b2f7bcb5a3681cf5219a4c5f87a70119d0267cad",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/112",
      "headRefOid": "805ddcf34d33791ae44f9cbe67e1e63897310f75",
      "closedAt": "2020-06-22T15:40:59Z",
      "mergedAt": "2020-06-22T15:40:59Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "574d47dc47ed281f28c74ab6244275c7c3f02992"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MDQ4MjYx",
          "commit": {
            "abbreviatedOid": "805ddcf"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-06-22T15:40:54Z",
          "updatedAt": "2020-06-22T15:40:54Z",
          "comments": []
        }
      ]
    },
    {
      "number": 120,
      "id": "MDExOlB1bGxSZXF1ZXN0NDM3Nzg5NzU0",
      "title": "Fixes #111: Clarify GF(p)",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/120",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "cc @armfazh ",
      "createdAt": "2020-06-22T08:58:14Z",
      "updatedAt": "2020-11-10T14:40:06Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "b2f7bcb5a3681cf5219a4c5f87a70119d0267cad",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/111",
      "headRefOid": "08c195664dcb130cd9a2cc15f7eb1e5719f63d88",
      "closedAt": "2020-06-22T16:29:59Z",
      "mergedAt": "2020-06-22T16:29:59Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "d8e807e9828ea69c86761406bceeecbebf155f15"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MDg5Mzc2",
          "commit": {
            "abbreviatedOid": "8aff5af"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-06-22T16:29:21Z",
          "updatedAt": "2020-06-22T16:29:45Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "```suggestion\r\norder of the group. We use `GF(p)` to represent the finite field of\r\n```",
              "createdAt": "2020-06-22T16:29:21Z",
              "updatedAt": "2020-06-22T16:29:52Z"
            }
          ]
        }
      ]
    },
    {
      "number": 121,
      "id": "MDExOlB1bGxSZXF1ZXN0NDM3ODA1MDI1",
      "title": "Fixes #100: Add group instantiation advice",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/121",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "cc @armfazh ",
      "createdAt": "2020-06-22T09:24:16Z",
      "updatedAt": "2020-11-10T14:40:49Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "d118c741e60320de2cd9df98beb58d46cf07f547",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/100",
      "headRefOid": "3ee92c5abc3162d5bb4d2a741926c9c79abfc3e8",
      "closedAt": "2020-06-24T08:41:36Z",
      "mergedAt": "2020-06-24T08:41:36Z",
      "mergedBy": "alxdavids",
      "mergeCommit": {
        "oid": "89b8e8414f1d78d3c50b3dacda075f5a1bb1519a"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "This is *great* -- thanks! Please feel free to merge, or wait for @armfazh to give it another review.",
          "createdAt": "2020-06-23T12:42:44Z",
          "updatedAt": "2020-06-23T12:42:44Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "cc @armfazh if you want to take another look before I merge.",
          "createdAt": "2020-06-23T12:58:27Z",
          "updatedAt": "2020-06-23T12:58:27Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MDA4MTQ1",
          "commit": {
            "abbreviatedOid": "f31e7bb"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "The structure of the NIST and curve2559/448 sections is inconsistent. Could we make the uniform in some way? For example:\r\n\r\n## curve2559 and curve448\r\n\r\nFor curve25519 and curve448, applications MUST validate each untrusted point\r\nby checking for all-zero outputs resulting from scalar multiplication wherever\r\nused with said point. The `HashToGroup`, `Serialize`, and `Deserialize` algorithms \r\nare handled as explained in the ciphersuite definition. The generators of these\r\ngroups are the base points given by\r\n\r\nx = 9\r\ny = 14781619447589544791020593568409986887264606134616475288964881837755586237401.\r\n\r\n(likewise for curve448)\r\n\r\nThe identity element is the point at infinity. The `Order` function returns\r\n2^252 + 0x14def9dea2f79cd65812631a5cf5d3ed and (curve448 value).",
          "createdAt": "2020-06-22T14:57:57Z",
          "updatedAt": "2020-06-22T15:21:10Z",
          "comments": [
            {
              "originalPosition": 90,
              "body": "```suggestion\r\nfrom {{protocol}}. We discuss how the definition of these curves\r\n```",
              "createdAt": "2020-06-22T14:57:57Z",
              "updatedAt": "2020-06-24T08:26:03Z"
            },
            {
              "originalPosition": 95,
              "body": "```suggestion\r\nFor P256, P384, and P521, the instantiation of a\r\n```",
              "createdAt": "2020-06-22T14:58:06Z",
              "updatedAt": "2020-06-24T08:26:03Z"
            },
            {
              "originalPosition": 101,
              "body": "```suggestion\r\nRoughly speaking, any valid point on the curve is a\r\ngroup element. Adding curve points corresponds to point addition, and\r\n```",
              "createdAt": "2020-06-22T14:58:53Z",
              "updatedAt": "2020-06-24T08:26:03Z"
            },
            {
              "originalPosition": 107,
              "body": "Should we list these values inline, to make the document self-contained?",
              "createdAt": "2020-06-22T14:59:42Z",
              "updatedAt": "2020-06-24T08:26:03Z"
            },
            {
              "originalPosition": 112,
              "body": "```suggestion\r\ncurve25519 and curve448 come with extra considerations surrounding scalar\r\nmultiplication since the cofactor of each is `4`. This means\r\n```",
              "createdAt": "2020-06-22T15:00:25Z",
              "updatedAt": "2020-06-24T08:26:03Z"
            },
            {
              "originalPosition": 114,
              "body": "```suggestion\r\nthat curve points can either belong to a small subgroups that are not of \r\nprime order. The larger prime-order subgroup\r\n```",
              "createdAt": "2020-06-22T15:01:00Z",
              "updatedAt": "2020-06-24T08:26:03Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MTY3OTM1",
          "commit": {
            "abbreviatedOid": "f31e7bb"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-22T18:19:44Z",
          "updatedAt": "2020-06-22T18:19:44Z",
          "comments": [
            {
              "originalPosition": 112,
              "body": "since the cofactor is `8` and `4`, respectively.",
              "createdAt": "2020-06-22T18:19:44Z",
              "updatedAt": "2020-06-24T08:26:03Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MTcwNTQ5",
          "commit": {
            "abbreviatedOid": "f31e7bb"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-22T18:23:34Z",
          "updatedAt": "2020-06-22T18:23:35Z",
          "comments": [
            {
              "originalPosition": 116,
              "body": "What is the reasoning supporting this paragraph? ",
              "createdAt": "2020-06-22T18:23:35Z",
              "updatedAt": "2020-06-24T08:26:03Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MTk2MDU2",
          "commit": {
            "abbreviatedOid": "f31e7bb"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-22T19:02:49Z",
          "updatedAt": "2020-06-22T19:02:49Z",
          "comments": [
            {
              "originalPosition": 116,
              "body": "Can you elaborate on the question?",
              "createdAt": "2020-06-22T19:02:49Z",
              "updatedAt": "2020-06-24T08:26:03Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MjEyMDk4",
          "commit": {
            "abbreviatedOid": "f31e7bb"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-22T19:28:42Z",
          "updatedAt": "2020-06-22T19:28:43Z",
          "comments": [
            {
              "originalPosition": 116,
              "body": ">To ensure that all operations are performed in this subgroup, any implementer must check for all-zero outputs of the scalar multiplication algorithms wherever they are used.\r\n\r\nI don't see the relation between performing operations in the subgroup versus cheking for all-zeros.\r\n\r\n*Recall that the procedures described in rfc7748 are specially crafted for a Diffie-Hellman protocol.\r\n\r\n",
              "createdAt": "2020-06-22T19:28:42Z",
              "updatedAt": "2020-06-24T08:26:03Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1NzQwNzkz",
          "commit": {
            "abbreviatedOid": "2b21347"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-06-23T12:42:18Z",
          "updatedAt": "2020-06-23T12:42:18Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1NzQyMjc0",
          "commit": {
            "abbreviatedOid": "2b21347"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-23T12:44:09Z",
          "updatedAt": "2020-06-23T12:44:10Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "Should we clarify that these are affine coordinates?",
              "createdAt": "2020-06-23T12:44:09Z",
              "updatedAt": "2020-06-24T08:26:03Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1OTg1OTUx",
          "commit": {
            "abbreviatedOid": "cf89b13"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "A couple of nits only.",
          "createdAt": "2020-06-23T17:09:47Z",
          "updatedAt": "2020-06-23T17:36:56Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "This number should be in hex too.",
              "createdAt": "2020-06-23T17:09:47Z",
              "updatedAt": "2020-06-24T08:26:03Z"
            },
            {
              "originalPosition": 30,
              "body": "Validation is not as easy as all-zero checking. I think it's better to add that \"points must be in the prime order subgroup\". ",
              "createdAt": "2020-06-23T17:25:06Z",
              "updatedAt": "2020-06-24T08:26:03Z"
            },
            {
              "originalPosition": 65,
              "body": "ANSI X9.62 is the usual reference for elliptic curves.",
              "createdAt": "2020-06-23T17:32:36Z",
              "updatedAt": "2020-06-24T08:26:03Z"
            }
          ]
        }
      ]
    },
    {
      "number": 122,
      "id": "MDExOlB1bGxSZXF1ZXN0NDM4MTgwNzc1",
      "title": "Refactor the API around contexts and modes",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/122",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This change decouples the notion of verifiability from the ciphersuite definition, since the algorithms in use do not affect how verifiability works. There are now two \"modes\" for the OPRF protocol: base mode and verifiability mode. Clients and servers run a \"setup\" step that produces a client or server context (respectively), which has the relevant APIs on them (blind, unblind, and finalize for clients, and evaluate for servers). The verifiable mode augments (extends) these contexts to provide the additional proof generation and verification logic. \r\n\r\nI also updated the ciphersuite definitions to move H2, which was previously \"hash to scalar element,\" to the GG API. This lets us use hash-to-field from draft-irtf-cfrg-hash-to-curve, which is nice. It will also let us easily adopt ristretto255 (and Decaf), since those have a similar API shape.\r\n\r\ncc @armfazh @grittygrease ",
      "createdAt": "2020-06-22T21:14:19Z",
      "updatedAt": "2020-11-10T14:40:05Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "89b8e8414f1d78d3c50b3dacda075f5a1bb1519a",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/refactor",
      "headRefOid": "917082745d7066cd4c62e1336f2d18bb76af6942",
      "closedAt": "2020-06-25T12:25:08Z",
      "mergedAt": "2020-06-25T12:25:08Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "3a62ce0d394d59785a9c3fb348c365f25a7ce9d1"
      },
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "Apologies for the list of individual review comments. I was using the VS code GitHub PR review integration for the first time and it has come out rather strangely.",
          "createdAt": "2020-06-23T10:08:28Z",
          "updatedAt": "2020-06-23T10:08:56Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@alxdavids this is ready to go! I'm making it an official PR.",
          "createdAt": "2020-06-24T21:50:35Z",
          "updatedAt": "2020-06-24T21:50:35Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1NjEzOTMy",
          "commit": {
            "abbreviatedOid": "8628ac6"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-23T09:39:14Z",
          "updatedAt": "2020-06-23T09:55:02Z",
          "comments": [
            {
              "originalPosition": 91,
              "body": "I'm don't think that this makes sense as a group API function. There's no concept of a keypair in a group.",
              "createdAt": "2020-06-23T09:39:14Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            },
            {
              "originalPosition": 103,
              "body": "I think that the `KeyGen` function should be removed from here and we can just talk about these types when we get to the protocol.",
              "createdAt": "2020-06-23T09:40:13Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            },
            {
              "originalPosition": 13,
              "body": "Is there a reason why this has been removed, is it just not required? FWIW I'm not necessarily against it.",
              "createdAt": "2020-06-23T09:40:53Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            },
            {
              "originalPosition": 179,
              "body": "We seem to have gone back to snake case here :) It seems that a lot of the H2C functions are in snake case, and we use camel case in this document exclusively. Maybe we should make everything snake case instead?",
              "createdAt": "2020-06-23T09:42:13Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            },
            {
              "originalPosition": 197,
              "body": "```suggestion\r\n   Client(inputs, pkS, info)                 Server(skS, pkS)\r\n```",
              "createdAt": "2020-06-23T09:45:03Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            },
            {
              "originalPosition": 214,
              "body": "I tried to deliberately move away from the word \"signed\" in the past as it sounds like a signature scheme. For Privacy Pass we use \"issued\", do you think that could work here? I don't have many better suggestions.",
              "createdAt": "2020-06-23T09:46:35Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            },
            {
              "originalPosition": 224,
              "body": "Noticed a typo in line 523 above: `in (V)OPRF the protocol` -> `in the (V)OPRF protocol`",
              "createdAt": "2020-06-23T09:48:01Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            },
            {
              "originalPosition": 236,
              "body": "Has `suite` been defined somewhere previously?",
              "createdAt": "2020-06-23T09:48:51Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            },
            {
              "originalPosition": 244,
              "body": "Maybe we need to say around here that the server should make this public key public?",
              "createdAt": "2020-06-23T09:49:44Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            },
            {
              "originalPosition": 361,
              "body": "```suggestion\n  SerializedElement blindedTokens[m]\n```",
              "createdAt": "2020-06-23T09:50:34Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            },
            {
              "originalPosition": 369,
              "body": "```suggestion\n  Evaluation Ev\n```",
              "createdAt": "2020-06-23T09:51:20Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            },
            {
              "originalPosition": 453,
              "body": "Is rejection sampling not carried out in `hash_to_field`?",
              "createdAt": "2020-06-23T09:52:21Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            },
            {
              "originalPosition": 432,
              "body": "Maybe include an extra hyphen for DSTs: `\"RFCXXXX-seed-\" + self.contextString`, to make it clear that the final part is a separate identifier?",
              "createdAt": "2020-06-23T09:54:04Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            },
            {
              "originalPosition": 520,
              "body": "`Evaluate` is the most important algorithm in this section, should we have it above the utility functions above?",
              "createdAt": "2020-06-23T09:55:01Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1NjI2MzU5",
          "commit": {
            "abbreviatedOid": "8628ac6"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-23T09:55:28Z",
          "updatedAt": "2020-06-23T09:55:28Z",
          "comments": [
            {
              "originalPosition": 551,
              "body": "```suggestion\n  proof = GenerateProof(skS, pkS, blindedTokens, Ev)\n```",
              "createdAt": "2020-06-23T09:55:28Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1NjI2ODcy",
          "commit": {
            "abbreviatedOid": "8628ac6"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-23T09:56:08Z",
          "updatedAt": "2020-06-23T09:56:08Z",
          "comments": [
            {
              "originalPosition": 675,
              "body": "This paragraph is already said above and so it can be removed.",
              "createdAt": "2020-06-23T09:56:08Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1NjI3NDE3",
          "commit": {
            "abbreviatedOid": "8628ac6"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-23T09:56:52Z",
          "updatedAt": "2020-06-23T09:56:52Z",
          "comments": [
            {
              "originalPosition": 693,
              "body": "For consistency:\n```suggestion\n  Evaluation Ev\n```",
              "createdAt": "2020-06-23T09:56:52Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1NjI5NTgy",
          "commit": {
            "abbreviatedOid": "8628ac6"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-23T09:59:37Z",
          "updatedAt": "2020-06-23T09:59:37Z",
          "comments": [
            {
              "originalPosition": 901,
              "body": "Is `ABORT()` explained anywhere?",
              "createdAt": "2020-06-23T09:59:37Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1NjMwMjk3",
          "commit": {
            "abbreviatedOid": "8628ac6"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-23T10:00:32Z",
          "updatedAt": "2020-06-23T10:00:33Z",
          "comments": [
            {
              "originalPosition": 753,
              "body": "```suggestion\ndef Unblind(pkS, tokens, blindedTokens, Ev):\n```",
              "createdAt": "2020-06-23T10:00:32Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1NjMwNTQx",
          "commit": {
            "abbreviatedOid": "8628ac6"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-23T10:00:51Z",
          "updatedAt": "2020-06-23T10:00:51Z",
          "comments": [
            {
              "originalPosition": 757,
              "body": "```suggestion\n    Z = GG.Deserialize(Ev.elements[i])\n```",
              "createdAt": "2020-06-23T10:00:51Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1NjMxMTAw",
          "commit": {
            "abbreviatedOid": "8628ac6"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-23T10:01:37Z",
          "updatedAt": "2020-06-23T10:01:37Z",
          "comments": [
            {
              "originalPosition": 835,
              "body": "```suggestion\n  Evaluation Ev\n```",
              "createdAt": "2020-06-23T10:01:37Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1NjMxMTI4",
          "commit": {
            "abbreviatedOid": "8628ac6"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-23T10:01:39Z",
          "updatedAt": "2020-06-23T10:01:40Z",
          "comments": [
            {
              "originalPosition": 844,
              "body": "```suggestion\ndef VerifyProof(pkS, blindedTokens, Ev, proof):\n```",
              "createdAt": "2020-06-23T10:01:39Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1NjMxNjU1",
          "commit": {
            "abbreviatedOid": "8628ac6"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-23T10:02:22Z",
          "updatedAt": "2020-06-23T10:02:22Z",
          "comments": [
            {
              "originalPosition": 891,
              "body": "```suggestion\n  Evaluation Ev\n```",
              "createdAt": "2020-06-23T10:02:22Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1NjMyMjUy",
          "commit": {
            "abbreviatedOid": "8628ac6"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-23T10:03:09Z",
          "updatedAt": "2020-06-23T10:03:09Z",
          "comments": [
            {
              "originalPosition": 931,
              "body": "```suggestion\n    Z = GG.Deserialize(Ev.elements[i])\n```",
              "createdAt": "2020-06-23T10:03:09Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1NjMzMTEy",
          "commit": {
            "abbreviatedOid": "8628ac6"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Final comments.",
          "createdAt": "2020-06-23T10:04:18Z",
          "updatedAt": "2020-06-23T10:07:26Z",
          "comments": [
            {
              "originalPosition": 947,
              "body": "This is a really nice interface! :) I'm glad that we could get rid of the HKDF.",
              "createdAt": "2020-06-23T10:04:18Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            },
            {
              "originalPosition": 13,
              "body": "ignore, I see that you've moved it below! \ud83d\udc4d ",
              "createdAt": "2020-06-23T10:05:03Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            },
            {
              "originalPosition": 899,
              "body": "```suggestion\ndef Unblind(pkS, tokens, blindedTokens, Ev):\n```",
              "createdAt": "2020-06-23T10:06:13Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            },
            {
              "originalPosition": 900,
              "body": "```suggestion\n  if VerifyProof(pkS, blindedTokens, Ev) == false:\n```",
              "createdAt": "2020-06-23T10:06:14Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MDIyMjAz",
          "commit": {
            "abbreviatedOid": "8628ac6"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-24T21:32:39Z",
          "updatedAt": "2020-06-24T21:32:39Z",
          "comments": [
            {
              "originalPosition": 91,
              "body": "Hmm, but there is a notion of a scalar and element of the group, right? ",
              "createdAt": "2020-06-24T21:32:39Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MDIzODM2",
          "commit": {
            "abbreviatedOid": "8628ac6"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-24T21:35:33Z",
          "updatedAt": "2020-06-24T21:35:33Z",
          "comments": [
            {
              "originalPosition": 179,
              "body": "Good catch! I'll make this snake case.",
              "createdAt": "2020-06-24T21:35:33Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MDI0MTk3",
          "commit": {
            "abbreviatedOid": "41654be"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-24T21:36:14Z",
          "updatedAt": "2020-06-24T21:36:15Z",
          "comments": [
            {
              "originalPosition": 224,
              "body": "Eagle eye!",
              "createdAt": "2020-06-24T21:36:15Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MDI0Mzc4",
          "commit": {
            "abbreviatedOid": "41654be"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-24T21:36:34Z",
          "updatedAt": "2020-06-24T21:36:34Z",
          "comments": [
            {
              "originalPosition": 214,
              "body": "I think issued will work. Let's go with that!",
              "createdAt": "2020-06-24T21:36:34Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MDI2MTAz",
          "commit": {
            "abbreviatedOid": "41654be"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-24T21:39:42Z",
          "updatedAt": "2020-06-24T21:39:43Z",
          "comments": [
            {
              "originalPosition": 244,
              "body": "Yep, that'll work. ",
              "createdAt": "2020-06-24T21:39:42Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MDI2MTcx",
          "commit": {
            "abbreviatedOid": "41654be"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-24T21:39:49Z",
          "updatedAt": "2020-06-24T21:39:50Z",
          "comments": [
            {
              "originalPosition": 236,
              "body": "I forgot to pass it to this function. Fixed!",
              "createdAt": "2020-06-24T21:39:49Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MDI2OTU3",
          "commit": {
            "abbreviatedOid": "69cd6f9"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-24T21:41:18Z",
          "updatedAt": "2020-06-24T21:41:18Z",
          "comments": [
            {
              "originalPosition": 520,
              "body": "Yep, I'm fine with that. I'll bump it up.",
              "createdAt": "2020-06-24T21:41:18Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MDI3NzUw",
          "commit": {
            "abbreviatedOid": "69cd6f9"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-24T21:42:39Z",
          "updatedAt": "2020-06-24T21:42:39Z",
          "comments": [
            {
              "originalPosition": 675,
              "body": "Good catch!",
              "createdAt": "2020-06-24T21:42:39Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MDI4Nzg5",
          "commit": {
            "abbreviatedOid": "16cec54"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-24T21:44:44Z",
          "updatedAt": "2020-06-24T21:44:45Z",
          "comments": [
            {
              "originalPosition": 901,
              "body": "It is now. :)",
              "createdAt": "2020-06-24T21:44:44Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MDMwNzY4",
          "commit": {
            "abbreviatedOid": "dbfa174"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-24T21:48:28Z",
          "updatedAt": "2020-06-24T21:48:28Z",
          "comments": [
            {
              "originalPosition": 947,
              "body": "Me too!",
              "createdAt": "2020-06-24T21:48:28Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MDMwOTA0",
          "commit": {
            "abbreviatedOid": "dbfa174"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-24T21:48:47Z",
          "updatedAt": "2020-06-24T21:48:48Z",
          "comments": [
            {
              "originalPosition": 453,
              "body": "Nope -- it's deterministic.",
              "createdAt": "2020-06-24T21:48:48Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MDMxMDk4",
          "commit": {
            "abbreviatedOid": "dbfa174"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-24T21:49:12Z",
          "updatedAt": "2020-06-24T21:49:12Z",
          "comments": [
            {
              "originalPosition": 432,
              "body": "Good idea. I'll add that.",
              "createdAt": "2020-06-24T21:49:12Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MzQ0MTQx",
          "commit": {
            "abbreviatedOid": "e805f72"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good to me! Just a few nits.",
          "createdAt": "2020-06-25T09:56:51Z",
          "updatedAt": "2020-06-25T10:13:11Z",
          "comments": [
            {
              "originalPosition": 205,
              "body": "```suggestion\r\nseparation in the (V)OPRF protocol. Specifically, any system which has\r\n```",
              "createdAt": "2020-06-25T09:56:51Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            },
            {
              "originalPosition": 368,
              "body": "```suggestion\r\n  Evaluation Ev\r\n```",
              "createdAt": "2020-06-25T10:05:41Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            },
            {
              "originalPosition": 400,
              "body": "Do we need to make these functions snake-case? It looks like they are in sage. Or maybe this is just because it is python syntax?",
              "createdAt": "2020-06-25T10:06:36Z",
              "updatedAt": "2020-06-25T12:23:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3NDM5ODgy",
          "commit": {
            "abbreviatedOid": "9170827"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-25T12:25:01Z",
          "updatedAt": "2020-06-25T12:25:01Z",
          "comments": [
            {
              "originalPosition": 400,
              "body": "I think the functions should all consistently use camel-cased. Snake case in the code is just a Python-ism (I think). ",
              "createdAt": "2020-06-25T12:25:01Z",
              "updatedAt": "2020-06-25T12:25:01Z"
            }
          ]
        }
      ]
    },
    {
      "number": 123,
      "id": "MDExOlB1bGxSZXF1ZXN0NDQwMDAwNTk2",
      "title": "Remove rejection sampling",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/123",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-06-25T12:53:00Z",
      "updatedAt": "2020-11-10T14:40:02Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "3a62ce0d394d59785a9c3fb348c365f25a7ce9d1",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/remove-rejection-sampling",
      "headRefOid": "26718b550e52c22d3b5199889dcf789af97b36fa",
      "closedAt": "2020-06-25T12:59:17Z",
      "mergedAt": "2020-06-25T12:59:17Z",
      "mergedBy": "alxdavids",
      "mergeCommit": {
        "oid": "73492d2727115a7591a3d340e31f0565465348a7"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3NDY2OTA4",
          "commit": {
            "abbreviatedOid": "26718b5"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-06-25T12:59:11Z",
          "updatedAt": "2020-06-25T12:59:11Z",
          "comments": []
        }
      ]
    },
    {
      "number": 125,
      "id": "MDExOlB1bGxSZXF1ZXN0NDQwMjYwMjI3",
      "title": "Simplifies some parameters and functions.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/125",
      "state": "MERGED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Solving some issues that I detected during the review. ",
      "createdAt": "2020-06-25T21:12:30Z",
      "updatedAt": "2020-06-26T11:29:48Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "73492d2727115a7591a3d340e31f0565465348a7",
      "headRepository": "armfazh/draft-irtf-cfrg-voprf",
      "headRefName": "armfazh/jun25",
      "headRefOid": "403d3e35215852503c2b2e05dbcdc0226fe80050",
      "closedAt": "2020-06-26T11:29:48Z",
      "mergedAt": "2020-06-26T11:29:48Z",
      "mergedBy": "alxdavids",
      "mergeCommit": {
        "oid": "032860a2ca062d69b47457e8721f74f702a3c61a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3ODgzMTAw",
          "commit": {
            "abbreviatedOid": "a135d48"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-06-25T21:48:34Z",
          "updatedAt": "2020-06-25T21:50:33Z",
          "comments": [
            {
              "originalPosition": 70,
              "body": "Please revert this -- the old notation was correct!",
              "createdAt": "2020-06-25T21:48:34Z",
              "updatedAt": "2020-06-25T22:48:19Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3ODk5NDI1",
          "commit": {
            "abbreviatedOid": "a135d48"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-25T22:21:54Z",
          "updatedAt": "2020-06-25T22:21:55Z",
          "comments": [
            {
              "originalPosition": 70,
              "body": "What this notation `proof<0...2^16-1>` means?",
              "createdAt": "2020-06-25T22:21:54Z",
              "updatedAt": "2020-06-25T22:48:19Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3OTA2NDAz",
          "commit": {
            "abbreviatedOid": "a135d48"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-06-25T22:38:55Z",
          "updatedAt": "2020-06-25T22:38:55Z",
          "comments": [
            {
              "originalPosition": 70,
              "body": "It's TLS notation -- it means that `proof` is a list of `Scalar` elements consisting of anywhere from 0 to 2^16-1 bytes.",
              "createdAt": "2020-06-25T22:38:55Z",
              "updatedAt": "2020-06-25T22:48:19Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4MTE3Njky",
          "commit": {
            "abbreviatedOid": "403d3e3"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-06-26T08:41:05Z",
          "updatedAt": "2020-06-26T08:41:05Z",
          "comments": []
        }
      ]
    },
    {
      "number": 127,
      "id": "MDExOlB1bGxSZXF1ZXN0NDQwNjczNDMz",
      "title": "Add separation between base and verifiable mode setup functions.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/127",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-06-26T16:20:05Z",
      "updatedAt": "2020-11-10T14:40:04Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "627c224a9f024edcae01e80c6ed03cbfca6834f3",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/clarity-edits",
      "headRefOid": "7c311fdf7d986b594033ed655cab2198de1ee6f0",
      "closedAt": "2020-06-26T16:43:15Z",
      "mergedAt": "2020-06-26T16:43:15Z",
      "mergedBy": "alxdavids",
      "mergeCommit": {
        "oid": "febf436f7929bf987f290a5b1559588c5cfecc3c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NDQzMDE5",
          "commit": {
            "abbreviatedOid": "7c311fd"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-06-26T16:43:08Z",
          "updatedAt": "2020-06-26T16:43:08Z",
          "comments": []
        }
      ]
    },
    {
      "number": 128,
      "id": "MDExOlB1bGxSZXF1ZXN0NDQwNjc3Mzg0",
      "title": "Add EvaluateInput API for PrivacyPass.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/128",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "PrivacyPass can use this without having to use any group operations from VOPRF.",
      "createdAt": "2020-06-26T16:29:03Z",
      "updatedAt": "2020-11-10T14:40:04Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "5c28ca526c03329940406554c659e40ee51694de",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/evaluate-input",
      "headRefOid": "5ab0d74988cc35621c48ffe6b0afd5df28f43171",
      "closedAt": "2020-06-29T13:11:37Z",
      "mergedAt": "2020-06-29T13:11:37Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "b307fa0b428aeeb3b8c754550dcf93ce97d5bf2e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4OTk5OTQ1",
          "commit": {
            "abbreviatedOid": "375b506"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Yep looks good, feel free to merge once the conflict is sorted.",
          "createdAt": "2020-06-29T08:43:13Z",
          "updatedAt": "2020-06-29T08:43:13Z",
          "comments": []
        }
      ]
    },
    {
      "number": 129,
      "id": "MDExOlB1bGxSZXF1ZXN0NDQxNDQwNDQy",
      "title": "Remove batch notation from all main function descriptions.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/129",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Batch notation is only useful in ComputeComposites. This change optimizes all other functions for the common, non-batched case. Hopefully this makes use of these APIs easier in other protocols such as OPAQUE.",
      "createdAt": "2020-06-29T14:07:47Z",
      "updatedAt": "2020-11-10T14:40:01Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "b307fa0b428aeeb3b8c754550dcf93ce97d5bf2e",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/remove-batch",
      "headRefOid": "e4755a228df0afd282ba9a21f13b6b19bb071897",
      "closedAt": "2020-06-30T07:42:28Z",
      "mergedAt": "2020-06-30T07:42:28Z",
      "mergedBy": "alxdavids",
      "mergeCommit": {
        "oid": "8bf2d234585002ee57e6ecabb9af5ddfae70e094"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5NzUwOTA3",
          "commit": {
            "abbreviatedOid": "e4755a2"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-06-30T07:42:15Z",
          "updatedAt": "2020-06-30T07:42:15Z",
          "comments": []
        }
      ]
    },
    {
      "number": 130,
      "id": "MDExOlB1bGxSZXF1ZXN0NDQ2ODkxNjI5",
      "title": "Read-through and deleting old material",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/130",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "- Rewording\r\n- Removed privacy considerations as they're app-specific\r\n- Remove application section as it was just reiterating stuff in the intro\r\n\r\n(It's a big diff, but most of it is just re-wrapping lines etc)",
      "createdAt": "2020-07-09T14:19:29Z",
      "updatedAt": "2020-11-10T14:40:48Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "a729c70f9761825c912e32721bb80e70862ea431",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/readthrough",
      "headRefOid": "aeeda9a8608824391715238fde9347548408306a",
      "closedAt": "2020-07-13T08:41:36Z",
      "mergedAt": "2020-07-13T08:41:36Z",
      "mergedBy": "alxdavids",
      "mergeCommit": {
        "oid": "bd81b95dee48de6f6cf06e393a8628ff45afb4ce"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2NzEzMzEx",
          "commit": {
            "abbreviatedOid": "6dbc03e"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I suggest moving the suite IDs to the beginning of the parameter list. ",
          "createdAt": "2020-07-10T21:34:45Z",
          "updatedAt": "2020-07-10T21:41:15Z",
          "comments": [
            {
              "originalPosition": 609,
              "body": "Beware of the [errata](https://www.rfc-editor.org/errata/eid4730) that flips the y-coordinate of the generator.",
              "createdAt": "2020-07-10T21:34:46Z",
              "updatedAt": "2020-07-13T08:40:30Z"
            },
            {
              "originalPosition": 845,
              "body": "```suggestion\r\ncurve setting, this function deterministically maps inputs x (as byte arrays) to\r\n```",
              "createdAt": "2020-07-10T21:38:36Z",
              "updatedAt": "2020-07-13T08:40:30Z"
            }
          ]
        }
      ]
    },
    {
      "number": 131,
      "id": "MDExOlB1bGxSZXF1ZXN0NDQ3NDUwMDM2",
      "title": "Curve{25519,448}: correctly check points and correct order",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/131",
      "state": "MERGED",
      "author": "bwesterb",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I'd prefer just specifying ristretto/decaf, but if you're going to use plain Curve25519 and Curve448, you'd better check those input points for membership correctly.  (RFC7748 only hints of a method which is not even sufficient.)",
      "createdAt": "2020-07-10T13:46:03Z",
      "updatedAt": "2020-07-10T17:21:25Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "8bf2d234585002ee57e6ecabb9af5ddfae70e094",
      "headRepository": "bwesterb/draft-irtf-cfrg-voprf",
      "headRefName": "patch-1",
      "headRefOid": "1b91ac215c209ed39b79d28cb0319963a90b4a4f",
      "closedAt": "2020-07-10T17:21:25Z",
      "mergedAt": "2020-07-10T17:21:25Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "a729c70f9761825c912e32721bb80e70862ea431"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2NDE2MTk0",
          "commit": {
            "abbreviatedOid": "ee49f8b"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-07-10T13:48:46Z",
          "updatedAt": "2020-07-10T13:50:49Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "Nit: remove whitespace\r\n```suggestion\r\n  - Deserialization: Implementers must check for each untrusted input point\r\n    whether it's a member of the big prime-order subgroup of the curve.\r\n    This can be done by scalar multiplying the point by Order() and checking\r\n    whether it's zero.\r\n```",
              "createdAt": "2020-07-10T13:48:47Z",
              "updatedAt": "2020-07-10T13:52:32Z"
            },
            {
              "originalPosition": 32,
              "body": "Nit: spelling.\r\n```suggestion\r\n  - Deserialization: Implementers must check for each untrusted input point\r\n```",
              "createdAt": "2020-07-10T13:49:57Z",
              "updatedAt": "2020-07-10T13:52:32Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2NTcwMjM2",
          "commit": {
            "abbreviatedOid": "1b91ac2"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-07-10T17:21:19Z",
          "updatedAt": "2020-07-10T17:21:19Z",
          "comments": []
        }
      ]
    },
    {
      "number": 132,
      "id": "MDExOlB1bGxSZXF1ZXN0NDQ4MTM2OTc1",
      "title": "release -04 change",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/132",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Made before uploading",
      "createdAt": "2020-07-13T09:39:36Z",
      "updatedAt": "2020-11-10T14:40:47Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "bd81b95dee48de6f6cf06e393a8628ff45afb4ce",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/draft-04",
      "headRefOid": "56a0387b03f29893936d6a62d04d4e81cadc69d0",
      "closedAt": "2020-08-07T17:00:50Z",
      "mergedAt": "2020-08-07T17:00:50Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "a906157cb8669ae0896bf7d92a3af1a1305a31d1"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNDY1OTA1",
          "commit": {
            "abbreviatedOid": "56a0387"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-08-07T17:00:45Z",
          "updatedAt": "2020-08-07T17:00:45Z",
          "comments": []
        }
      ]
    },
    {
      "number": 134,
      "id": "MDExOlB1bGxSZXF1ZXN0NDU5NjkwMjgx",
      "title": "suggested small edits for clarity",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/134",
      "state": "MERGED",
      "author": "tatianab",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-07-31T00:30:19Z",
      "updatedAt": "2020-07-31T00:31:56Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "bd81b95dee48de6f6cf06e393a8628ff45afb4ce",
      "headRepository": "tatianab/draft-irtf-cfrg-voprf",
      "headRefName": "master",
      "headRefOid": "a37bc9fd4427131ee65f40bd08226cf56a9109b8",
      "closedAt": "2020-07-31T00:31:56Z",
      "mergedAt": "2020-07-31T00:31:56Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "aa753421895fba50007660d1f91668b6ded8fecb"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4ODQ4NTUy",
          "commit": {
            "abbreviatedOid": "a37bc9f"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-07-31T00:31:51Z",
          "updatedAt": "2020-07-31T00:31:51Z",
          "comments": []
        }
      ]
    },
    {
      "number": 136,
      "id": "MDExOlB1bGxSZXF1ZXN0NDY2MzQxNjk1",
      "title": "renaming for consistency",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/136",
      "state": "MERGED",
      "author": "tatianab",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "blindedToken --> blindToken\r\nunblindedToken --> issuedToken",
      "createdAt": "2020-08-11T20:34:57Z",
      "updatedAt": "2020-08-11T21:50:57Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "a906157cb8669ae0896bf7d92a3af1a1305a31d1",
      "headRepository": "tatianab/draft-irtf-cfrg-voprf",
      "headRefName": "tatianab/clarity",
      "headRefOid": "585bcc815266bfe04cfcbfbcc9b03da2255e9663",
      "closedAt": "2020-08-11T21:50:57Z",
      "mergedAt": "2020-08-11T21:50:57Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "269a97896e87c3948c24a11e6db6d832c6cbbadd"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NDUzNjcy",
          "commit": {
            "abbreviatedOid": "585bcc8"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-08-11T21:50:52Z",
          "updatedAt": "2020-08-11T21:50:52Z",
          "comments": []
        }
      ]
    },
    {
      "number": 137,
      "id": "MDExOlB1bGxSZXF1ZXN0NDY2ODY1MzY4",
      "title": "unify append notation",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/137",
      "state": "MERGED",
      "author": "tatianab",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "change + to || when referring to byte arrays",
      "createdAt": "2020-08-12T16:00:13Z",
      "updatedAt": "2020-08-18T23:31:05Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "269a97896e87c3948c24a11e6db6d832c6cbbadd",
      "headRepository": "tatianab/draft-irtf-cfrg-voprf",
      "headRefName": "tatianab/clarity",
      "headRefOid": "07e68939aa40f6261f1774e4ed624536f1f4e093",
      "closedAt": "2020-08-18T23:31:05Z",
      "mergedAt": "2020-08-18T23:31:05Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "9aebfaef81dde5a5815ac80cb6d02b82ff6ccc01"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks!",
          "createdAt": "2020-08-18T23:30:58Z",
          "updatedAt": "2020-08-18T23:30:58Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5ODk3NTA1",
          "commit": {
            "abbreviatedOid": "07e6893"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-08-18T23:30:52Z",
          "updatedAt": "2020-08-18T23:30:52Z",
          "comments": []
        }
      ]
    },
    {
      "number": 138,
      "id": "MDExOlB1bGxSZXF1ZXN0NDcwNTI4NTg5",
      "title": "Adding a description of HashToScalar function",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/138",
      "state": "MERGED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The implementation of HashToScalar can be performed by reusing the hash_to_field function from Hash to Curve draft.\r\n\r\n\r\nCloses #135 ",
      "createdAt": "2020-08-20T00:29:21Z",
      "updatedAt": "2020-09-09T10:39:01Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "9aebfaef81dde5a5815ac80cb6d02b82ff6ccc01",
      "headRepository": "armfazh/draft-irtf-cfrg-voprf",
      "headRefName": "addHashToScalar",
      "headRefOid": "9e3393777cd797bf954aa205ad72643c62d97c93",
      "closedAt": "2020-09-09T10:39:01Z",
      "mergedAt": "2020-09-09T10:39:00Z",
      "mergedBy": "alxdavids",
      "mergeCommit": {
        "oid": "751c0307f9e3585cb0b14884b23517eecca9f7b8"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0ODc5MTg5",
          "commit": {
            "abbreviatedOid": "9e33937"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-09-09T10:38:50Z",
          "updatedAt": "2020-09-09T10:38:50Z",
          "comments": []
        }
      ]
    },
    {
      "number": 141,
      "id": "MDExOlB1bGxSZXF1ZXN0NDgyNzUyMDYw",
      "title": "Adding Armando as document author",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/141",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Hey @armfazh, thanks for all the work that you have done on this document so far. It's about time you were added as a full author! Feel free to suggest changes to any of the details if I have got anything incorrect.\r\n\r\ncc @chris-wood ",
      "createdAt": "2020-09-09T10:46:45Z",
      "updatedAt": "2020-11-10T14:41:05Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "751c0307f9e3585cb0b14884b23517eecca9f7b8",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/add-author",
      "headRefOid": "0a2d50b49447a8e788dadd797a0adf3ff55c4bf6",
      "closedAt": "2020-09-10T15:56:03Z",
      "mergedAt": "2020-09-10T15:56:03Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "fbd93a2d3820d74f0b76e070c0d50832fa187473"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0OTUzMDgz",
          "commit": {
            "abbreviatedOid": "6658f78"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-09-09T12:25:25Z",
          "updatedAt": "2020-09-09T12:25:25Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Can we make this alphabetical?",
              "createdAt": "2020-09-09T12:25:25Z",
              "updatedAt": "2020-09-10T14:28:25Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1OTk1ODg0",
          "commit": {
            "abbreviatedOid": "0a2d50b"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-09-10T14:28:47Z",
          "updatedAt": "2020-09-10T14:28:47Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Yep, my bad, that's fixed now!",
              "createdAt": "2020-09-10T14:28:47Z",
              "updatedAt": "2020-09-10T14:28:47Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MDgyMjIy",
          "commit": {
            "abbreviatedOid": "0a2d50b"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-09-10T15:55:55Z",
          "updatedAt": "2020-09-10T15:55:55Z",
          "comments": []
        }
      ]
    },
    {
      "number": 149,
      "id": "MDExOlB1bGxSZXF1ZXN0NDkzNTc1NTY2",
      "title": "Cite TLS notation.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/149",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #145.",
      "createdAt": "2020-09-26T13:13:44Z",
      "updatedAt": "2020-11-10T14:40:00Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "cd85b5938e1e3ee17e325fa1c598565f400f1473",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/cite-tls",
      "headRefOid": "6a0baff40109f92f558ac16f8c11f0137082c3e0",
      "closedAt": "2020-09-28T17:46:18Z",
      "mergedAt": "2020-09-28T17:46:18Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "4773361d19f00550d58c35e92d074ceadd7891d7"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3NzU5MjE3",
          "commit": {
            "abbreviatedOid": "6a0baff"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-09-28T17:43:30Z",
          "updatedAt": "2020-09-28T17:43:30Z",
          "comments": []
        }
      ]
    },
    {
      "number": 150,
      "id": "MDExOlB1bGxSZXF1ZXN0NDk0MjgzMjc1",
      "title": "Grammar checks",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/150",
      "state": "MERGED",
      "author": "claucece",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-09-28T17:01:52Z",
      "updatedAt": "2020-09-28T17:46:51Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "cd85b5938e1e3ee17e325fa1c598565f400f1473",
      "headRepository": "claucece/draft-irtf-cfrg-voprf",
      "headRefName": "master",
      "headRefOid": "a0de89c8dc75ef8c51e2d0a0e8d2919c8f3fdb33",
      "closedAt": "2020-09-28T17:46:51Z",
      "mergedAt": "2020-09-28T17:46:51Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "3947f0563ce8db1f9a8bc8765989946ee52e3415"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3NzU4ODMy",
          "commit": {
            "abbreviatedOid": "a0de89c"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-09-28T17:42:59Z",
          "updatedAt": "2020-09-28T17:42:59Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3NzYxNjAy",
          "commit": {
            "abbreviatedOid": "a0de89c"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-09-28T17:46:46Z",
          "updatedAt": "2020-09-28T17:46:46Z",
          "comments": []
        }
      ]
    },
    {
      "number": 156,
      "id": "MDExOlB1bGxSZXF1ZXN0NDk4MjM2OTI4",
      "title": "Clarify inputs for functions",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/156",
      "state": "MERGED",
      "author": "claucece",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-10-06T03:22:40Z",
      "updatedAt": "2020-10-08T15:43:56Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "3947f0563ce8db1f9a8bc8765989946ee52e3415",
      "headRepository": "claucece/draft-irtf-cfrg-voprf",
      "headRefName": "master",
      "headRefOid": "beefc37a0a70a94ca24b5391e4efb04aa8252ab0",
      "closedAt": "2020-10-08T15:43:56Z",
      "mergedAt": "2020-10-08T15:43:56Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "be81e97a16dac7fa0a6b93bda85e8c5d4a934740"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyNjI1MjI1",
          "commit": {
            "abbreviatedOid": "d3de1c5"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-06T06:43:14Z",
          "updatedAt": "2020-10-06T06:47:13Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\nFor base mode, servers don't need the public key `pkS` produced by KeyGen.\r\n```",
              "createdAt": "2020-10-06T06:43:14Z",
              "updatedAt": "2020-10-08T15:43:48Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0OTA1NzI0",
          "commit": {
            "abbreviatedOid": "dca4dd1"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-10-08T15:28:06Z",
          "updatedAt": "2020-10-08T15:28:06Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0OTE5NDMz",
          "commit": {
            "abbreviatedOid": "dca4dd1"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM pending the suggestions!",
          "createdAt": "2020-10-08T15:42:29Z",
          "updatedAt": "2020-10-08T15:43:17Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "```suggestion\r\nFor base mode, servers do not need the public key `pkS` produced by KeyGen.\r\n```",
              "createdAt": "2020-10-08T15:42:30Z",
              "updatedAt": "2020-10-08T15:43:48Z"
            },
            {
              "originalPosition": 73,
              "body": "```suggestion\r\nA ciphersuite (also referred as 'suite' in this document) for the protocol\r\n```",
              "createdAt": "2020-10-08T15:42:50Z",
              "updatedAt": "2020-10-08T15:43:48Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0OTIwNTY0",
          "commit": {
            "abbreviatedOid": "cc02f71"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-08T15:43:43Z",
          "updatedAt": "2020-10-08T15:43:43Z",
          "comments": [
            {
              "originalPosition": 73,
              "body": "```suggestion\r\nA ciphersuite (also referred to as 'suite' in this document) for the protocol\r\n```",
              "createdAt": "2020-10-08T15:43:43Z",
              "updatedAt": "2020-10-08T15:43:48Z"
            }
          ]
        }
      ]
    },
    {
      "number": 158,
      "id": "MDExOlB1bGxSZXF1ZXN0NTAxODU5Mjk0",
      "title": "Create new test vectors",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/158",
      "state": "MERGED",
      "author": "claucece",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-10-12T22:43:27Z",
      "updatedAt": "2020-10-19T16:26:01Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "f4d1a6586609184e930ba35d698698c72a8062c4",
      "headRepository": "claucece/draft-irtf-cfrg-voprf",
      "headRefName": "master",
      "headRefOid": "54dd331ce9a3854c8c94ee4b19884e5491abb0c0",
      "closedAt": "2020-10-19T16:26:01Z",
      "mergedAt": "2020-10-19T16:26:01Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "37afd613897bfbd722ada6d126f0ea8bcf9da0d9"
      },
      "comments": [
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "cc. @chris-wood and @armfazh . ",
          "createdAt": "2020-10-13T11:25:17Z",
          "updatedAt": "2020-10-13T11:25:17Z"
        },
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@armfazh @chris-wood please, take a look at this.",
          "createdAt": "2020-10-18T20:59:27Z",
          "updatedAt": "2020-10-18T20:59:27Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5NjQxOTc3",
          "commit": {
            "abbreviatedOid": "c060030"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2020-10-15T18:08:18Z",
          "updatedAt": "2020-10-15T19:19:47Z",
          "comments": [
            {
              "originalPosition": 2,
              "body": " SHA256 or SHA512 for the suite?",
              "createdAt": "2020-10-15T18:08:18Z",
              "updatedAt": "2020-10-19T15:43:29Z"
            },
            {
              "originalPosition": 2,
              "body": "In the Table 2 of h2c, we only announce `P256_XMD:SHA-256_SSWU_RO_` for P-256. \r\nThis doesn't block us to define an analogous one using SHA512, but I think it's better to stick on the one that is recommended. \r\n\r\n@chris-wood  thoughts?",
              "createdAt": "2020-10-15T18:13:03Z",
              "updatedAt": "2020-10-19T15:43:29Z"
            },
            {
              "originalPosition": 5,
              "body": "You must add the backslash to avoid the loss of underscores in the html converter.\r\n\r\n```suggestion\r\n    \"RFCXXXX-P256_XMD:SHA-512_SSWU_RO\\_\"\r\n```",
              "createdAt": "2020-10-15T18:21:07Z",
              "updatedAt": "2020-10-19T15:43:29Z"
            },
            {
              "originalPosition": 58,
              "body": "Are we using HKDF for voprf? if not, the name of suites could be shortened. \r\n",
              "createdAt": "2020-10-15T18:24:32Z",
              "updatedAt": "2020-10-19T15:43:29Z"
            },
            {
              "originalPosition": 240,
              "body": "Suite field is wrong for verifiable modes.\r\n```sh\r\n$ cat vectors/allVectors.json | jq '.[].\"suite\"'\r\n\"OPRF-P256-HKDF-SHA512-SSWU-RO\"\r\n\"OPRF-P384-HKDF-SHA512-SSWU-RO\"\r\n\"OPRF-P521-HKDF-SHA512-SSWU-RO\"\r\n\"OPRF-P256-HKDF-SHA512-SSWU-RO\"\r\n\"OPRF-P384-HKDF-SHA512-SSWU-RO\"\r\n\"OPRF-P521-HKDF-SHA512-SSWU-RO\"\r\n\r\n```",
              "createdAt": "2020-10-15T18:31:43Z",
              "updatedAt": "2020-10-19T15:43:29Z"
            },
            {
              "originalPosition": 241,
              "body": "It's better a name without spaces on it. \r\n\r\n```suggestion\r\n    \"dst\": \"RFCXXXX-P256_XMD:SHA-512_SSWU_RO_\",\r\n```",
              "createdAt": "2020-10-15T18:32:28Z",
              "updatedAt": "2020-10-19T15:43:29Z"
            },
            {
              "originalPosition": 8,
              "body": "@chris-wood @alxdavids \r\nDoes a single ciphersuite name is intended to support both modes? or do we need to specify identifiers for each mode?",
              "createdAt": "2020-10-15T18:58:36Z",
              "updatedAt": "2020-10-19T15:43:29Z"
            },
            {
              "originalPosition": 59,
              "body": "Test vectors change between runs. It is expected that this script returns the same vectors everytime we run it.",
              "createdAt": "2020-10-15T19:19:21Z",
              "updatedAt": "2020-10-19T15:43:29Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5OTI1MTA4",
          "commit": {
            "abbreviatedOid": "c060030"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-16T00:23:45Z",
          "updatedAt": "2020-10-16T00:23:45Z",
          "comments": [
            {
              "originalPosition": 59,
              "body": "Yeah.. it was like that since the beginning of the POC.. and I didn't know if that is what was wanted (as it was there). I can create a 'random scalar generation' function that always return the same valid scalar for creating same test vectors. \r\ncc. @chris-wood ",
              "createdAt": "2020-10-16T00:23:45Z",
              "updatedAt": "2020-10-19T15:43:29Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5OTI2Njkw",
          "commit": {
            "abbreviatedOid": "c060030"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-16T00:24:51Z",
          "updatedAt": "2020-10-16T00:24:51Z",
          "comments": [
            {
              "originalPosition": 2,
              "body": "Interesting. Personally, I think it will be better if we use SHA-256, as the size is smaller. But maybe this was targeted for an specific security level that SHA512 gives. Let's discuss tomorrow.",
              "createdAt": "2020-10-16T00:24:51Z",
              "updatedAt": "2020-10-19T15:43:29Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5OTMyNTIw",
          "commit": {
            "abbreviatedOid": "c060030"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-16T00:29:21Z",
          "updatedAt": "2020-10-16T00:29:22Z",
          "comments": [
            {
              "originalPosition": 240,
              "body": "Oh, yes. Names get repeated. I'll change.",
              "createdAt": "2020-10-16T00:29:22Z",
              "updatedAt": "2020-10-19T15:43:29Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwNDc0NDI0",
          "commit": {
            "abbreviatedOid": "c060030"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-16T13:33:23Z",
          "updatedAt": "2020-10-16T13:42:15Z",
          "comments": [
            {
              "originalPosition": 2,
              "body": "We should go with SHA256!",
              "createdAt": "2020-10-16T13:33:24Z",
              "updatedAt": "2020-10-19T15:43:29Z"
            },
            {
              "originalPosition": 58,
              "body": "Yeah, good catch. We're not using HKDF anymore. ",
              "createdAt": "2020-10-16T13:41:21Z",
              "updatedAt": "2020-10-19T15:43:29Z"
            },
            {
              "originalPosition": 59,
              "body": "We can make them deterministic, but let's do that in a separate change.",
              "createdAt": "2020-10-16T13:41:32Z",
              "updatedAt": "2020-10-19T15:43:29Z"
            },
            {
              "originalPosition": 34,
              "body": "```suggestion\r\n        vector[\"dst\"] = client.suite.dst\r\n```",
              "createdAt": "2020-10-16T13:42:07Z",
              "updatedAt": "2020-10-19T15:43:29Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwNjk3MTQ4",
          "commit": {
            "abbreviatedOid": "c060030"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-16T18:08:51Z",
          "updatedAt": "2020-10-16T18:08:51Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Got it ;)",
              "createdAt": "2020-10-16T18:08:51Z",
              "updatedAt": "2020-10-19T15:43:29Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExMTczNTky",
          "commit": {
            "abbreviatedOid": "c060030"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-18T19:18:33Z",
          "updatedAt": "2020-10-18T19:18:33Z",
          "comments": [
            {
              "originalPosition": 2,
              "body": "Ok ;)",
              "createdAt": "2020-10-18T19:18:33Z",
              "updatedAt": "2020-10-19T15:43:29Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExMTczODQ2",
          "commit": {
            "abbreviatedOid": "c060030"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-18T19:21:43Z",
          "updatedAt": "2020-10-18T19:21:43Z",
          "comments": [
            {
              "originalPosition": 58,
              "body": "Changed ;)",
              "createdAt": "2020-10-18T19:21:43Z",
              "updatedAt": "2020-10-19T15:43:29Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExMTc0MDAy",
          "commit": {
            "abbreviatedOid": "c060030"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-18T19:23:43Z",
          "updatedAt": "2020-10-18T19:23:43Z",
          "comments": [
            {
              "originalPosition": 59,
              "body": "I'll do that in another PR.",
              "createdAt": "2020-10-18T19:23:43Z",
              "updatedAt": "2020-10-19T15:43:29Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExMjAwMjMz",
          "commit": {
            "abbreviatedOid": "a070f6a"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-18T20:59:09Z",
          "updatedAt": "2020-10-18T20:59:10Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "I'll open an issue for tracking this.",
              "createdAt": "2020-10-18T20:59:09Z",
              "updatedAt": "2020-10-19T15:43:29Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExNzkxMDAx",
          "commit": {
            "abbreviatedOid": "a070f6a"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2020-10-19T13:58:30Z",
          "updatedAt": "2020-10-19T13:59:59Z",
          "comments": [
            {
              "originalPosition": 72,
              "body": "Why are these separate? The only difference between VOPRF and OPRF the mode, right?",
              "createdAt": "2020-10-19T13:58:30Z",
              "updatedAt": "2020-10-19T15:43:29Z"
            },
            {
              "originalPosition": 72,
              "body": "(I recommend deleting them)",
              "createdAt": "2020-10-19T13:58:50Z",
              "updatedAt": "2020-10-19T15:43:29Z"
            },
            {
              "originalPosition": 22,
              "body": "Why is \"Point\" needed?",
              "createdAt": "2020-10-19T13:59:21Z",
              "updatedAt": "2020-10-19T15:43:29Z"
            },
            {
              "originalPosition": 60,
              "body": "I'd revert this change. ",
              "createdAt": "2020-10-19T13:59:54Z",
              "updatedAt": "2020-10-19T15:43:29Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExODkxMzY3",
          "commit": {
            "abbreviatedOid": "a070f6a"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-19T15:31:16Z",
          "updatedAt": "2020-10-19T15:31:17Z",
          "comments": [
            {
              "originalPosition": 60,
              "body": "OK. ",
              "createdAt": "2020-10-19T15:31:17Z",
              "updatedAt": "2020-10-19T15:43:29Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExODkzMTc3",
          "commit": {
            "abbreviatedOid": "a070f6a"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-19T15:33:03Z",
          "updatedAt": "2020-10-19T15:33:04Z",
          "comments": [
            {
              "originalPosition": 72,
              "body": "Yes.. it was manly to address a comment by @armfazh that the names of the ciphersuites do not reflect the mode, as, in the past, it was only: `OPRF-P256-SHA256-SSWU-RO`. I'll delete them.",
              "createdAt": "2020-10-19T15:33:03Z",
              "updatedAt": "2020-10-19T15:43:29Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExODk0MTA1",
          "commit": {
            "abbreviatedOid": "a070f6a"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-19T15:33:59Z",
          "updatedAt": "2020-10-19T15:33:59Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "Not really needed. It was for debugging.",
              "createdAt": "2020-10-19T15:33:59Z",
              "updatedAt": "2020-10-19T15:43:29Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExOTQzMTE2",
          "commit": {
            "abbreviatedOid": "54dd331"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-10-19T16:25:56Z",
          "updatedAt": "2020-10-19T16:25:56Z",
          "comments": []
        }
      ]
    },
    {
      "number": 160,
      "id": "MDExOlB1bGxSZXF1ZXN0NTA0ODU5NjI1",
      "title": "Remove note about big endian storage.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/160",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #148.",
      "createdAt": "2020-10-16T13:41:05Z",
      "updatedAt": "2020-11-10T14:40:00Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "be81e97a16dac7fa0a6b93bda85e8c5d4a934740",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/remove-endian-note",
      "headRefOid": "e4c47a0548803a3288629565ed465df72007e758",
      "closedAt": "2020-10-17T16:05:56Z",
      "mergedAt": "2020-10-17T16:05:56Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "6557b831a3f9f6fd745daea7bc31cd9551c3def3"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwOTU5ODk3",
          "commit": {
            "abbreviatedOid": "e4c47a0"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-10-17T07:53:42Z",
          "updatedAt": "2020-10-17T07:53:42Z",
          "comments": []
        }
      ]
    },
    {
      "number": 161,
      "id": "MDExOlB1bGxSZXF1ZXN0NTA0ODY3NzEy",
      "title": "Change placeholder DST.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/161",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #143.\r\n\r\ncc @davidben",
      "createdAt": "2020-10-16T13:51:42Z",
      "updatedAt": "2020-11-10T14:39:58Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "4cb07ebc3c98bf1324a7dda0e2ec224a4327ee13",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/change-dst",
      "headRefOid": "638df93e14794724400988b38caee5155ec35b88",
      "closedAt": "2020-10-17T16:09:50Z",
      "mergedAt": "2020-10-17T16:09:50Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "4338efd66ce5f513e4acefaaa48d470c22f16dfa"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "That's already in the change:\r\n\r\n```\r\n[[RFC editor: please change \"VOPRF05\" to \"RFCXXXX\", where XXXX is the final number, here and elsewhere before publication.]]\r\n```",
          "createdAt": "2020-10-17T16:07:20Z",
          "updatedAt": "2020-10-17T16:07:20Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwOTU5ODQw",
          "commit": {
            "abbreviatedOid": "02e2835"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good! Do we need something like this somewhere:\r\n\r\n> \r\n\r\n    [[RFC editor: please change \"HPKE-05\" to \"RFCXXXX\", where XXXX is the final number, before publication.]]\r\n\r\nas mentioned in #143?",
          "createdAt": "2020-10-17T07:52:31Z",
          "updatedAt": "2020-10-17T07:52:31Z",
          "comments": []
        }
      ]
    },
    {
      "number": 162,
      "id": "MDExOlB1bGxSZXF1ZXN0NTA0ODcxMzAy",
      "title": "Remove serialized generator from the context string.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/162",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The suite ID covers this value, so it's not necessary to include in the hash input.\r\n\r\nCloses #147.\r\n\r\nThanks, @davidben!",
      "createdAt": "2020-10-16T13:57:12Z",
      "updatedAt": "2020-11-10T14:39:59Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "6557b831a3f9f6fd745daea7bc31cd9551c3def3",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/remove-serialized-gen",
      "headRefOid": "e067eca1103880a399b8607efa0883438da7c259",
      "closedAt": "2020-10-17T16:06:52Z",
      "mergedAt": "2020-10-17T16:06:52Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "4cb07ebc3c98bf1324a7dda0e2ec224a4327ee13"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwOTU5ODg1",
          "commit": {
            "abbreviatedOid": "8744204"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-10-17T07:53:19Z",
          "updatedAt": "2020-10-17T07:53:19Z",
          "comments": []
        }
      ]
    },
    {
      "number": 166,
      "id": "MDExOlB1bGxSZXF1ZXN0NTA2MDQwMzE3",
      "title": "Fix a seed used to derive all test vectors.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/166",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "cc @claucece ",
      "createdAt": "2020-10-19T14:41:42Z",
      "updatedAt": "2020-11-10T14:39:58Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "f4d1a6586609184e930ba35d698698c72a8062c4",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/deterministic-seeds",
      "headRefOid": "89533bc9afc896c4a49210c35ea8ae930acf6bda",
      "closedAt": "2020-10-19T16:22:50Z",
      "mergedAt": "2020-10-19T16:22:50Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "ed52d45b15f428dfba77b4b71c7828106f06ea27"
      },
      "comments": [
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thank you! Looks great.",
          "createdAt": "2020-10-19T15:44:25Z",
          "updatedAt": "2020-10-19T15:44:25Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 167,
      "id": "MDExOlB1bGxSZXF1ZXN0NTA2MzA5NTE5",
      "title": "Make vectors deterministic",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/167",
      "state": "CLOSED",
      "author": "claucece",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This fixes the deterministic seed, as apparently it has to be used immediately before calling any other random module function: https://pynative.com/python-random-seed/ \r\n\r\ncc./ @chris-wood ",
      "createdAt": "2020-10-19T22:11:09Z",
      "updatedAt": "2020-10-19T22:33:43Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "37afd613897bfbd722ada6d126f0ea8bcf9da0d9",
      "headRepository": "claucece/draft-irtf-cfrg-voprf",
      "headRefName": "master",
      "headRefOid": "7643dec44db39f8f5d0825fd855666832a5f5f26",
      "closedAt": "2020-10-19T22:33:43Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 169,
      "id": "MDExOlB1bGxSZXF1ZXN0NTA2ODUzMDgw",
      "title": "Address issues in the draft",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/169",
      "state": "MERGED",
      "author": "claucece",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-10-20T14:30:33Z",
      "updatedAt": "2020-10-26T19:03:09Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "37afd613897bfbd722ada6d126f0ea8bcf9da0d9",
      "headRepository": "claucece/draft-irtf-cfrg-voprf",
      "headRefName": "master",
      "headRefOid": "c2ea70fb8b5c70aaee18cba68c510de75f0de706",
      "closedAt": "2020-10-26T19:03:09Z",
      "mergedAt": "2020-10-26T19:03:09Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "0b677c52483da13a1eb72ee62455e4206d74e939"
      },
      "comments": [
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@armfazh @chris-wood please, review until here prior to me changing the poc vectors.",
          "createdAt": "2020-10-23T18:53:24Z",
          "updatedAt": "2020-10-23T18:53:24Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@claucece is this now ready for a full review, or is it still WIP?",
          "createdAt": "2020-10-23T19:23:39Z",
          "updatedAt": "2020-10-23T19:23:39Z"
        },
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@chris-wood this should close: #168 #163 #155 #154 #152 #151 #142.. I'm still missing to solve #165.. can you maybe take a look at the issue?",
          "createdAt": "2020-10-26T10:55:37Z",
          "updatedAt": "2020-10-26T10:55:37Z"
        },
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@chris-wood @armfazh it is ready now.",
          "createdAt": "2020-10-26T15:44:47Z",
          "updatedAt": "2020-10-26T15:44:47Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1MTI4NDU3",
          "commit": {
            "abbreviatedOid": "dae1265"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2020-10-22T21:21:11Z",
          "updatedAt": "2020-10-22T21:26:44Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "```suggestion\r\n  - Name: ristretto255 {{RISTRETTO}}\r\n```",
              "createdAt": "2020-10-22T21:21:11Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            },
            {
              "originalPosition": 26,
              "body": "Can we reference the relevant hash-to-curve section in the document?",
              "createdAt": "2020-10-22T21:21:39Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            },
            {
              "originalPosition": 41,
              "body": "Can we simply reference the [`Encode`](https://tools.ietf.org/html/draft-irtf-cfrg-ristretto255-decaf448-00#section-4.3.2) and `Decode` APIs? We shouldn't specify anything else, I think. ",
              "createdAt": "2020-10-22T21:23:25Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            },
            {
              "originalPosition": 9,
              "body": "```suggestion\r\n```",
              "createdAt": "2020-10-22T21:24:22Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            },
            {
              "originalPosition": 60,
              "body": "```suggestion\r\n```",
              "createdAt": "2020-10-22T21:24:31Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            },
            {
              "originalPosition": 41,
              "body": "(DItto for decaf448)",
              "createdAt": "2020-10-22T21:24:46Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            },
            {
              "originalPosition": 26,
              "body": "Those sections are [here for ristretto255](https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-10#appendix-B) and [here for decaf448](https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-10#appendix-C)",
              "createdAt": "2020-10-22T21:25:52Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1MTYzMjgw",
          "commit": {
            "abbreviatedOid": "dae1265"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-22T22:27:19Z",
          "updatedAt": "2020-10-22T22:27:19Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "ok ;)",
              "createdAt": "2020-10-22T22:27:19Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1MTY0NTk4",
          "commit": {
            "abbreviatedOid": "dae1265"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-22T22:30:19Z",
          "updatedAt": "2020-10-22T22:30:20Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "For elements (or points), yes, there is no need of anything but the encode and decode. But for scalars, these are not the functions specified for them. That is why I added a serialization of them in accordance with the Ristretto draft.",
              "createdAt": "2020-10-22T22:30:20Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1MTY0NzU4",
          "commit": {
            "abbreviatedOid": "dae1265"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-22T22:30:44Z",
          "updatedAt": "2020-10-22T22:30:44Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "Ok.",
              "createdAt": "2020-10-22T22:30:44Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1MTY0ODI1",
          "commit": {
            "abbreviatedOid": "dae1265"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-22T22:30:53Z",
          "updatedAt": "2020-10-22T22:30:54Z",
          "comments": [
            {
              "originalPosition": 60,
              "body": "Ok.",
              "createdAt": "2020-10-22T22:30:53Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1MjIyMzIx",
          "commit": {
            "abbreviatedOid": "7c7e506"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-23T01:32:41Z",
          "updatedAt": "2020-10-23T01:32:42Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "Serialization of scalars is mostly universal, since they are positive numbers less than group order. Then implementor can just call I2OSP \r\n\r\n",
              "createdAt": "2020-10-23T01:32:42Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1ODU1ODc1",
          "commit": {
            "abbreviatedOid": "3a82a9d"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-23T17:10:50Z",
          "updatedAt": "2020-10-23T17:10:50Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "Removed now. ",
              "createdAt": "2020-10-23T17:10:50Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1OTI3ODMx",
          "commit": {
            "abbreviatedOid": "c4ccb5a"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-23T18:53:01Z",
          "updatedAt": "2020-10-23T18:53:01Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "Done :)",
              "createdAt": "2020-10-23T18:53:01Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1ODg2ODEx",
          "commit": {
            "abbreviatedOid": "e0b3d26"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Some comments",
          "createdAt": "2020-10-23T17:56:51Z",
          "updatedAt": "2020-10-23T18:53:47Z",
          "comments": [
            {
              "originalPosition": 83,
              "body": "display all numbers in hex na dprefix them with 0x,\r\nso people don't confuse numbers with bytes.",
              "createdAt": "2020-10-23T17:56:51Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            },
            {
              "originalPosition": 87,
              "body": "```suggestion\r\n    The byte encoding of the generator is:\r\n```",
              "createdAt": "2020-10-23T17:59:25Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            },
            {
              "originalPosition": 5,
              "body": "```suggestion\r\n- Order(): Outputs the order of GG (i.e. `p`).\r\n```",
              "createdAt": "2020-10-23T18:06:02Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            },
            {
              "originalPosition": 16,
              "body": "```suggestion\r\n  defined in {{I-D.irtf-cfrg-hash-to-curve}} setting the target field to GF(p).\r\n```",
              "createdAt": "2020-10-23T18:09:10Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            },
            {
              "originalPosition": 26,
              "body": "In the spec, the Setup functions are called once, so they are in charge to generate keys. \r\nOtherwise, you also need to specify how those keys were generated.\r\n",
              "createdAt": "2020-10-23T18:11:35Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            },
            {
              "originalPosition": 36,
              "body": "revert this",
              "createdAt": "2020-10-23T18:11:57Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            },
            {
              "originalPosition": 130,
              "body": "```suggestion\r\n  - Deserialization: Converts a valid 32-byte string to \r\n    a group element by using the 'Decode' function from {{!RISTRETTO}}.\r\n```",
              "createdAt": "2020-10-23T18:15:18Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            },
            {
              "originalPosition": 128,
              "body": "```suggestion\r\n  - Serialization: Converts a group element to a 32-byte string \r\n    using the 'Encode' function from {{!RISTRETTO}}.\r\n```",
              "createdAt": "2020-10-23T18:16:15Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            },
            {
              "originalPosition": 115,
              "body": "Following Appendix B of hash to curve draft.\r\nit might be:  VOPRF05-ristretto25519\\_XMD:SHA-256\\_RS255MAP\\_RO\\_",
              "createdAt": "2020-10-23T18:51:46Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            },
            {
              "originalPosition": 204,
              "body": "likewise `VOPRF05-decaf448_XMD:SHA-512_D448MAP_RO_`",
              "createdAt": "2020-10-23T18:53:21Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1OTMyMTMy",
          "commit": {
            "abbreviatedOid": "4b7692a"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-23T18:59:55Z",
          "updatedAt": "2020-10-23T18:59:55Z",
          "comments": [
            {
              "originalPosition": 87,
              "body": "Ok.",
              "createdAt": "2020-10-23T18:59:55Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1OTMyNTAx",
          "commit": {
            "abbreviatedOid": "4b7692a"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-23T19:00:30Z",
          "updatedAt": "2020-10-23T19:00:30Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Ok.",
              "createdAt": "2020-10-23T19:00:30Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1OTMyNzk4",
          "commit": {
            "abbreviatedOid": "4b7692a"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-23T19:01:00Z",
          "updatedAt": "2020-10-23T19:01:00Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "Ok.",
              "createdAt": "2020-10-23T19:01:00Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1OTMzNTE3",
          "commit": {
            "abbreviatedOid": "4b7692a"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-23T19:02:12Z",
          "updatedAt": "2020-10-23T19:02:12Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "Mmm.. this was trying to solve: https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/168.. what do you suggest instead?",
              "createdAt": "2020-10-23T19:02:12Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1OTM0MzE0",
          "commit": {
            "abbreviatedOid": "4b7692a"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-23T19:03:34Z",
          "updatedAt": "2020-10-23T19:03:35Z",
          "comments": [
            {
              "originalPosition": 130,
              "body": "Ok.",
              "createdAt": "2020-10-23T19:03:34Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1OTM0ODQ3",
          "commit": {
            "abbreviatedOid": "4b7692a"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-23T19:04:26Z",
          "updatedAt": "2020-10-23T19:04:26Z",
          "comments": [
            {
              "originalPosition": 128,
              "body": "Ok.",
              "createdAt": "2020-10-23T19:04:26Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1OTM0OTQ1",
          "commit": {
            "abbreviatedOid": "4b7692a"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-23T19:04:35Z",
          "updatedAt": "2020-10-23T19:04:36Z",
          "comments": [
            {
              "originalPosition": 115,
              "body": "Solved.",
              "createdAt": "2020-10-23T19:04:36Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1OTM0OTky",
          "commit": {
            "abbreviatedOid": "4b7692a"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-23T19:04:40Z",
          "updatedAt": "2020-10-23T19:04:41Z",
          "comments": [
            {
              "originalPosition": 204,
              "body": "Solved.",
              "createdAt": "2020-10-23T19:04:41Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1OTM3NTk5",
          "commit": {
            "abbreviatedOid": "be56001"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-23T19:09:13Z",
          "updatedAt": "2020-10-23T19:09:13Z",
          "comments": [
            {
              "originalPosition": 83,
              "body": "Solved. ",
              "createdAt": "2020-10-23T19:09:13Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1OTQ0Mzg3",
          "commit": {
            "abbreviatedOid": "be56001"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-23T19:21:02Z",
          "updatedAt": "2020-10-23T19:21:03Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "No, please don't revert this. We need to allow context setup using external keys. This is needed for OPAQUE.",
              "createdAt": "2020-10-23T19:21:02Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1OTQ0NDg5",
          "commit": {
            "abbreviatedOid": "be56001"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-23T19:21:12Z",
          "updatedAt": "2020-10-23T19:21:13Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "This is fine as-is. Please keep it.",
              "createdAt": "2020-10-23T19:21:12Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1OTQ0OTMx",
          "commit": {
            "abbreviatedOid": "be56001"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-10-23T19:22:03Z",
          "updatedAt": "2020-10-23T19:22:03Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1OTUwMTUz",
          "commit": {
            "abbreviatedOid": "be56001"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-23T19:31:06Z",
          "updatedAt": "2020-10-23T19:31:06Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "Let's remove this line, and assert that `skS` is valid in the text. We can then say that `KeyGen` is used to generate `skS` (and `pkS` for the verifiable mode) and passed to `SetupBaseServer` when needed.",
              "createdAt": "2020-10-23T19:31:06Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MDM3NDQw",
          "commit": {
            "abbreviatedOid": "be56001"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-23T22:11:33Z",
          "updatedAt": "2020-10-23T22:11:33Z",
          "comments": [
            {
              "originalPosition": 218,
              "body": "```suggestion\r\n    directly corresponds with scalar multiplication in the Edwards curve.\r\n```",
              "createdAt": "2020-10-23T22:11:33Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MDM3NjI2",
          "commit": {
            "abbreviatedOid": "be56001"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-23T22:12:07Z",
          "updatedAt": "2020-10-23T22:12:08Z",
          "comments": [
            {
              "originalPosition": 178,
              "body": "```suggestion\r\n    directly corresponds with scalar multiplication in the Edwards curve.\r\n```",
              "createdAt": "2020-10-23T22:12:07Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MDM3ODY4",
          "commit": {
            "abbreviatedOid": "be56001"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-10-23T22:12:53Z",
          "updatedAt": "2020-10-23T22:12:53Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2NjYwOTI4",
          "commit": {
            "abbreviatedOid": "be56001"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-26T10:53:39Z",
          "updatedAt": "2020-10-26T10:53:39Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "Ok ;)",
              "createdAt": "2020-10-26T10:53:39Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2NjY1NzI4",
          "commit": {
            "abbreviatedOid": "be56001"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-26T11:00:07Z",
          "updatedAt": "2020-10-26T11:00:08Z",
          "comments": [
            {
              "originalPosition": 178,
              "body": "Done",
              "createdAt": "2020-10-26T11:00:07Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2NjY1ODE5",
          "commit": {
            "abbreviatedOid": "be56001"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-26T11:00:14Z",
          "updatedAt": "2020-10-26T11:00:14Z",
          "comments": [
            {
              "originalPosition": 218,
              "body": "Done.",
              "createdAt": "2020-10-26T11:00:14Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2Njc1NjE4",
          "commit": {
            "abbreviatedOid": "be56001"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-26T11:14:14Z",
          "updatedAt": "2020-10-26T11:14:14Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "I think is solved now ;)",
              "createdAt": "2020-10-26T11:14:14Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2Njc2MjE4",
          "commit": {
            "abbreviatedOid": "39c651c"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-26T11:15:09Z",
          "updatedAt": "2020-10-26T11:15:09Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "Ok ;)",
              "createdAt": "2020-10-26T11:15:09Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MDE1Njcx",
          "commit": {
            "abbreviatedOid": "7937500"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-10-26T17:29:21Z",
          "updatedAt": "2020-10-26T17:29:21Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MDI0MDI5",
          "commit": {
            "abbreviatedOid": "7937500"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Nearly there! ",
          "createdAt": "2020-10-26T17:39:05Z",
          "updatedAt": "2020-10-26T17:44:04Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "This is redundant with the sentence above, I think. \r\n\r\n```suggestion\r\n```",
              "createdAt": "2020-10-26T17:39:05Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            },
            {
              "originalPosition": 50,
              "body": "```suggestion\r\n```",
              "createdAt": "2020-10-26T17:39:41Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            },
            {
              "originalPosition": 114,
              "body": "Isn't it also true that `FullEvaluate` is not used in the main OPRF protocol? If so, can we note that?",
              "createdAt": "2020-10-26T17:40:29Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            },
            {
              "originalPosition": 115,
              "body": "```suggestion\r\n`FullEvaluate` and takes ClientInput values, and it is useful for applications\r\nthat need to compute the whole OPRF protocol on the server side only.\r\n```",
              "createdAt": "2020-10-26T17:40:55Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            },
            {
              "originalPosition": 121,
              "body": "```suggestion\r\nexposed as an API for building higher-level protocols.\r\n\r\nNote that `FullEvaluate` and `VerifyFinalize` are not used in \r\nthe main OPRF protocol.\r\n```",
              "createdAt": "2020-10-26T17:41:29Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            },
            {
              "originalPosition": 162,
              "body": "```suggestion\r\noutput. This functionality lets applications batch inputs together to\r\n```",
              "createdAt": "2020-10-26T17:41:52Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            },
            {
              "originalPosition": 193,
              "body": "Is the generator useful information for ristretto255? (I don't think users need it to implement the OPRF, right?)",
              "createdAt": "2020-10-26T17:42:20Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            },
            {
              "originalPosition": 219,
              "body": "```suggestion\r\n  - Scalar multiplication: Scalar multiplication according to {{!RISTRETTO}}.\r\n```",
              "createdAt": "2020-10-26T17:43:26Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            },
            {
              "originalPosition": 233,
              "body": "Ditto here for the decaf448 generator.",
              "createdAt": "2020-10-26T17:43:33Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            },
            {
              "originalPosition": 259,
              "body": "```suggestion\r\n  - Scalar multiplication: Scalar multiplication according to {{!RISTRETTO}}.\r\n```",
              "createdAt": "2020-10-26T17:43:55Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MDMxMzU5",
          "commit": {
            "abbreviatedOid": "7937500"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-26T17:47:49Z",
          "updatedAt": "2020-10-26T17:47:50Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "Ok. ",
              "createdAt": "2020-10-26T17:47:49Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MDMyNzE4",
          "commit": {
            "abbreviatedOid": "7937500"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-26T17:49:26Z",
          "updatedAt": "2020-10-26T17:49:26Z",
          "comments": [
            {
              "originalPosition": 114,
              "body": "Yes!",
              "createdAt": "2020-10-26T17:49:26Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MDM3OTkz",
          "commit": {
            "abbreviatedOid": "7937500"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-26T17:55:40Z",
          "updatedAt": "2020-10-26T17:55:40Z",
          "comments": [
            {
              "originalPosition": 193,
              "body": "They do. You do:\r\n\r\n```\r\n  G = GG.Generator()\r\n```\r\n\r\nfor `GenerateProof()`.",
              "createdAt": "2020-10-26T17:55:40Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MDM4OTk0",
          "commit": {
            "abbreviatedOid": "7937500"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-26T17:56:53Z",
          "updatedAt": "2020-10-26T17:56:53Z",
          "comments": [
            {
              "originalPosition": 219,
              "body": "Done.",
              "createdAt": "2020-10-26T17:56:53Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MDM5Nzc3",
          "commit": {
            "abbreviatedOid": "7937500"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-26T17:57:48Z",
          "updatedAt": "2020-10-26T17:57:48Z",
          "comments": [
            {
              "originalPosition": 259,
              "body": "Done.",
              "createdAt": "2020-10-26T17:57:48Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MDQwMTQx",
          "commit": {
            "abbreviatedOid": "7937500"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-26T17:58:14Z",
          "updatedAt": "2020-10-26T17:58:14Z",
          "comments": [
            {
              "originalPosition": 50,
              "body": "Ok.",
              "createdAt": "2020-10-26T17:58:14Z",
              "updatedAt": "2020-10-26T19:02:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MDgxNzE0",
          "commit": {
            "abbreviatedOid": "37e4a31"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-10-26T18:52:10Z",
          "updatedAt": "2020-10-26T18:52:10Z",
          "comments": []
        }
      ]
    },
    {
      "number": 170,
      "id": "MDExOlB1bGxSZXF1ZXN0NTEwODA4ODM1",
      "title": "Change dst of hashToGroup #165",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/170",
      "state": "MERGED",
      "author": "claucece",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-10-27T14:44:35Z",
      "updatedAt": "2020-10-28T12:33:36Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "0b677c52483da13a1eb72ee62455e4206d74e939",
      "headRepository": "claucece/draft-irtf-cfrg-voprf",
      "headRefName": "master",
      "headRefOid": "b9b88a0c5e997dcfba1fe16907d27f7f374433b2",
      "closedAt": "2020-10-28T12:33:36Z",
      "mergedAt": "2020-10-28T12:33:36Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "b983cd46b09812e15a591a3ca67670fa561391c7"
      },
      "comments": [
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "cc. @chris-wood @armfazh ",
          "createdAt": "2020-10-27T14:45:06Z",
          "updatedAt": "2020-10-27T14:45:06Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MjYwMTgy",
          "commit": {
            "abbreviatedOid": "59bc330"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2020-10-28T01:20:32Z",
          "updatedAt": "2020-10-28T01:20:37Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "`self.contextString` is a little hard to parse here (out of context), so how about:\r\n\r\n```suggestion\r\n    \"VOPRF05\" || contextString, where `contextString` is that which is computed in the Setup functions.\r\n```\r\n\r\n(or something like that)\r\n",
              "createdAt": "2020-10-28T01:20:32Z",
              "updatedAt": "2020-10-28T12:32:51Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4NTU5MTA0",
          "commit": {
            "abbreviatedOid": "59bc330"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-28T11:23:13Z",
          "updatedAt": "2020-10-28T11:23:13Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "Changed.",
              "createdAt": "2020-10-28T11:23:13Z",
              "updatedAt": "2020-10-28T12:32:51Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4NjA4ODAw",
          "commit": {
            "abbreviatedOid": "bffc55d"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-10-28T12:31:29Z",
          "updatedAt": "2020-10-28T12:32:20Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\n    \"VOPRF05\" || contextString, where `contextString` is that which is\r\n```",
              "createdAt": "2020-10-28T12:31:29Z",
              "updatedAt": "2020-10-28T12:32:51Z"
            },
            {
              "originalPosition": 19,
              "body": "```suggestion\r\n    \"VOPRF05\" || contextString, where `contextString` is that which is\r\n```",
              "createdAt": "2020-10-28T12:31:54Z",
              "updatedAt": "2020-10-28T12:32:51Z"
            },
            {
              "originalPosition": 31,
              "body": "```suggestion\r\n    \"VOPRF05\" || contextString, where `contextString` is that which is\r\n```",
              "createdAt": "2020-10-28T12:32:00Z",
              "updatedAt": "2020-10-28T12:32:51Z"
            },
            {
              "originalPosition": 43,
              "body": "```suggestion\r\n    \"VOPRF05\" || contextString, where `contextString` is that which is\r\n```",
              "createdAt": "2020-10-28T12:32:06Z",
              "updatedAt": "2020-10-28T12:32:51Z"
            },
            {
              "originalPosition": 55,
              "body": "```suggestion\r\n    \"VOPRF05\" || contextString, where `contextString` is that which is\r\n```",
              "createdAt": "2020-10-28T12:32:13Z",
              "updatedAt": "2020-10-28T12:32:51Z"
            }
          ]
        }
      ]
    },
    {
      "number": 172,
      "id": "MDExOlB1bGxSZXF1ZXN0NTExNTIxNzc1",
      "title": "Clean up ciphersuite section. Fix some references too.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/172",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This does a couple things:\r\n\r\n- Removes `Order()` -- it was never used.\r\n- Unifies Serialization content. \r\n- Removes scalar multiplication instructions, as I think these are unnecessary.\r\n\r\nIt also fixes some references (uses updated versions and removes unused references).\r\n\r\ncc @claucece ",
      "createdAt": "2020-10-28T12:49:32Z",
      "updatedAt": "2020-11-10T14:39:57Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "b983cd46b09812e15a591a3ca67670fa561391c7",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/cleanup-suites-and-refs",
      "headRefOid": "6c50301ab7d12eea9f90a5fd993521dff8f5cfd2",
      "closedAt": "2020-10-28T16:27:46Z",
      "mergedAt": "2020-10-28T16:27:45Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "e41082d92c95c5e098872cc15afcbdd03cfec109"
      },
      "comments": [
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "LGTM. Thanks!",
          "createdAt": "2020-10-28T13:25:57Z",
          "updatedAt": "2020-10-28T13:25:57Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 173,
      "id": "MDExOlB1bGxSZXF1ZXN0NTExNzE2Nzcx",
      "title": "replaces client by self in contextString",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/173",
      "state": "MERGED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-10-28T17:26:41Z",
      "updatedAt": "2020-10-29T00:20:00Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "e41082d92c95c5e098872cc15afcbdd03cfec109",
      "headRepository": "armfazh/draft-irtf-cfrg-voprf",
      "headRefName": "patch-1",
      "headRefOid": "2b2a288cc928a87e668e386874ba96406f7bc868",
      "closedAt": "2020-10-29T00:20:00Z",
      "mergedAt": "2020-10-29T00:20:00Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "b85b915c5ece2fe99cd39afc15107c1f16db3b35"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5MjAxOTAx",
          "commit": {
            "abbreviatedOid": "2b2a288"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Good catch -- I didn't notice this.",
          "createdAt": "2020-10-29T00:19:55Z",
          "updatedAt": "2020-10-29T00:19:55Z",
          "comments": []
        }
      ]
    },
    {
      "number": 175,
      "id": "MDExOlB1bGxSZXF1ZXN0NTEyMzI5MTI2",
      "title": "Update POC",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/175",
      "state": "MERGED",
      "author": "claucece",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-10-29T14:45:59Z",
      "updatedAt": "2020-10-30T18:04:54Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "b85b915c5ece2fe99cd39afc15107c1f16db3b35",
      "headRepository": "claucece/draft-irtf-cfrg-voprf",
      "headRefName": "master",
      "headRefOid": "c869e617d9590da4582637752c9a9e26e0f1b42d",
      "closedAt": "2020-10-30T18:04:54Z",
      "mergedAt": "2020-10-30T18:04:53Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "e9ab7975c888d574b6b723b4ae8a003ab6a93055"
      },
      "comments": [
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@chris-wood all methods implemented now. There are some todos, I'll solve tomorrow. There is a really weird python error with `expand_message_xof`, which idk why is occurring. If you can, please, check it.",
          "createdAt": "2020-10-30T00:20:50Z",
          "updatedAt": "2020-10-30T00:20:50Z"
        },
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@chris-wood solved the bug now. Except for a check I want to do tomorrow and some recfator, this is now done.",
          "createdAt": "2020-10-30T01:36:13Z",
          "updatedAt": "2020-10-30T01:36:13Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwMDc0MDUz",
          "commit": {
            "abbreviatedOid": "65c6b4d"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-29T20:54:41Z",
          "updatedAt": "2020-10-29T20:54:42Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Why did we remove these? Aren't they needed?",
              "createdAt": "2020-10-29T20:54:42Z",
              "updatedAt": "2020-10-30T12:12:35Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwMDkzMjc3",
          "commit": {
            "abbreviatedOid": "dcad238"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-29T21:15:25Z",
          "updatedAt": "2020-10-29T21:15:25Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "They were not used anywhere, not sure why they were there..",
              "createdAt": "2020-10-29T21:15:25Z",
              "updatedAt": "2020-10-30T12:12:35Z"
            }
          ]
        }
      ]
    },
    {
      "number": 176,
      "id": "MDExOlB1bGxSZXF1ZXN0NTEzMjE5ODUw",
      "title": "Refactor to remove special-case ristretto255/decaf448 paths.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/176",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "cc @claucece, @armfazh ",
      "createdAt": "2020-10-30T18:57:09Z",
      "updatedAt": "2020-11-10T14:39:56Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "ef887bf21534054a16230309d01d94a0bd6403cd",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/refactor-ristretto",
      "headRefOid": "7c2f5ba57ea2b88758a10c1d7a839ed3c57184eb",
      "closedAt": "2020-10-30T23:20:17Z",
      "mergedAt": "2020-10-30T23:20:17Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "59739a24e25337bd3c190e41f2959bf13c5c0fd6"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwOTY2NTk1",
          "commit": {
            "abbreviatedOid": "629d78a"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-10-30T19:21:32Z",
          "updatedAt": "2020-10-30T19:21:32Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMDcwMDMz",
          "commit": {
            "abbreviatedOid": "629d78a"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-30T22:31:49Z",
          "updatedAt": "2020-10-30T22:36:39Z",
          "comments": [
            {
              "originalPosition": 132,
              "body": "Per ristretto et al draft, it should be:\r\n\r\n```\r\n        u = expand_message_xof(msg, dst, int(112), hashlib.shake_256, 224)\r\n        P1 = self.map(u[0:32])\r\n        P2 = self.map(u[32:64])\r\n        P = P1 + P2\r\n```",
              "createdAt": "2020-10-30T22:31:49Z",
              "updatedAt": "2020-10-30T23:20:02Z"
            },
            {
              "originalPosition": 133,
              "body": "I'm not sure the internals of this.. but it need to be expanded to a 112 array, which will no be given with sha512. That is why it was using shake256. ",
              "createdAt": "2020-10-30T22:32:42Z",
              "updatedAt": "2020-10-30T23:20:02Z"
            },
            {
              "originalPosition": 104,
              "body": "Per ristretto et al draft, it should be:\r\n\r\n```\r\n        u = expand_message_xmd(msg, dst, int(64), hashlib.sha512, 128)\r\n        P1 = self.map(u[0:32])\r\n        P2 = self.map(u[32:64])\r\n        P = P1 + P2\r\n        return P\r\n```",
              "createdAt": "2020-10-30T22:33:16Z",
              "updatedAt": "2020-10-30T23:20:02Z"
            },
            {
              "originalPosition": 105,
              "body": "Here we need to expand it to 64, which I'm not sure the sha256 will give.",
              "createdAt": "2020-10-30T22:33:49Z",
              "updatedAt": "2020-10-30T23:20:02Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMDcxNzIz",
          "commit": {
            "abbreviatedOid": "629d78a"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-30T22:38:02Z",
          "updatedAt": "2020-10-30T22:38:03Z",
          "comments": [
            {
              "originalPosition": 132,
              "body": "No, see: https://tools.ietf.org/html/draft-irtf-cfrg-hash-to-curve-10#appendix-B",
              "createdAt": "2020-10-30T22:38:02Z",
              "updatedAt": "2020-10-30T23:20:02Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMDcxNzY1",
          "commit": {
            "abbreviatedOid": "629d78a"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-30T22:38:10Z",
          "updatedAt": "2020-10-30T22:38:10Z",
          "comments": [
            {
              "originalPosition": 104,
              "body": "See above!",
              "createdAt": "2020-10-30T22:38:10Z",
              "updatedAt": "2020-10-30T23:20:02Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMDcxODkz",
          "commit": {
            "abbreviatedOid": "629d78a"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-30T22:38:40Z",
          "updatedAt": "2020-10-30T22:38:40Z",
          "comments": [
            {
              "originalPosition": 105,
              "body": "See above!",
              "createdAt": "2020-10-30T22:38:40Z",
              "updatedAt": "2020-10-30T23:20:02Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMDczNjgw",
          "commit": {
            "abbreviatedOid": "629d78a"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-30T22:45:08Z",
          "updatedAt": "2020-10-30T22:45:09Z",
          "comments": [
            {
              "originalPosition": 132,
              "body": "I'm not sure about that. See the comment for the `MAP` function in ristretto et al draft:\r\n\r\n```\r\nThe MAP function is defined on a 32-bytes string as:\r\n```\r\n\r\nThe string here is 64. \r\n\r\nWhich means that it should use the one-way-map function of the ristretto et al draft, which is:\r\n\r\n```\r\n1. Compute P1 as \"MAP(b[0:32])\".\r\n2. Compute P2 as \"MAP(b[32:64])\".\r\n3. Return P1 + P2.\r\n```\r\n\r\nMeaning that:\r\n\r\n```\r\n   1. uniform_bytes = expand_message(msg, DST, 64)\r\n   2. P = ristretto255_map(uniform_bytes)\r\n   3. return P\r\n```\r\n\r\n`istretto255_map(uniform_bytes)` refers to the one-way-map. Otherwise, the map will only handle the first 32 bytes.",
              "createdAt": "2020-10-30T22:45:09Z",
              "updatedAt": "2020-10-30T23:20:02Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMDc3MDYy",
          "commit": {
            "abbreviatedOid": "629d78a"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-10-30T22:57:42Z",
          "updatedAt": "2020-10-30T22:57:42Z",
          "comments": [
            {
              "originalPosition": 132,
              "body": "`ristretto255_map` indeed refers to the one-way map, and not the internal `MAP` function. :) ",
              "createdAt": "2020-10-30T22:57:42Z",
              "updatedAt": "2020-10-30T23:20:02Z"
            }
          ]
        }
      ]
    },
    {
      "number": 177,
      "id": "MDExOlB1bGxSZXF1ZXN0NTEzMzI3Mzkz",
      "title": "Use hash_to_group",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/177",
      "state": "MERGED",
      "author": "claucece",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "@chris-wood ",
      "createdAt": "2020-10-30T23:19:04Z",
      "updatedAt": "2020-10-30T23:20:01Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "caw/refactor-ristretto",
      "baseRefOid": "629d78a84d627f6958bf488ff76b2fe7b08e3edc",
      "headRepository": "claucece/draft-irtf-cfrg-voprf",
      "headRefName": "caw/refactor-ristretto",
      "headRefOid": "4da74311296f378f2f14caa01ccabcc98736f757",
      "closedAt": "2020-10-30T23:20:01Z",
      "mergedAt": "2020-10-30T23:20:01Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "7c2f5ba57ea2b88758a10c1d7a839ed3c57184eb"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMDgyNTc3",
          "commit": {
            "abbreviatedOid": "4da7431"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-10-30T23:19:55Z",
          "updatedAt": "2020-10-30T23:19:55Z",
          "comments": []
        }
      ]
    },
    {
      "number": 178,
      "id": "MDExOlB1bGxSZXF1ZXN0NTEzOTY3NzI5",
      "title": "Fix predictable randomness",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/178",
      "state": "MERGED",
      "author": "claucece",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "For decaf and ristretto.",
      "createdAt": "2020-11-02T10:44:43Z",
      "updatedAt": "2020-11-02T15:02:45Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "59739a24e25337bd3c190e41f2959bf13c5c0fd6",
      "headRepository": "claucece/draft-irtf-cfrg-voprf",
      "headRefName": "master",
      "headRefOid": "acff89e923c417cfdd34c95c5f086d4eca605ee3",
      "closedAt": "2020-11-02T15:02:45Z",
      "mergedAt": "2020-11-02T15:02:45Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "3148ab6419838f838ea02246a6c8f1269beaab7c"
      },
      "comments": [
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "cc./ @chris-wood ",
          "createdAt": "2020-11-02T10:44:52Z",
          "updatedAt": "2020-11-02T10:44:52Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxNzA5MjI3",
          "commit": {
            "abbreviatedOid": "acff89e"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-11-02T15:02:39Z",
          "updatedAt": "2020-11-02T15:02:39Z",
          "comments": []
        }
      ]
    },
    {
      "number": 179,
      "id": "MDExOlB1bGxSZXF1ZXN0NTE0MjE5Nzk2",
      "title": "Note base point (generator).",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/179",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "cc @claucece, @armfazh ",
      "createdAt": "2020-11-02T17:43:30Z",
      "updatedAt": "2020-11-10T14:39:56Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "3148ab6419838f838ea02246a6c8f1269beaab7c",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/nit",
      "headRefOid": "36a7f5fa49739dae1a6acf835903362f28baac2a",
      "closedAt": "2020-11-02T17:46:49Z",
      "mergedAt": "2020-11-02T17:46:49Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "d918062798adc4be69d424f272e42700bf920487"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxODYxNzM1",
          "commit": {
            "abbreviatedOid": "36a7f5f"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-11-02T17:46:39Z",
          "updatedAt": "2020-11-02T17:46:39Z",
          "comments": []
        }
      ]
    },
    {
      "number": 180,
      "id": "MDExOlB1bGxSZXF1ZXN0NTE0MjI5MTQ3",
      "title": "Change expand func",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/180",
      "state": "MERGED",
      "author": "claucece",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-11-02T18:02:00Z",
      "updatedAt": "2020-11-02T18:26:58Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "222feacd94adc39ea4525cc43398e68742fc781c",
      "headRepository": "claucece/draft-irtf-cfrg-voprf",
      "headRefName": "master",
      "headRefOid": "42f87bb20b907418dcdc13f879127054dcc375ba",
      "closedAt": "2020-11-02T18:26:58Z",
      "mergedAt": "2020-11-02T18:26:58Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "e09a990450eae5dd28c04e5ddb8ee7fecfad2c61"
      },
      "comments": [
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "cc./ @chris-wood ",
          "createdAt": "2020-11-02T18:05:17Z",
          "updatedAt": "2020-11-02T18:05:17Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxODkwNDg2",
          "commit": {
            "abbreviatedOid": "42f87bb"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-11-02T18:26:54Z",
          "updatedAt": "2020-11-02T18:26:54Z",
          "comments": []
        }
      ]
    },
    {
      "number": 181,
      "id": "MDExOlB1bGxSZXF1ZXN0NTE0MjQzMzY5",
      "title": "Clarify the expand_message implementation for ristretto255 and decaf448.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/181",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This clarifies the change in #180.\r\n\r\ncc @armfazh, @claucece ",
      "createdAt": "2020-11-02T18:30:01Z",
      "updatedAt": "2020-11-10T14:39:55Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "e09a990450eae5dd28c04e5ddb8ee7fecfad2c61",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/clarify-expand-msg",
      "headRefOid": "8e9b1c11e72009448016c4ec4842907a61ee44c7",
      "closedAt": "2020-11-02T22:10:44Z",
      "mergedAt": "2020-11-02T22:10:44Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "ba8f046f0030700ceca00defffdaabaee2a959e2"
      },
      "comments": [
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "LGTM.",
          "createdAt": "2020-11-02T19:05:04Z",
          "updatedAt": "2020-11-02T19:05:04Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxOTY0Njc3",
          "commit": {
            "abbreviatedOid": "1c87be5"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-02T20:20:53Z",
          "updatedAt": "2020-11-02T20:20:54Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\n    {{!I-D.irtf-cfrg-hash-to-curve}} with DST =\r\n```\r\nand the same for other suites.",
              "createdAt": "2020-11-02T20:20:53Z",
              "updatedAt": "2020-11-02T22:10:27Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxOTY1NDc3",
          "commit": {
            "abbreviatedOid": "1c87be5"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-02T20:22:11Z",
          "updatedAt": "2020-11-02T20:22:11Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "Can you please turn the others into suggestions?",
              "createdAt": "2020-11-02T20:22:11Z",
              "updatedAt": "2020-11-02T22:10:27Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxOTY1ODkw",
          "commit": {
            "abbreviatedOid": "1c87be5"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-02T20:22:53Z",
          "updatedAt": "2020-11-02T20:22:54Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "Looking at the .txt output file the use of (') is replaced by quotes. So we might want to remove apostrofes everywhere.",
              "createdAt": "2020-11-02T20:22:53Z",
              "updatedAt": "2020-11-02T22:10:27Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxOTY2NzQw",
          "commit": {
            "abbreviatedOid": "1c87be5"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-02T20:24:21Z",
          "updatedAt": "2020-11-02T20:24:54Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "```suggestion\r\n    {{!I-D.irtf-cfrg-hash-to-curve}} with DST =\r\n```",
              "createdAt": "2020-11-02T20:24:21Z",
              "updatedAt": "2020-11-02T22:10:27Z"
            },
            {
              "originalPosition": 34,
              "body": "```suggestion\r\n    {{!I-D.irtf-cfrg-hash-to-curve}} with DST =\r\n```",
              "createdAt": "2020-11-02T20:24:33Z",
              "updatedAt": "2020-11-02T22:10:27Z"
            },
            {
              "originalPosition": 45,
              "body": "```suggestion\r\n    {{!I-D.irtf-cfrg-hash-to-curve}} with DST =\r\n```",
              "createdAt": "2020-11-02T20:24:41Z",
              "updatedAt": "2020-11-02T22:10:27Z"
            },
            {
              "originalPosition": 56,
              "body": "```suggestion\r\n    {{!I-D.irtf-cfrg-hash-to-curve}} with DST =\r\n```",
              "createdAt": "2020-11-02T20:24:50Z",
              "updatedAt": "2020-11-02T22:10:27Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxOTgwNjUw",
          "commit": {
            "abbreviatedOid": "0a6b7c2"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-02T20:47:32Z",
          "updatedAt": "2020-11-02T20:47:32Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "Hmm... good catch. I'll change that after merging.",
              "createdAt": "2020-11-02T20:47:32Z",
              "updatedAt": "2020-11-02T22:10:27Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxOTg2OTM3",
          "commit": {
            "abbreviatedOid": "344bb8f"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-11-02T20:57:39Z",
          "updatedAt": "2020-11-02T20:57:39Z",
          "comments": []
        }
      ]
    },
    {
      "number": 183,
      "id": "MDExOlB1bGxSZXF1ZXN0NTE0MzYzMjUz",
      "title": "Define KeyGen. Fix escapes.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/183",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses #182.\r\n\r\ncc @armfazh ",
      "createdAt": "2020-11-02T22:15:23Z",
      "updatedAt": "2020-11-10T14:39:48Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "ba8f046f0030700ceca00defffdaabaee2a959e2",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/nits2",
      "headRefOid": "2912dbae976f142ae13b3c24afc4b82baf52c59c",
      "closedAt": "2020-11-02T22:22:40Z",
      "mergedAt": "2020-11-02T22:22:40Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "efbe9863166b998c090bc50e6ba98fa88549ff10"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyMDUzNzYz",
          "commit": {
            "abbreviatedOid": "9a0c369"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-02T22:19:24Z",
          "updatedAt": "2020-11-02T22:19:25Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "```suggestion\r\ngenerates a private and public key pair (`skS`, `pkS`), where `skS` is a\r\nnon-zero element chosen at random from the scalar field of the \r\ncorresponding group and `pkS = ScalarBaseMult(skS)`.\r\n\r\n```",
              "createdAt": "2020-11-02T22:19:24Z",
              "updatedAt": "2020-11-02T22:22:30Z"
            }
          ]
        }
      ]
    },
    {
      "number": 184,
      "id": "MDExOlB1bGxSZXF1ZXN0NTE0MzY5MDc5",
      "title": "Fixing some typos.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/184",
      "state": "MERGED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-11-02T22:29:10Z",
      "updatedAt": "2020-11-02T23:15:49Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "efbe9863166b998c090bc50e6ba98fa88549ff10",
      "headRepository": "armfazh/draft-irtf-cfrg-voprf",
      "headRefName": "armfazh/revNov02",
      "headRefOid": "5d9f92be6725dc8ef2e3a5972f3acc325124b5aa",
      "closedAt": "2020-11-02T23:15:49Z",
      "mergedAt": "2020-11-02T23:15:49Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "86d83a42b269693c0764a7e55ac5e9f60ca77831"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyMDY4ODkz",
          "commit": {
            "abbreviatedOid": "296c476"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2020-11-02T22:29:54Z",
          "updatedAt": "2020-11-02T22:32:10Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "What does \"valid\" mean?",
              "createdAt": "2020-11-02T22:29:54Z",
              "updatedAt": "2020-11-02T23:15:30Z"
            },
            {
              "originalPosition": 55,
              "body": "This wasn't a typo -- it's mean to output both the context and the public key, so the latter can be distributed to clients.\r\n\r\n```suggestion\r\n  return VerifiableServerContext(contextString, skS), pkS\r\n```",
              "createdAt": "2020-11-02T22:31:02Z",
              "updatedAt": "2020-11-02T23:15:30Z"
            },
            {
              "originalPosition": 76,
              "body": "Hah, oops.",
              "createdAt": "2020-11-02T22:31:14Z",
              "updatedAt": "2020-11-02T23:15:30Z"
            },
            {
              "originalPosition": 151,
              "body": "Merge conflict -- please fix.",
              "createdAt": "2020-11-02T22:31:51Z",
              "updatedAt": "2020-11-02T23:15:30Z"
            },
            {
              "originalPosition": 85,
              "body": "Why did we make this change?",
              "createdAt": "2020-11-02T22:32:04Z",
              "updatedAt": "2020-11-02T23:15:30Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyMDcyMDE2",
          "commit": {
            "abbreviatedOid": "6793936"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-02T22:33:08Z",
          "updatedAt": "2020-11-02T22:33:09Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "valid means the output of Serialized,",
              "createdAt": "2020-11-02T22:33:09Z",
              "updatedAt": "2020-11-02T23:15:30Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyMDcyMjY0",
          "commit": {
            "abbreviatedOid": "6793936"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-02T22:33:18Z",
          "updatedAt": "2020-11-02T22:33:18Z",
          "comments": [
            {
              "originalPosition": 55,
              "body": "ok, reverting",
              "createdAt": "2020-11-02T22:33:18Z",
              "updatedAt": "2020-11-02T23:15:30Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyMDcyODc2",
          "commit": {
            "abbreviatedOid": "6793936"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-02T22:33:38Z",
          "updatedAt": "2020-11-02T22:33:39Z",
          "comments": [
            {
              "originalPosition": 85,
              "body": "ComputeComposites returns an array/vector\r\n",
              "createdAt": "2020-11-02T22:33:39Z",
              "updatedAt": "2020-11-02T23:15:30Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyMDkzMjg0",
          "commit": {
            "abbreviatedOid": "274ff98"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-02T23:03:36Z",
          "updatedAt": "2020-11-02T23:03:37Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Can you clarify that?",
              "createdAt": "2020-11-02T23:03:36Z",
              "updatedAt": "2020-11-02T23:15:30Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyMDkzMzY3",
          "commit": {
            "abbreviatedOid": "274ff98"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-02T23:03:47Z",
          "updatedAt": "2020-11-02T23:03:48Z",
          "comments": [
            {
              "originalPosition": 85,
              "body": "Okay, and is this reflected in the Sage code?",
              "createdAt": "2020-11-02T23:03:48Z",
              "updatedAt": "2020-11-02T23:15:30Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyMDk0NTE4",
          "commit": {
            "abbreviatedOid": "274ff98"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-02T23:06:14Z",
          "updatedAt": "2020-11-02T23:06:14Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "yes, see the updated version",
              "createdAt": "2020-11-02T23:06:14Z",
              "updatedAt": "2020-11-02T23:15:30Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyMDk4NjM0",
          "commit": {
            "abbreviatedOid": "274ff98"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-02T23:15:25Z",
          "updatedAt": "2020-11-02T23:15:26Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "```suggestion\r\n- RandomScalar(): A member function of `GG` that chooses at random a\r\n```",
              "createdAt": "2020-11-02T23:15:25Z",
              "updatedAt": "2020-11-02T23:15:30Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyMDk4NzQx",
          "commit": {
            "abbreviatedOid": "5d9f92b"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-11-02T23:15:40Z",
          "updatedAt": "2020-11-02T23:15:40Z",
          "comments": []
        }
      ]
    },
    {
      "number": 185,
      "id": "MDExOlB1bGxSZXF1ZXN0NTE1NDI2NTgz",
      "title": "Change tests vectors",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/185",
      "state": "CLOSED",
      "author": "claucece",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-11-04T14:36:19Z",
      "updatedAt": "2020-11-05T14:15:28Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "e02cf3466fbf033f1e9e92c04b069a8072b31072",
      "headRepository": "claucece/draft-irtf-cfrg-voprf",
      "headRefName": "master",
      "headRefOid": "5a7d45fd2cf45b332314f28b1cacf80d9a7884fa",
      "closedAt": "2020-11-05T14:15:28Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "cc./ @chris-wood ",
          "createdAt": "2020-11-04T14:44:48Z",
          "updatedAt": "2020-11-04T14:44:48Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "Two things,\r\nas I mentioned in the other repo, I prefer to mantain the 0x prefix for test vectors in sage.\r\n\r\nsecond, as you can see test vectors are not running deterministically since the change not only the 0x prefix.",
          "createdAt": "2020-11-04T16:37:21Z",
          "updatedAt": "2020-11-04T16:37:21Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> as I mentioned in the other repo, I prefer to mantain the 0x prefix for test vectors in sage.\r\n\r\nGo can't parse them as-is, so let's drop the prefix.\r\n\r\n> second, as you can see test vectors are not running deterministically since the change not only the 0x prefix.\r\n\r\nRun the following:\r\n\r\n```\r\n$ make vectors\r\n$ cp vectors/allVectors.json vectors.json\r\n$ make vectors\r\n$ diff vectors/allVectors.json vectors.json\r\n```\r\n\r\nAnd you'll see no output change.\r\n",
          "createdAt": "2020-11-04T17:07:55Z",
          "updatedAt": "2020-11-04T17:07:55Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "\r\n> Go can't parse them as-is, so let's drop the prefix.\r\n\r\n```\r\n  s := \"0x6432\"\r\n  fmt.Println( hex.DecodeString(s[2:]))\r\n```\r\n\r\n> And you'll see no output change.\r\n\r\nI may be running things the wrong way, but why vectors change in this PR? \r\n",
          "createdAt": "2020-11-04T17:24:30Z",
          "updatedAt": "2020-11-04T17:24:30Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I'll let @claucece comment on the hex formatting. If Go can parse them, then why are we making this change? :) ",
          "createdAt": "2020-11-04T17:30:30Z",
          "updatedAt": "2020-11-04T17:30:30Z"
        },
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@armfazh @chris-wood , for me the test vectors do change all the time:\r\n\r\n```\r\n~/repos/projects/mine-oprf/poc (master \u2714) \u1405 make vectors\r\nParsing test_oprf.sage\r\nRemoving vectors folder, if present\r\nCreating vectors folder\r\nsage test_oprf.sage\r\nTesting with test Vectors on Ed25519Point\r\nTesting with test Vectors on Ed448GoldilocksPoint\r\nTesting one way map on Ed25519Point\r\nTesting one way map on Ed448GoldilocksPoint\r\n\r\n~/repos/projects/mine-oprf/poc (master \u2718)\u2739 \u1405 cp vectors/allVectors.json vectors.json\r\n\r\n~/repos/projects/mine-oprf/poc (master \u2718)\u2739\u272d \u1405 make vectors\r\nRemoving vectors folder, if present\r\nCreating vectors folder\r\nsage test_oprf.sage\r\nTesting with test Vectors on Ed25519Point\r\nTesting with test Vectors on Ed448GoldilocksPoint\r\nTesting one way map on Ed25519Point\r\nTesting one way map on Ed448GoldilocksPoint\r\n~/repos/projects/mine-oprf/poc (master \u2718)\u2739\u272d \u1405 diff vectors/allVectors.json vectors.json\r\n4c4\r\n<     \"skS\": \"6174f54bbdafdd3bcfd4a06041237b0dba55be738921ac19f934c9916d2e3c53\",\r\n---\r\n>     \"skS\": \"3f3d86c3e0e019c1c5e47d3b1743cf3b333d8459e92f1fa45c1a19c8421ac689\",\r\n9,10c9,10\r\n<           \"BlindedElement\": \"037f8f555d4f6a2c3b21f6a353a52f01bea3b5a2b8436ec2c01a01cf67eee96517\",\r\n<           \"Token\": \"46736c42376170a98651af33ac718e4c44f8220586a8e4ee92157925c3aef53a\"\r\n---\r\n>           \"BlindedElement\": \"02e53afa2302fad27acf2d56bbea38074dbbbc23fb7363c43496769e579d5220d7\",\r\n>           \"Token\": \"83bcf6b5fa1b088c15dc297ae2353f198dac2e3e2fefd7ef7a5f3a9396560271\"\r\n12c12\r\n<         \"ClientOutput\": \"879c5725eef4f560969043f3cf932720f386ab54f9a135106d23e81c30884fcd\",\r\n---\r\n>         \"ClientOutput\": \"656284f1224bf7216757ffc81859aeb334344777b89d1e9ee02a955d7152f146\",\r\n14c14\r\n<           \"EvaluatedElement\": \"039ee453ad56d5fd62228c9b903b9818ba8f096af8edada5256e19a598f1d4190b\"\r\n---\r\n>           \"EvaluatedElement\": \"02239be9838d4ab2d5b7eb03cad5c612f5362f3a1fedeb46660b88d46791811f34\"\r\n20c20\r\n<           \"IssuedToken\": \"02af20a9f92e8bdbca7b2b7b450043a8e349f7ff58327157301814bf0f3585f77c\"\r\n---\r\n>           \"IssuedToken\": \"022c6578d014c3b68ffd5e6138c2b6d352593d4175328b019b8350f6019f375c61\"\r\n25,26c25,26\r\n<           \"BlindedElement\": \"0328a3f25f1cd537e3410f709a014b91744284a610aec49010e424b18190338447\",\r\n<           \"Token\": \"ed8bc3e0f19f3828ac0dda46ffefed869b3573a28845a1cdc8156dda1cb42c82\"\r\n---\r\n>           \"BlindedElement\": \"03e55aa5f117628888914e252f2eb8c40069b8634532cc7c9c1fb0e8f27353890f\",\r\n>           \"Token\": \"17538a0fbdafe78930da224d276e7d03c38c59e8f4c6d683e352d59ad8f1d0e6\"\r\n28c28\r\n<         \"ClientOutput\": \"0a717871858c02c190dc47fe7fa233a66fc65c43b0a4b2114a891f1ac1d13465\",\r\n---\r\n>         \"ClientOutput\": \"bef6f03c6d4e839171c2038ff206efdf9175a1b71702afde959989c1c7316669\",\r\n30c30\r\n<           \"EvaluatedElement\": \"0242331d23898daf954efc95972ee966e4f9d50f6ecb21dfd854dc5b39558805c1\"\r\n---\r\n>           \"EvaluatedElement\": \"039cf32aa7c47d37b39dec187baeedf64ecb288a44641fdc55b6bbba99bd8c3605\"\r\n36c36\r\n<           \"IssuedToken\": \"034cd19cf5644905d8262c548f63c1277498e003c0a543076687ca76764f35ebf7\"\r\n---\r\n>           \"IssuedToken\": \"02e65e3c2f9cbc94d12fbddd1fa848199318890cd6d7604ae5a9c2bfbe24848395\"\r\n41,42c41,42\r\n<           \"BlindedElement\": \"024b37f532b61b952a3c1475ce3fe27df2ef9916287036d52987d8e4de17baff9b\",\r\n<           \"Token\": \"a24e01948190264065c6060ee1ed79677099ee55b43d6b3d9473f5183433b3eb\"\r\n---\r\n>           \"BlindedElement\": \"02e11a9284e7181ad29031868dfc84fc2d228283538e57d3257e84d012705adb29\",\r\n>           \"Token\": \"59518b657d3f019ddf427d1950cbf23edd454f187bbd19256cf2d550fd06ae74\"\r\n44c44\r\n<         \"ClientOutput\": \"0f2f9d00bf266a1b9edda5968c6636f3fb450b73ec74a102d79f34ab345ffc79\",\r\n---\r\n>         \"ClientOutput\": \"b9507a0d95e82bfa96b85fd18e5297ba0b690aef4d139a3f20793d0f84dcd0bb\",\r\n46c46\r\n<           \"EvaluatedElement\": \"03e23a4a316185015eb275ab0120b712359ee9a0af771d9912cc8279e89ae41e45\"\r\n---\r\n>           \"EvaluatedElement\": \"02cc74d13f8d75d25e3e7862eecf144b9eeae9776c02e1b7cbfefc5264b7714bed\"\r\n52c52\r\n<           \"IssuedToken\": \"035ad651c35210bc756028cb55dc53af49617fe96691b6aef5a1067ca0e86a1075\"\r\n---\r\n>           \"IssuedToken\": \"03b31879fc43c0182370d231535d2665001534259f04d3f254e039fe31adf6b06f\"\r\n59c59\r\n<     \"skS\": \"2c5ca1fb743a013921efc828bcea630c81fb4ca9b4ed2e09e10462af8cb5b7dbed8c74aa895813ec9605646aa81c7f7\",\r\n---\r\n>     \"skS\": \"bbbb68e65c633c6711c1c75c215f7276f527714e9150ceeac5f8fcf0720308d07cdac06b8ed12948946f1eba55b2349b\",\r\n64,65c64,65\r\n<           \"BlindedElement\": \"023b6f6c633ab3e0e8445a458e031c60be181ca7085a3df52521692292e1cacfcef85a8291a980d3ad37d0953b7abc1b5c\",\r\n<           \"Token\": \"579f77ec5404344e35fc5f0d5fa1d5c3402f39795135b314b9a56c2dbcfa8db48c88e11a9b70ab7226e92d354d0a0d08\"\r\n---\r\n>           \"BlindedElement\": \"034767a26aafb0de6ca31d1d29fd26dc3880893dd2122fbd84d16292d99955f8580ecddcd1347bcb0f8cfa64620b884bf2\",\r\n>           \"Token\": \"bfaba18e6da8cc89f57dcfa306363716edf0d84fa4ffd1ad521e1982d0c95e3640d0c9b6d03ec2b88a359bd81a60509c\"\r\n67c67\r\n<         \"ClientOutput\": \"d869372ea764097af2ef2340deb47952dbed81a63ce837d9c041bb791160720ad25aa55dd08c93f574d32d1c11a89e3d4f0d7698fcefb70eef6c5da983364356\",\r\n---\r\n>         \"ClientOutput\": \"16e4511da9d3676eaa87ff7c7ee8a3b3c6d02f9eff3f2839fcdfacfeaa52d3dc53c6ef81b4c7479061f7b213c3e14d1728c6cddfa874fb4234cdb927173e49c3\",\r\n69c69\r\n<           \"EvaluatedElement\": \"02e4883484118fdd15e080a280d1b66cd2733dbc9bf81d8d96affa3975ee02a74c903547add3b240b1bad34d2bb234502f\"\r\n---\r\n>           \"EvaluatedElement\": \"02903c0efd55a302aae1b78bd7fd86a4fe505ac82e6c6a49ea895314aafe5534680c7d1595f2602d2d7a1bab55494851ce\"\r\n75c75\r\n<           \"IssuedToken\": \"02f849a885c0953f9f7e08a58f59f0e1e0ec48842aaf0744f9e756459dddba929bd74bb9f68223236a3f2eb3340504cc5d\"\r\n---\r\n>           \"IssuedToken\": \"024c96c8afcd4fd80c1b3b3c630435e0bc7dd7ddc9e9d72c85c26580487d78759d055d046de8d1ce8aca484a5036388310\"\r\n80,81c80,81\r\n<           \"BlindedElement\": \"0290d8c766bfdc4cc3b116cb6055c8021a9ac054484db952749701b1dbf8b683f3410382908852a0757d77c87b406a4ffd\",\r\n<           \"Token\": \"ad4f8d61d3eb4357b2a483be55992e2ee92317a26274bde189712cce3955d9f6329eea5c98a24d7ee5b56a88a373455f\"\r\n---\r\n>           \"BlindedElement\": \"02182ddf4f4ab91fa8e075ba047af978243a15b1b06d3c3ca0c7abb5b6cdd9db0643e64624772db804cb22b3504141b5c6\",\r\n>           \"Token\": \"d51f11c35a47716c1b629a77b16d934b631f0582cea43441a161b28e01e4e165958be2a15be54ac701d4f3be1d776858\"\r\n83c83\r\n<         \"ClientOutput\": \"c57befcbb9deb2635d81557ea4c012ca5402dc2399bc51c8526999785d88968326f80b919cc074e401b5f2568b4a4d5bdabbc3e73457855183434f046c5ef065\",\r\n---\r\n>         \"ClientOutput\": \"6e4066baa388bc7e44c5f1c17ab80069cd79036d6162cc40e7bf40a13ab1f547c8416d7b2cbf2e266171c25c04fa16a48610f8f93e203b4ac0ba0c44d4bbbdd1\",\r\n85c85\r\n<           \"EvaluatedElement\": \"0256f199d65eb1945b1d436847eaa9e02a8366f94dca3029acf9d1eae327fdd9715c638fa4d106a646ff79e31aba8a9880\"\r\n---\r\n>           \"EvaluatedElement\": \"0397b129a689b31f11a8b1bf45fa25139cd7a7ca29e2f25c8c73c50d11a1d89838adf130dd7b5ac1fffeb00e9383ebad2f\"\r\n91c91\r\n<           \"IssuedToken\": \"0350f953c1ec74002d3bb1582350070ce1aec577d488afa508e091f27e765eea69dd8a814455b8cdaaa5f9391d9978b320\"\r\n---\r\n>           \"IssuedToken\": \"022a1898b473f9eaca1ac88583e776b3ee9d45ae47dc8bafd301eeb5c78bc82935cd1b17cf6b666748aa9b20765bff2c66\"\r\n96,97c96,97\r\n<           \"BlindedElement\": \"0392c7f6b0bfecf05fca809fb1680e4e1c9499f9bef5168f3358031aa2ccd43566f66d926b374047b64a6f3fbc7ccfb767\",\r\n<           \"Token\": \"f162ac7cdaf719be997bbf22f4982eddffa371fab8dcfa66f1a4f80542c3fe50d9dd39f68aa5ef9bed0ba57d4788728c\"\r\n---\r\n>           \"BlindedElement\": \"032f9229686646403b19c3b10d4a24e5000fd37d2edf1ef36a96154affcdfdeefcae1df012d359eb0e3ff4fdf57bdc994e\",\r\n>           \"Token\": \"8c8ff1b2555a3f1a7d4d381f767bfa65b65714e55153fef6d1116e4b8b3dc9794481fea792e8d1df369f9213b7593a71\"\r\n99c99\r\n<         \"ClientOutput\": \"e9cf62d33ff968ce9bcb0515e53c14d39aeb48e6d57c240843609f8c9df062e1f49a61881351f3a1f9b70faf252829ebe07353a2e692f38dcaa18186c7e61028\",\r\n---\r\n>         \"ClientOutput\": \"52e1dab55d32ef0d7adc7ea24e232c56c66a418b64e6ed79c5498435c38a41496807094463ba3053d01061c0b08746708d534e6511e3c7a4f6f1a539c0e4094f\",\r\n101c101\r\n<           \"EvaluatedElement\": \"03bd9b1aa2b33eb0a56e761bef359e6febb383aeeb20eb1486625b1bf292016c8842fae7dd91ee04a953e6f59f795b8312\"\r\n---\r\n>           \"EvaluatedElement\": \"025f93ffb14c148eca64b100087a80567cb0938329a6f2cdbee156b6124b5acd28e7aee52c9c46c2f69811b5092fb9637d\"\r\n107c107\r\n<           \"IssuedToken\": \"0226d98bb4c63350227040b5fa10423634e35c2d949b1699b329c6d6bca3899e57d56716d8dfe9f88aa5e2aada149ab1f9\"\r\n---\r\n>           \"IssuedToken\": \"029a7d9ab353ff96fa5341d834af74bd4dc4555aa26e57ea21f5674a3363dead8543d442e4d03b4c38174a82dbbbd0f9a6\"\r\n114c114\r\n<     \"skS\": \"e47cdac06b8ed12948946f1eba55b2349a448bec98cc9ce2dc3992a8989882a0f2257f7ae8250bf7f992b0e07477e3d32487b2d637e712ef4ee28dc1da700bcb8b\",\r\n---\r\n>     \"skS\": \"ee4e4b8316a1b0a0229b0775217c99815e2036aff826a4044cb752ade92250668c87a2b78b3c9d5035ba8122e3e2bb11dfc2576c462f407ab5cf6e2ce5946f594c\",\r\n119,120c119,120\r\n<           \"BlindedElement\": \"03013882282350ffde8f72c7be44eda738a1f7d93a670da0471db06278eb58a5235ee82c022be887c82778d39bc91808f5cdbac8f555d9b7740a32d4352a06d9ffb8bc\",\r\n<           \"Token\": \"1ea06363716edf0d84fa4ffd1ad521e1982d0c95e3640d0c9b6d03ec2b88a359bd81a60509bbbbb68e65c633c6711c1c75c215f7276f527714e9150ceeac5f8fcf1\"\r\n---\r\n>           \"BlindedElement\": \"030093b99790d563b9e364d9fe7072059587afa902f84b948775309bf7cb17cdfd5c31d48731dbeeb33a85646927f707f27e017d5a0a3f469ec33b24f80b253a430bde\",\r\n>           \"Token\": \"124c3aef5396174f54bbdafdd3bcfd4a06041237b0dba55be738921ac19f934c9916d2e3c527eaf00310a7fd2a0cb9f3a195cbdfe78b1e1b08905452c6decee5f7a\"\r\n122c122\r\n<         \"ClientOutput\": \"b100889151cfe48d945b0416c136c2619c5fe64c39427a88ff809882c62f2b7ce41f936fbc9ed9f4600c4e781be22b766eff6274c9cc8f411f5b27ed35380793\",\r\n---\r\n>         \"ClientOutput\": \"cb87ad8b356dd23f5b3a5dd731bc346ab39747b98bdca43f660aa00c4cff31f93c263417f9af0943b57e76cda34884b709a6af871e622a7bfa476d6f7d7080c6\",\r\n124c124\r\n<           \"EvaluatedElement\": \"0301216693f872a462351211b718cc1d8f532a06c9bd72e5ea08dc08e71957630dffeb00fa1ff15dcbe1afb179634f51c070c2e4cf866689f88e8bd07f600ef1b121dc\"\r\n---\r\n>           \"EvaluatedElement\": \"02013ecc1b238d6636a1d622cc3a43c35a873de21988bf4376d174ac41fbff267aa7135e2580ec6deb4b496d5805120b34d183d8e98c6233584264e15c5de50cf2a44d\"\r\n130c130\r\n<           \"IssuedToken\": \"0300d5b04cec85c99abf4a79481180883059d4943f1f403ef982559969abcea44443ac6fa3d2f31b82884fe39fbdba69896ec230fa7e396bac0389a27bf15934a2de46\"\r\n---\r\n>           \"IssuedToken\": \"020022a74693d7c764c781c1767d466bdfa1dda0702081ccd20baa946da6b091b6cd96ce8ce77c9b0db5a25fcd9555cd852a18bd573669db71f1f0ea0517769b816c78\"\r\n135,136c135,136\r\n<           \"BlindedElement\": \"0200f20ab103e0c06b2912c56fef4ecb350edff38baff3afe10f32243c7ebb76b86170bbc15310e6cb839dfbc727596804a144a178aec61bf7e9b36bb82022bdc37dbb\",\r\n<           \"Token\": \"125369f9213b7593a70d51f11c35a47716c1b629a77b16d934b631f0582cea43441a161b28e01e4e165958be2a15be54ac701d4f3be1d776857bfaba18e6da8cc8a\"\r\n---\r\n>           \"BlindedElement\": \"020073498f6c2831b022b95ed0c615d646f0d7c67670e200262f0169b2c558be3af66f126c67f914d142e4d9a1688b7cfada464f1301f2d0dfe10c5ba77e250461f94b\",\r\n>           \"Token\": \"1689473f5183433b3eaed8bc3e0f19f3828ac0dda46ffefed869b3573a28845a1cdc8156dda1cb42c8146736c42376170a98651af33ac718e4c44f8220586a8e4ef\"\r\n138c138\r\n<         \"ClientOutput\": \"ede70ff8af02ab958b74e7afb7d7b7b0deaf728a9a7ebbd7c4375178a3d975d71b671084baf3fbc9cdc87c42482f159fed67e59f087771ae2a6fb135f6a510c2\",\r\n---\r\n>         \"ClientOutput\": \"c96d5d946f3e415c2c6d6fcff4b9bbb3c005cff993f199f1b1efe9ba9649b3a966e5c121ae33c6023c38306ed1576499654cf35e04eddc2f5d8aec065aef0c3f\",\r\n140c140\r\n<           \"EvaluatedElement\": \"030157acefdbd151996ecba56f89b25ca6059744b38bbe0dc38677b7f7070a21829d822db232799d402528358ee76c9907c6d1ab3336d0ebb4fc7d4b6a919ad7905b5d\"\r\n---\r\n>           \"EvaluatedElement\": \"02010a0dc4cf4b9c3363245a8d2b57c9a46a26ad3a572ebbf929858803312e22b32b4bdbd2a0227d6c118331502a021de6f73bc6f555f02ad6aa12d973e4fc81b3ab92\"\r\n146c146\r\n<           \"IssuedToken\": \"020190e1f213c29169e7ad6ffab903286678b09747229c2f18b850925ac864ec341e573e1c7e2bb111ce28d4154796578d3c50bedabf4ce3c24db0e08a0fdd0dafe7df\"\r\n---\r\n>           \"IssuedToken\": \"0200894c7040a43ace82edebcb2d1a06d56193c608403e73b9adabb3721558f6402a8d1b9d7224aeaccc394c2369ca83a80bf9292c387b9823dea65af20df0a518cf35\"\r\n151,152c151,152\r\n<           \"BlindedElement\": \"0200c44d867e9b49d1861b54395ed1b33fcdb4324b5b826913d640eca17b19be70809edf4cbbcbd2ad47b60087cc5e36fd800139e82b1fae336dfcf43afab4ab67351f\",\r\n<           \"Token\": \"17a3d18a67b0a52d73984dda94a864450bb45c3f128107ec2e1f2ecd4538c8ff1b2555a3f1a7d4d381f767bfa65b65714e55153fef6d1116e4b8b3dc9794481fea8\"\r\n---\r\n>           \"BlindedElement\": \"0200ea5d6d0303dc76567c758032a90954a0cb47e5ff282805561f385fd024c8a4bd7f87c565c7784a8bbcb9a0630f7b2c4f7208adbef9845f81c71faed5afbd7e51fa\",\r\n>           \"Token\": \"89cc9ce2dc3992a8989882a0f2257f7ae8250bf7f992b0e07477e3d32487b2d637e712ef4ee28dc1da700bcb8aa24e01948190264065c6060ee1ed79677099ee56\"\r\n154c154\r\n<         \"ClientOutput\": \"35cd3b488013d418059a143de8128964bfa309888574c5009f1e383f0ae6f14195525b60f281fc66e72c164ad245e46a9712d78f2ee87ad011f6bf8654eb5d86\",\r\n---\r\n>         \"ClientOutput\": \"c13073d8f4a82bd73849dd25de2e24c9fdd527d6c196499bd04f4137e6d62a63ba520c371a6eec0f4c5ec37d384264678b62d9cec0ea1bbc90b20ab03505ed9f\",\r\n156c156\r\n<           \"EvaluatedElement\": \"0201cb719c8861ab1c15d74162db321626c59e032a8614f8ac563a093090cdf424b5c9038e3a9d5d6764c8a64d96da45350f6044b38dcd55a22f18ddff712e54050406\"\r\n---\r\n>           \"EvaluatedElement\": \"020081d9257f409fd40453438e440a226d2ebbb115a778cba980a55338b928e1067ea7076334a688337f635e3346299daf6aa6e75a53324151ead243b0615bf3569bf1\"\r\n162c162\r\n<           \"IssuedToken\": \"0301b96ed63d62d386ec4e09f79e141c1fc6543dd426e968a81e83d0850acaf017c61328ecfbc73338d7ba24e6dada357972d30bbd7d3b64fa97ddf15925be957f68f8\"\r\n---\r\n>           \"IssuedToken\": \"020054741927ae19c858b214df703179c725c59d871f8a4b8e59143c7b8dc424c755b34df875157bacfb0bc798f764bc33c2bd81e944e368a4dc12d41cb37c9239737a\"\r\n169c169\r\n<     \"skS\": \"5770a5ee2353f198dac2e3e2fefd7ef7a5f3a93965602703f3d86c3e0e019c1c5e47d3b1743cf3b333d8459e92f1fa45c1a19c8421ac689\",\r\n---\r\n>     \"skS\": \"2784118af8cb5b7dbed8c74aa895813ec9605646aa81c7f6bd08ef503d18a67b0a52d73984dda94a864450bb45c3f128107ec2e1f2ecd454\",\r\n174,175c174,175\r\n<           \"BlindedElement\": \"e0ea2f22dde84dca57717c4adfcc453a4c4d50c5889ccb29086d849bbe905167a8bd045b79ec9aad5355abceeb9fb44dd48034e3c7b38ea2\",\r\n<           \"Token\": \"375153c67bbd19256cf2d550fd06ae7317538a0fbdafe78930da224d276e7d03c38c59e8f4c6d683e352d59ad8f1d0e583bcf6b5fa1b088d\"\r\n---\r\n>           \"BlindedElement\": \"30c8cb21e965b109c36f87492c6bf11bfd44966b08e5c4b896110cbb2430ff48dcd25e5216868a98b4b263906796f33abf4bea3a2c3056bd\",\r\n>           \"Token\": \"100bce5e5135b314b9a56c2dbcfa8db48c88e11a9b70ab7226e92d354d0a0d0702c5ca1fb743a013921efc828bcea630c81fb4ca9b4ed2e1\"\r\n177c177\r\n<         \"ClientOutput\": \"b067b9fd27390c783f3bbb24a20de5946f2426dd85f4af5276608a930556ef3f3dec707f2d224643ae2c144118bdfc619aa5d302218bcf4bdbc5205f06413e9f\",\r\n---\r\n>         \"ClientOutput\": \"bea446a2843bac516271f0883de1f4e67aa73b3beb00b7b31f16fea804a5fd7868f62b95d345cc6f2e21700c60ce3a2a93315b87bdd399bde5befb1943ac5d73\",\r\n179c179\r\n<           \"EvaluatedElement\": \"1ca041092b7cdb2e04dc92a94007ab477d441d03dc90f29a7c8cc4e05ff26875e6808496134d2360858590f79d0ab317aa0d06c239f2d85b\"\r\n---\r\n>           \"EvaluatedElement\": \"143ec4abaf1aeb37ae32b9dd230edff5a85fbf0b39ac6c6be0943dab48e7931bf5de33968f274c6ab8292ad519e764d4b7d76b021c0c09a5\"\r\n185c185\r\n<           \"IssuedToken\": \"c4c51cc0d922df7bc8d88621094bff32f504390eb74248e4c4a71ca84bd5710c82cb5132b8d7c6887df7630cab6a388d01a00cc6cf10ebda\"\r\n---\r\n>           \"IssuedToken\": \"caff5c88c69cafaef955c83cb1217353ccf0cdb82dfbb0e6adc20b35c25095e461116357cbf80a21e2bb327f25d38ca70a41032ed248aa13\"\r\n190,191c190,191\r\n<           \"BlindedElement\": \"9445363fa3e4fa228c7c902ff42ad2fd2655d126f913813d8df0f705a19ce4f728e9d9c745e17c1126fd433fa4611b2c084a6d4aa77702c0\",\r\n<           \"Token\": \"2dd4ab7a2250668c87a2b78b3c9d5035ba8122e3e2bb11dfc2576c462f407ab5cf6e2ce5946f594b59518b657d3f019ddf427d1950cbf23f\"\r\n---\r\n>           \"BlindedElement\": \"b6192fa845c24290c3c10a3c8515289e17045d0db5d289aa83fe6d6a02531d4fd4bfe0d69b7bfab99bb3f701752dd5b3fb028d7393d78f73\",\r\n>           \"Token\": \"2ca920ef55992e2ee92317a26274bde189712cce3955d9f6329eea5c98a24d7ee5b56a88a373455e579f77ec5404344e35fc5f0d5fa1d5c4\"\r\n193c193\r\n<         \"ClientOutput\": \"2c2ebf3dd46269ba79bdfa29b91a555b4dc946914f93c501ce1907a1c6ea520f51c39ee631db3e5513872355e34a59812dee7ba9270ea8daa0a7386a77e1d424\",\r\n---\r\n>         \"ClientOutput\": \"aeb406e96e4c5e70aced93f95eafe2c1b77c5c448d1bac8bf112f493f7a846937ec79e23ad2155ba92b96fbe5d753379f553db17cf340b4de6253108ccf7e358\",\r\n195c195\r\n<           \"EvaluatedElement\": \"10c0552bdf7aaca16c704276bc105bfc4871bcf3e2e06d4abb8fd727f98887101d5bdd2dafd144b1cc3ed9eed42f54efa62ef0ab1ded1af2\"\r\n---\r\n>           \"EvaluatedElement\": \"7a5261ce2dcd93208961adf1384def543d8395a056bc2a60d15045e9824b2058f0c873f95a3e1342fde3e5d1d4d1c808fc9f62aca5671c22\"\r\n201c201\r\n<           \"IssuedToken\": \"36b2b19829ffe8b5b3158500d8210cd247e2ab8b8400edd77f2529a5be031f56050bd64a0c2dc23cbdf06c3210391266c1eafd2322feb4d2\"\r\n---\r\n>           \"IssuedToken\": \"ccb9a3aa1e1fa93e920bdab1333ab3f0939a22e4061d3e647edfdb1597a43ce669b2444d2be02b34d167837533f7e5afc13f576f8d8723b5\"\r\n206,207c206,207\r\n<           \"BlindedElement\": \"d43a09c3a0f0cd344e5472b39ad8b16acf70436e0d54192d3a4c8f2f49854da72494fedf7964b5eb9bd57cf5aee52cce91953f4c9e67ad7f\",\r\n<           \"Token\": \"1fabc00c0a7fd2a0cb9f3a195cbdfe78b1e1b08905452c6decee5f79773e517f4e4b8316a1b0a0229b0775217c99815e2036aff826a4044d\"\r\n---\r\n>           \"BlindedElement\": \"043980e769478a64f59ddf48e35f3b15ea2c5ece2c4b0c1891896441154961df3ad7beebc4a32f6a9abf159fd3aa9c2e052be54d5513b524\",\r\n>           \"Token\": \"3c58ab1fdaf719be997bbf22f4982eddffa371fab8dcfa66f1a4f80542c3fe50d9dd39f68aa5ef9bed0ba57d4788728bad4f8d61d3eb4358\"\r\n209c209\r\n<         \"ClientOutput\": \"84bf2f3a73dcb5b1d3d51ffab411a372ec0809bde06605bd779301f174234ae4994dc9ef610edc73956f910494ef722c9f1bd8d76dd13c23ec8f5597e6d02c3e\",\r\n---\r\n>         \"ClientOutput\": \"7815d117f71a82b266b18c764c5122c13c8315205ccc3bb8a4fbbbd9f01e462bc61c6fc73ac9819e8e9b7cad1a3f8d0a0b09fc637aeff851d60cf4048a343aa8\",\r\n211c211\r\n<           \"EvaluatedElement\": \"c0f6b008bc988b0e1353245eaa4e550f9404c603fe0b6ef9b54fbf63e9d3c8d64076435d007b4a12576094bfe1fa4651a38a065a78d7759e\"\r\n---\r\n>           \"EvaluatedElement\": \"044e2c35b72c18caf54d6ede128e8463081cb2ded37b4411d91adaa0c3541e7c6346db9c6656c9c9cc0fed407776b1a3d7796e33e219897d\"\r\n217c217\r\n<           \"IssuedToken\": \"20cd9ac3ea4e6ba3f4f9bfc902ea851b71d747425fe9ab45ae56408b85eabcad8565ca09fe39d5a3fc62de393a5bf8a23f079a187e1df16f\"\r\n---\r\n>           \"IssuedToken\": \"8cefdce950ea1ede25757ec905db9dea218a9da3250325b26f5c074b54d560ac49aeb66fb5eb33338d413a1e952f49ed625635f71c8642f1\"\r\n279c279\r\n<     \"skS\": \"bd83679b4c1e67ed82f2891751aa7094602be672c324929abb1876a7f7165ac8\",\r\n---\r\n>     \"skS\": \"f66d9fdbd94a53533e7c5057e09e220065ea8c257c0dd6055c4b401063eff0c0\",\r\n284,285c284,285\r\n<           \"BlindedElement\": \"03044b4734b43d53b545f726830e9b977cc1efd6e13f944b81e7b15d28c21bba35\",\r\n<           \"Token\": \"3bf1d9f39878b22e5c4833d34c486a8510e7cca4c1b81ece04f47e8d2554a5f\"\r\n---\r\n>           \"BlindedElement\": \"0385180714033c6d015c85410eaeedda8c88defe1e1f0d02161e2949b8e227c207\",\r\n>           \"Token\": \"f8e926ffe4854a58f6b3e908bdb38e3c626a939e19daca653b9217801b5d51cf\"\r\n287c287\r\n<         \"ClientOutput\": \"cacc0c520aaba389a59269f7796e8af6cac69d37138c649c1866c22c72913a70\",\r\n---\r\n>         \"ClientOutput\": \"90100e4d865ce19578b46c83701efe3febfb4ab02a208bc5f6a3ae9d6a73f1e3\",\r\n289c289\r\n<           \"EvaluatedElement\": \"02f96c274f72acd1c08dc58fd51036717e08ddf5700d4243d2235853e98e82069a\",\r\n---\r\n>           \"EvaluatedElement\": \"0320c00f0db3bdc410a97da2c60840af38385be00499246c6c14474eba4d19258c\",\r\n291,292c291,292\r\n<             \"c\": \"c3eda728e8ffc89fd1c32e03ba7df4d7d8fa4fe04c91c797b1c73da4b9e24615\",\r\n<             \"s\": \"4cc1a9076b54e3912cbd3d1fd452c1b30bcfcff8c092697cd54d3021b3542abc\"\r\n---\r\n>             \"c\": \"bb5dc4c8c15cfffc3bedf4327533765abd1ee1be70564c6cbe7ad37c29ebf528\",\r\n>             \"s\": \"901f008afcfef2f2812c64c40d15b3aacc1d36e4da3cd228a2ff957b4b54ba72\"\r\n299c299\r\n<           \"IssuedToken\": \"0365e1e78669c2a11999ad151b83d52c446785344f4c186e8889a73874db97440c\"\r\n---\r\n>           \"IssuedToken\": \"0388682f8076cf52eb43dd6db208daceac8bdb3f0f7e4389c770508c953160fc2d\"\r\n304,305c304,305\r\n<           \"BlindedElement\": \"02f43fde9fd97f6932051e44eb1bd3e7ead16377aa6ad2a8a3e92982bdd34bb3f2\",\r\n<           \"Token\": \"ea420f8d0c793f9f51171628f1d28bb7402ca4aea6465e267b7f977a1fb71594\"\r\n---\r\n>           \"BlindedElement\": \"03abdbdebc61960bf8e5ddd7700500e1dc607e91c429ff9ea4fed906aef803577f\",\r\n>           \"Token\": \"49615162a416d507a6532c99c1ea3f03d05f6e78dc1edabd3b9631be9f8b274e\"\r\n307c307\r\n<         \"ClientOutput\": \"1f17a5ce207e7014cd991e8063685550734fbc36bc888a444320cc1d8aa000a7\",\r\n---\r\n>         \"ClientOutput\": \"04089e7bffb1ed98ed024899d27a13ea648d0f8a4af71709baa50632bffab19e\",\r\n309c309\r\n<           \"EvaluatedElement\": \"028cc5879241ce078e4b14da40b4b9a1a618f852a98f3e31e9242cf8230393a227\",\r\n---\r\n>           \"EvaluatedElement\": \"0335948e0feb13e631d744802bbeb481e9f9c70d637e6d0490081751470a108310\",\r\n311,312c311,312\r\n<             \"c\": \"168fb4fba1d1ba623efb075ef2226136b8360f6d61319c5ceb266db48a9168b4\",\r\n<             \"s\": \"987a8554c2653042f09bb9c6bd766dd835f0d58cdb872f36f8ee5a9a33f1c3ad\"\r\n---\r\n>             \"c\": \"bf628b6c62151464de4aa15ae81cc6bf157d7c2b82ad843786671675d1963a11\",\r\n>             \"s\": \"f0d56d54e9213ddb6f92cc3415a51f6148f2cb9d4f263c3f9097e784f20bf047\"\r\n319c319\r\n<           \"IssuedToken\": \"0317bbb97dd6e8f2ded0e2e3a43ff8134dc157cdbe6743eb552399a88ab2c6b492\"\r\n---\r\n>           \"IssuedToken\": \"0362c14486afb97ce4689a0c77dc1c06d72106651ffb27edd5a857da46d5ae0a0c\"\r\n324,325c324,325\r\n<           \"BlindedElement\": \"030b9331261284fc56202046e053baf08abd92afe4e4013235c31f4a87583beb94\",\r\n<           \"Token\": \"f671d326e196e8a21bf6cfd40327a95f1ccfc82a9f83a75dae86286729214a1c\"\r\n---\r\n>           \"BlindedElement\": \"0317fd65d37f4210c9529df8ce7e0601e4395d5a3dc5ec2ed0c9aad59e416a3fa7\",\r\n>           \"Token\": \"d423b59de7b0df382902c13bdc9993d3717bda68fc080b9802ae4effd5dc972e\"\r\n327c327\r\n<         \"ClientOutput\": \"5b94f7c0ebd3dfb5a87de2629871beee8d722c2fdae611acc14a131f0e379910\",\r\n---\r\n>         \"ClientOutput\": \"a42c18d9350b603eaf321b15db9b8d6ca41d853a75dec55be5c5fb88883b95a3\",\r\n329c329\r\n<           \"EvaluatedElement\": \"03eb15811419d1078afa25bc275284bb2e28f075b37165b469b0ec5db4d85c08bb\",\r\n---\r\n>           \"EvaluatedElement\": \"03097efc62ea5f0bdbcf71e19d6c630bc13c000422de21c8f24c8b716ea0d68279\",\r\n331,332c331,332\r\n<             \"c\": \"4b39883ef13d59aa9749e85289bac85de0b3c49d5164d7e471d5b67333ee10fd\",\r\n<             \"s\": \"edea1d89c69e9bff8afd43210dae6525abcc09d9f483e69e9397dd8f20dc9e5\"\r\n---\r\n>             \"c\": \"d2ab25a4705bfea630371c2624543576f487bb8015dac1a6a5672fbac0b61745\",\r\n>             \"s\": \"3bd6330058ab4284f8667e497be24d874668e09c11d2614a2bb040635f16167f\"\r\n339c339\r\n<           \"IssuedToken\": \"02cc38fc453c721970236881d477295f0d043b6c69a3c191bd2bf3d3ac0b12ce25\"\r\n---\r\n>           \"IssuedToken\": \"026f4e5683d6016d5d0e374a4ec5c2364276cab0a4a919e3a7511ab0913b85241e\"\r\n346c346\r\n<     \"skS\": \"23f4a0e6a39eef47b0d4ca4c64825ba085de242042b84d9ebe3b2e9de07678ff96713dfe16f40f2c662a56ed2db95e2\",\r\n---\r\n>     \"skS\": \"954e16c0b9ceed3ce992b198be1ebfba9ba970dbd75beefbfc6d056b7f7ba1ef79f4facbf2d912c26ce2ecc5bb8d6642\",\r\n351,352c351,352\r\n<           \"BlindedElement\": \"02f09f4d54f3d5c2cd6eea8f68ebb801750f877cb01722b20ad2e8c92b04663fc02a7c75c14353128973f5198b12f1edd1\",\r\n<           \"Token\": \"2d20d7e4ec77617a4238835743037876080d2e3e27bc3ce7b5fb6a1107ffedeaedb371767432b68bbea293aa8a69353c\"\r\n---\r\n>           \"BlindedElement\": \"029b87dcdd2fb024f316449c12d8b41d7c67cd3fd9ef7eeeff0696cd98801edbe69e1e7db91bcc9b42351c47b2942a8aab\",\r\n>           \"Token\": \"3f1d8f2f6b92a02a32d5eb06f81de7960470f06169bee12cf47965b72a59946ca387966f5d8331eab82117c88bbd91b9\"\r\n354c354\r\n<         \"ClientOutput\": \"7494a3e62a43118a1ec49527174ebf31e25a85cc28c457d4b107b6549563300561727ce9210ad19a93e31e0a0ad0438ef72511be4f78f104f2dd37fb9d872838\",\r\n---\r\n>         \"ClientOutput\": \"db5f42cfcc94f73607b57882222c01b18e7b484a5c29f46e2ca6a0b8ce0d8cb8d34566a75fb93c8ad5b034bfe41696c89f4c5939051786191ef434f6d512da8f\",\r\n356c356\r\n<           \"EvaluatedElement\": \"0392e11aed26a42180325f878cd3424e6f33bcd24742f9679e162ef39c2d1e67e3ba076b590386f89a864914f873c2d14c\",\r\n---\r\n>           \"EvaluatedElement\": \"02f6e4c018db1e869a6d399e88e3f3f840b7df1eda64e9550d3682cc67cad489c6da294b8ab541f904e771fbd6c52a7f8f\",\r\n358,359c358,359\r\n<             \"c\": \"62041b3d0d7558ec5fb568e5137599e2892661e863159307c7114f576695cc5b6003a94e1a592c7007ed801d6ac4dafc\",\r\n<             \"s\": \"d880aeab9a2e856e67cf1ecd40c24b11511b2c5fcda08c48524ccae966642a995ccb525d2e8cb4672886587b8e1f6f34\"\r\n---\r\n>             \"c\": \"caef380ccc7f4f5b0781f7483c5fb5345edd510bba0f54d840baa95e9208ebb78af132254755e81083ceb97508c8060e\",\r\n>             \"s\": \"86c9a30d538d177499f433dd54ede8d9f2c7e5a332dc8ce0df6a4043804f3145b83f08a7853a2fc53d64ec9b8c57dd91\"\r\n366c366\r\n<           \"IssuedToken\": \"03a36359d78171768a743ead7420a1b004778198fc78e9b30f5805296bea9c9ff43bfc0b0904f43fd09d926547fca4e852\"\r\n---\r\n>           \"IssuedToken\": \"0220db7309e324d643089a3e6dfd79af5001cab762119499d84c6252c25fdfb236199cce941778ee9cd0bff8abdc5bb6ba\"\r\n371,372c371,372\r\n<           \"BlindedElement\": \"03de06d158219744d679e721d7de567a1f9d578577ca3deff3a28de7d8e1d92abca232760d8681def0cbd9a83b7f4c2dd9\",\r\n<           \"Token\": \"be5f5eb4a34dcb73609c6693f28cd3d57ed77bf66e0ab7d86c6990f0fcd9a655f77ff0b2ebcfe21e1a1ca4a84361e9f2\"\r\n---\r\n>           \"BlindedElement\": \"03a503d57666b43d077bee86437995f379f31edcb8ab5e99556a67af473fd2902cc9d2d89d0e17296d6f5f7c4f53fa113e\",\r\n>           \"Token\": \"9a38546f74b6d688f70cf205f782fa11a0d61b2f5a8a2a1143368327f3077c68a1545e9aafbba6a90dc0d4094ba42833\"\r\n374c374\r\n<         \"ClientOutput\": \"bd99e774312520ddad2944a56be8fbd530cfa385e9c03276029029a3ee51fa9bc9e565b87e4dcb60349c3e50c8028e1621c2af29941e241c3467eef597ac3e70\",\r\n---\r\n>         \"ClientOutput\": \"a3307f00056737e76f1daa55da5cdd980825612027f1124856c78ef2c116ad58e79f05ddd01c1e2b04e81fc40bada244031a5b8085b72a73ca7f63ed9a6986d5\",\r\n376c376\r\n<           \"EvaluatedElement\": \"0370caee681c5afdae1c8947c8d34370a50a8c2dd9679552176f32e10e2d971f611a4ed051de74e48ad4bc4f20a9a40a65\",\r\n---\r\n>           \"EvaluatedElement\": \"03fec62cecf9b426901f685cb9a5c810e85c0775101a41b71d26fdfa4966e04ca24e4108cf8ec5ee945c6a5a6a920e19fe\",\r\n378,379c378,379\r\n<             \"c\": \"4511a24768304e197290dd0cf1181f0c1ce2037e874f9cd7d1defae5d12946a45bbbf5c06a4a01cc37718a51968e5345\",\r\n<             \"s\": \"580aa191fe1642e60f52f505770f167311574d850d1531759a411c6e7aecaea3021759c513ab8b5c64f2efb02c8d2d0b\"\r\n---\r\n>             \"c\": \"754752279ebf37833f5425ad3011615ebc4b44e7b30e2b8998fbe6641f082ad6a1faffc80ede78ed1ea8494462c8e051\",\r\n>             \"s\": \"caee6091c1aec0f86d7071d5f0aad9b1c8aeb2959d32bdeb4f939ca72f44ea31d126020e35b2ee8c4fbf231ab233382a\"\r\n386c386\r\n<           \"IssuedToken\": \"0369755f9ba7329ffd88f51f1d7745dff10158a3c3ffd2e57d1f1755b54f614551aaaa4348c6119c6790185b12d74bc0d8\"\r\n---\r\n>           \"IssuedToken\": \"0222c51683914fbe652fa8819430292e3d4bc602182ffd0086425c32585aed81e71e6a47f4709814f3541e6fa9da0631ed\"\r\n391,392c391,392\r\n<           \"BlindedElement\": \"026227ffce6710530d33be90b3d0fbf05953d37a82468c6041ee65b3ac99e72f3378f411bcbab719a2acadceb0ee543142\",\r\n<           \"Token\": \"31ade30669dbae98fb0879524fb9234e93a8bd048ad9f44b428026396a810328c405a354e666f086fa0ea4754fb56528\"\r\n---\r\n>           \"BlindedElement\": \"039f50fda00acef24afdf30b00d7744dfcefe7f00fa6a4489ff115eb11b8205812193e27fa9b924b05dba3f4bd2031ad91\",\r\n>           \"Token\": \"84580de0f95f8e06aa6f6663d48b1a4b998a539380ed73cafefa2709f67bd38be70f0ffdc309b401029d3c6016057a8f\"\r\n394c394\r\n<         \"ClientOutput\": \"193ab8e39ad1968c69872f759498e27313d70d45f68a28ebd3d3a2a55a221ba6394b11f26aac93389348f59059d3f87ac4fb37542a44c99a42bdb7d6ae525695\",\r\n---\r\n>         \"ClientOutput\": \"2135ddfac70a861e2746ef6ee2f9d5ab7ed8b9d71fe9f6955fdda69c73274a27046fa4fb132a542b8ddb05bf1d9481be812e5608619b584bbe98d2421d671570\",\r\n396c396\r\n<           \"EvaluatedElement\": \"02e3b1433b20e84722db65d4bb75a8e69f029fd443baa846860e3da46cfefdba21ada5347f757b765c01a49bbf86a8ef43\",\r\n---\r\n>           \"EvaluatedElement\": \"032862c65c9e19fc126810b7108075a057299713ff1af00cf0978038bc3df621833ddb3f27f09436ed536d2bdcbce8405d\",\r\n398,399c398,399\r\n<             \"c\": \"9e1b75e2dbf9e24d21b5e75a2fc5af2debf50613564141f40ac65a6d95f77103c9b648f12fc7750a90a7346e921cb0dd\",\r\n<             \"s\": \"9588050d6cfad623c9e17062e78446e6daa6c6086a31e18b210484abcd9816eed22d929c394a66d0cdcba2927a12dbf5\"\r\n---\r\n>             \"c\": \"c707150e9601bf5c47c0363ae75964d3fa4c0e63d9363ad7adb1f9c2e282a23dd94a57b9b0b24af45a1186f762c0292b\",\r\n>             \"s\": \"ec1ef324c70a11273271a6ed52931891deafc8b3639bfba29d814ff09380dcf4fcb6461f27fea2c2221ce66bc83a0fed\"\r\n406c406\r\n<           \"IssuedToken\": \"037a243146bd1abc529498ee991886ab4e907cca669a380ec5b1c7fad7d8405494db54aca13b5d214f1e906a7e3785b7e8\"\r\n---\r\n>           \"IssuedToken\": \"030a07a24e81757605bbd1568c27deae193322e89e53e4a0ac18d39a9202c909f2c26dddcfadf3cab947fdb9f0068c2a1e\"\r\n413c413\r\n<     \"skS\": \"10a2022e9c9fd6a1695bbabe8add48bcd149ff3b840dc8a5d2483705fcc9a39607288b935b0797ac6b3c4b2e848823ac9ae16b3a3b5816be03432370deb7c3c17da\",\r\n---\r\n>     \"skS\": \"1578d11782429bff296102f6338df84c9602bfa9e7d690b1f7a173d07e6d54a419db4a6308f8b09589e4283efb9cd1ee4061c6bf884e60a877321ece4f9b6ffd01d\",\r\n418,419c418,419\r\n<           \"BlindedElement\": \"02019ccfd445bb38833c255603e9203031bc4b89b28eccb802b3c20a4e35f3edd9852b9f090dbf94a66a2d2e2e6d5d098f00d70eea123bbf3086c95164cbcf8536e94a\",\r\n<           \"Token\": \"f3f2d912c26ce2ecc5bb8d66419b379952e96bd6f4d0262d7e3b1096b0316bc8567c89bd70267d35c8ddcb2be2cdc867089a2eb5cf471b1e6eb4b043b9644c853a\"\r\n---\r\n>           \"BlindedElement\": \"020148afa375437a07519284f369ae27a8580cf05ab8231976027c9aa21f5587588c86249aa9f3de69066bc10b516a4ff691060b18b6f8ad073559b61a2e57d2b7e714\",\r\n>           \"Token\": \"9707cb131d51cf1324c123869859b596174a682828f3934d510217ce7890f67cafc0ffaa7a1e1d1ced3c477fea691e696032c8709c86cbcda2b184ad0029d29abf\"\r\n421c421\r\n<         \"ClientOutput\": \"501dda1139a6140655b78f509415c7535363f532251d1dfa420f1f7d0af03052b61672e1aba4fdecfdc917def6e19f578ad9fbe278f5421ce0c9c681bd211678\",\r\n---\r\n>         \"ClientOutput\": \"cae082e0293e6d0b601b87ac9c4b3c3381d78c77abf95f354f1749b04e485a07d0f2d985b5b0cb701aeb620a2b9a7b168a5e6cf2792e156d4e2d3a000617f8ff\",\r\n423c423\r\n<           \"EvaluatedElement\": \"0300fc7c3d043822a9d739075e727a4aaf88ce1f4c4bbb2a8ccf723e8e2e2086356e51b3a974340853e02ab3c3314a746e05ab563ca14ece93d1e103f16ab0bbda11a2\",\r\n---\r\n>           \"EvaluatedElement\": \"03018c3c4464b0e38cd2802043354b163e84e8395a9642a29e7140fba85716f8c234be68b042913ce15d506fb1bb281376caca679630c2e1f80485edd3af66cff3b835\",\r\n425,426c425,426\r\n<             \"c\": \"6b6efce5eba3b2b1dbca79e022afffe216a9c734aa19ae8a782b534504392524b49f1d93e7c279119752d24cd11d1032db035529d04058380b69439cd65c39167d\",\r\n<             \"s\": \"42f9faed13057f18387ec5c04a11dd2faa5b3c3d3f04d4f79d2d583514ae7c174a9e474103a88a6d46090daa91741931ee133c4381b6ec57f4fb9c982efb41c878\"\r\n---\r\n>             \"c\": \"7c2514ce293a67928637f8748f7e1f613d2b3f42db2e3537fc420725f9561f2edd5b8cd928ec6bd72772c48eba4bc0ee6ef9241328a90d526f7420951f0380bfa\",\r\n>             \"s\": \"139405048f4eb06ac8a2f44c6e3917b1f84dba911a35cfc46a3b39d3a386c5597b133c178d35b7cfabe5396f616b8ee375a4c69ed3433b420209f026d7cda1c8990\"\r\n433c433\r\n<           \"IssuedToken\": \"0201c622e68159a21e5d2425145c30ba80496473447395d73e1ac4b7a853e69ade150fee3ce98f484354b465b6606f3f50c1558370c29bde448790c199752efa7734c6\"\r\n---\r\n>           \"IssuedToken\": \"0201e724d23cb2badbfd056ccd7f715c958e3abd581efa1b4f2c9c64f56722d8827ac4afb2cc04ab2a327555e43fc85c81e124a2f09ddee9205cbe2617ba40fb5d6b34\"\r\n438,439c438,439\r\n<           \"BlindedElement\": \"0301139ac465d6da1590cedf48e11879a0d6f6021f1a02a94f87394edfe704ac8dd5382bf4df7cdb1d715da42929680f1134357bea0c5e5d54c6a59bd4392fd7ec66fc\",\r\n<           \"Token\": \"b543368327f3077c68a1545e9aafbba6a90dc0d4094ba4283237211e139f306fc904c2d4fe4cc69c0a15c1b9ee1e66339439e3925cf8ce21ce8659f22523b6ce78\"\r\n---\r\n>           \"BlindedElement\": \"030136e9be08dc7265b0c171cfb47f34abde819a6bcf450206d7282c755d2b04b1e805ed7b148fc301c6ecd13d7a1471cd1c3c83a8cd565a6c666208e98ef6b42bdcdf\",\r\n>           \"Token\": \"45d858051ce9ad1a533176a862c697b2c392aff2aeb77eb20c2ae6ba52fe31e13e03bf1d9f39878b22e5c4833d34c486a8510e7cca4c1b81ece04f47e8d2554a5f\"\r\n441c441\r\n<         \"ClientOutput\": \"6e4494f49037d2a90667866daf7b60302bed9770bdd7db70f9cb1755e3037a35c5927125d8c0788cac0e86c326566331ac358fb87c8cbfa978042d8dada862f6\",\r\n---\r\n>         \"ClientOutput\": \"c63331eb2c504e9985ac1134b3f660075e89dce5d471d30c95613a7328f811071427eadd003973b520cb4540e46fa0e158c07375667aba4fd429744c7d71d25f\",\r\n443c443\r\n<           \"EvaluatedElement\": \"0300db7319402a48e810b1ff6c762dd9b70e0cb72ad105f40cc6d43eeb3d456675b8891213ad099944782550cbe88955d8451e485c5ff8f2592e7442dede5cc57de1f8\",\r\n---\r\n>           \"EvaluatedElement\": \"0300abe02e56737b6ba3641a4064e5b6e6a4355667438ebebf3a4f27e3c81cb37fe53f1444e6b8ff3ede0a965d99956d55cd9d6cdb82da3bbb895ff85391eb37efd4a8\",\r\n445,446c445,446\r\n<             \"c\": \"3d45b7a231eb8bcc8977f3b8888eecbe0c1dcaf2813d03882a2df59bff6c874380ce696fa6063a277254fcb6ba69af19cdff6b2c8abe379251e5a0fb71c725ba28\",\r\n<             \"s\": \"15d0b519a12b22b4166e73bbde21df4874eb41f4c77581047eec5d0f71f1b3dadbb39031aa514914bd5e535f1906941739889c606292b3e05ec1760906659ae8e4e\"\r\n---\r\n>             \"c\": \"18c6a1b794aae68d714613ba03f66c0353f46804cb4ee3c188190599908028c3fc51b06648a6908f56e2582843b871162fb3ae08176d3a362f1f3db850b53673818\",\r\n>             \"s\": \"6ff3d8d55188c16f5ac8577101197fbff5615714d309477221e5d80571c4e577a702f609666037b15afb615308e1f47411a7a77767b96639c1e087f83dde8c2e12\"\r\n453c453\r\n<           \"IssuedToken\": \"03013ebfe9a208ca5a15c0ea34cc77838ce579872d10d24928c69bcc341738a543c49fe5d072fe192a3bbf54c27fd54ff055dd9e2a4a93b73a9d032c2da66b38208bcd\"\r\n---\r\n>           \"IssuedToken\": \"0300084c3d41e902b79a1227e55f7cbe0d7295dc37f4101ecf86c72862f11ba9f82f45ed8c18dcb69a29d1b267fa07c8759c40bd0311151fddc3f9743321beb380f3b3\"\r\n458,459c458,459\r\n<           \"BlindedElement\": \"0200ae76378cbbd40181f0a68135d373c1386090c30fd587b11385983014397bb1d98f91de7747b1729ac7c2aba4691da0c586b36a398cef89465593d49956237f416f\",\r\n<           \"Token\": \"9f6c175f11a827452672b60d4e9f89eba281046e2839dd2c7a98309b06dfe89ac0cdd6b74684580de0f95f8e06aa6f6663d48b1a4b998a539380ed73cafefa270a\"\r\n---\r\n>           \"BlindedElement\": \"0201a3e6259a2591a2ab5ec912d8ba71131689529cf9663fe6a66e41f78174e2e44481a1611bf01ce4ca2ae57eef9621785a4588052e1737b8e6cbb9b987e8ca1af43b\",\r\n>           \"Token\": \"1daa8b5d6253d35895f4cff282d86b2358d89a82ee6523eff8db014d9b8b53ad7b0e149b0938b45f65717a40c38f671d326e196e8a21bf6cfd40327a95f1ccfc82b\"\r\n461c461\r\n<         \"ClientOutput\": \"1e926cf08ed78a6952ee5ce31c7699720c54b6dfa8d2fd706a47c882f58272e870f169da874f2d9cdcd3fce6c827c568777579627910ced485ef167dcf4e317a\",\r\n---\r\n>         \"ClientOutput\": \"c0eca0a9db3f6a33380d8920a5be6f3baff1c3e82e42ea686ad924e745a9f4d20c5d989d3b3c6199909720a2d30b849c6221dbbb6eb5aae1b29b13b475745838\",\r\n463c463\r\n<           \"EvaluatedElement\": \"0301b07568e659cb1a3c9f606eed3109cc2bc365404cba45a7e81c0a5ba51dce32efcf9937f8175c0b570b98eb0bccd42a884313bcafa6f1406ad4486a828bb6a3bf38\",\r\n---\r\n>           \"EvaluatedElement\": \"0201dbb68001e5ce6bffcc6eb48508270c51eb613454a8a318b29a3bb1b285b80d3bf176f2f62daef2f8bd5b18e8922bbff15dd1386073598dea04246f8115687423d7\",\r\n465,466c465,466\r\n<             \"c\": \"2fa5eb370309bd906dbf620c0b934494399fb4924110992ba8427117a7861cb25c7ee5da4250b69d12c41309a9372058277e7cbefe99a4b157aa2864c6e0ab7629\",\r\n<             \"s\": \"49184800c3122d0282425c85e623f03ead0597df3b89d42cfc4ecb5dafd5c8aea9a685a0c717fde3aad00ca2c020536506dadf5a83dad1e1c8d8151e888a394993\"\r\n---\r\n>             \"c\": \"12f157afa77ff10aea0e6540856481d609c9d1166fddf2cbfbcd367690e393d42f5db46ba513c97757ab317ee717e988d177566e86b68f50fae695b9ad7b1f4834d\",\r\n>             \"s\": \"afb69a132769a9ebd41847c8418df7989e48dffb8ac40422a9f9b4eadf4753af5b8774a8723ecca9f45281c7e54b7813f6ca64d4052341e4466a8f1c1c3f889933\"\r\n473c473\r\n<           \"IssuedToken\": \"0201ea63b758515d53daca035e023a74f34908a9a1bc346b35455b7df8ebbdaf9d0d71f32f3cdc09208050ce69168f87f0da4af467db099f5b5b0d5cd64e8b97781150\"\r\n---\r\n>           \"IssuedToken\": \"02005ee2531da70027d8717ac0749a945941627c177ce47acc796a2cb65648263dc7369398a7a6304d8c486efaa5e247756e67874dd55f3bf4ff0ff5532ecaf48a2259\"\r\n480c480\r\n<     \"skS\": \"3dacfa42bdb38e3c626a939e19daca653b9217801b5d51cef66d9fdbd94a53533e7c5057e09e220065ea8c257c0dd6055c4b401063eff0c0\",\r\n---\r\n>     \"skS\": \"19763038a1ba1a337759061965a423d9d3d6e1e1006dc8984ad28a4c93ecfc36fc2171046b3c4284855cfa2434ed98db9e68a597db2c1473\",\r\n485,486c485,486\r\n<           \"BlindedElement\": \"de5ae64474051ee82ddd666afdc5e89e91a0fd2146b341140270da4b0a9bff2a4b2ed3b6d490ed1909c5696ee51e9d37cbde2e4fbfaebf1e\",\r\n<           \"Token\": \"c965dcec686956af0c7822ba317fb5e86028c44b92bd3aedcf6744d388ca013ef33edd369304ed96fc56c7c6c0bd369f8e926ffe4854a59\"\r\n---\r\n>           \"BlindedElement\": \"c2e6fe7576456669a32b5f93315bc7d130101296ef40fd6706f63b687ce245ee88de3657fddaa9919131dda3ee0387a615d29853936b820a\",\r\n>           \"Token\": \"2177890042b84d9ebe3b2e9de07678ff96713dfe16f40f2c662a56ed2db95e1e7bf2dea02bd1fa76e953a630772f68b53baade9962d1646\"\r\n488c488\r\n<         \"ClientOutput\": \"580176db69e927eb90d448c0929d3799eb8e3a0f4f1d554a1db62ce773711d43740cf400d27fcd91e2d9aad4accf3e95d0324ab52f1793e993ef79104076951a\",\r\n---\r\n>         \"ClientOutput\": \"f0913fb43f41ac7ef886f635e34b589f071008f795fa70f073c070fa54ae4d00510b95b7ca0915581cbe61b1c50b039bb1f3eb09bf5b35fc0e5a2beb2ae110dc\",\r\n490c490\r\n<           \"EvaluatedElement\": \"2cf19a8a1310ffef2f79fa1663d0301d70fba29f3c5a4164a66459e4bb557af53ab8b2cbc5cc275717a9b5f9d819d48252f0460040b99507\",\r\n---\r\n>           \"EvaluatedElement\": \"8ad803185e2074a7b02207c8b714d71dd5cbb0fb0d13442133a1ce03de3b5b4c65129f8219f3bad02295851484010848bec667ca57e85fcf\",\r\n492,493c492,493\r\n<             \"c\": \"18b28d5a5ab89f8ecc237793723b3c083e4aeddde07e4993f80244f15193533c77d5d53d8394bab4cb28d30e4854e5e6462de9ecc06bd39c\",\r\n<             \"s\": \"fb572f885f43f07d592837e03ca67884c88560928f8cf01ffe757415c2326059d28ffb3647575286ca52cc5e1b03919097dc18692fcb4ee\"\r\n---\r\n>             \"c\": \"3bc5d7606548270a0b42d80917af61fbb71f86343bed712eb2d5c9b32ecc619dd5c71a42106eab67179f24f55d6b7894122844199b3f0008\",\r\n>             \"s\": \"d85e516072d66fcfdd0d78d0b2ca91aaf01ccdd84f5934d21d4aa104d971d13c63263884252faa74cb1dab528fe209be5397d4446195f69\"\r\n500c500\r\n<           \"IssuedToken\": \"5445b2d1e14d4dff76c27141ffacc3f85d78b812e447db36a49eec426ab8cba4bc3e872caac8d8fa90e076d080bf759e09ce98a1ac8f82ae\"\r\n---\r\n>           \"IssuedToken\": \"4210bb0b15faafda2cd9499a4c1aa0bbbd40bd1a13789462e691bf2c515c3e9a810236c726d536ccb0ac36f804d50dfa57ad1e8908f58d65\"\r\n505,506c505,506\r\n<           \"BlindedElement\": \"d28d374007ddafb026cd397ba63aa951232a1e13e07acb8a74f087ad6eae10007eef7ab0746c487ee82e85e7594f6b982ed99ddbf3f3667e\",\r\n<           \"Token\": \"d641cf015b92d15450f7fb395bf52c6ea98384c491fe4e4d423b59de7b0df382902c13bdc9993d3717bda68fc080b9802ae4effd5dc972e\"\r\n---\r\n>           \"BlindedElement\": \"7a50a5be94767b5db417d04cbafbb62b10459b593d028e2a8463b73f7bc8f590d5998cfce17a2f8dd76d532cc05227b2a78b170da543aca5\",\r\n>           \"Token\": \"687292a4361e9f1b18e24c9a40ed5eec262bf51dc970d63acb5ab74318e54223c759e9747f59c0d4ecbc087302667fabefa647b1766accc\"\r\n508c508\r\n<         \"ClientOutput\": \"8b2bbb7fe01aaf90c3ba2357896ca69398441dcf767d567f8223758f5a3e53032040d6c55d23de23b7c4968e762ec01f9339c526466a49af2e652adf136439f4\",\r\n---\r\n>         \"ClientOutput\": \"a2cb8dc517289e2b432858cc2f6187e36d04ae1a2a9645ba10c3c7f1a4683058e5988a3f9bb5e06b728c7a17bcb41d683cdbfc32e2ab7907442720a1d4e05d51\",\r\n510c510\r\n<           \"EvaluatedElement\": \"0296e34ca96da0b3e1f683f39f4132048dd7550b44239053698b417991bfecf6147b1ec15f17bbd6aae9f7325e39cfe847ae94e7d8462c2a\",\r\n---\r\n>           \"EvaluatedElement\": \"2cd362caf43f5681361697050f57273220755aa7f73b28f00ed91d5053a4db14902edd9adefdf06b820cee8ec31f46d5bab60cfbc00f80c8\",\r\n512,513c512,513\r\n<             \"c\": \"32390be54fc5d4e44a8d2ec81de8a736777a33ebf67d29a357a3712d9e34f49864ba080d5d115a9f58587de676f5c6af9fa58fce13936722\",\r\n<             \"s\": \"1591e387a8325c54983fc41222635169f4109bc6e031716400fc1fe2952a47a6309d885317ab71e349d42739f20a412284f4e6cf51e836da\"\r\n---\r\n>             \"c\": \"5ee35b8478610a14955bd32791e189cd4144247e67357b733fbd97a32de2cd62f88b2f5061a1fb21cb53d68daf0744b0c77bbe6ad8be4bc\",\r\n>             \"s\": \"3275973bd8b1124d1a9c847d87a1f1625c1a0a07d4c51e2d4b4423a9bad183128b3dabd86749dbbe587ff4b65164cf4305fb5cb0f3f63b26\"\r\n520c520\r\n<           \"IssuedToken\": \"3032343f8390556150b81891da093c6205151a55a5926c593da647709b0c1bb6a7f81fafe11c1320388ad1c7eaa24c2887e0cc166fa57be3\"\r\n---\r\n>           \"IssuedToken\": \"58b4f8056c3e0cbc336914bf2791241e87d7658752c6152d3beda62021ccdabd46035a436f391397cb450f137fcdc64d67a19abf5751693f\"\r\n525,526c525,526\r\n<           \"BlindedElement\": \"a00c226777540438ff0607d3eb40c8e843ec03f7f35fb91122c3f4936a992057738d95d29fec452a610eaf4cde056483dc30ffa0b7af62fc\",\r\n<           \"Token\": \"1473c4c9c123869859b596174a682828f3934d510217ce7890f67cafc0ffaa7a1e1d1ced3c477fea691e696032c8709c86cbcda2b184ad01\"\r\n---\r\n>           \"BlindedElement\": \"40f5657ee71245f8f0a32e65a5f736c3210190a4df95739a07f8b9cb44a34463e2ee17e3e9bd40c0e21f4f04f12b5f55a29efe39ee8c7866\",\r\n>           \"Token\": \"24ea2f418ad9f44b428026396a810328c405a354e666f086fa0ea4754fb56527be010296ea880e1c6a4dbbc9ede543a2ad0f83fd60fdacb6\"\r\n528c528\r\n<         \"ClientOutput\": \"b3b3016ce42e3ccad4ab2a6ac8c6d9cdf1136bd719f44a6de49cc398fa460ae9b77f2f265b8df99cbcfb2db921b74084eb78b30b1f4de9102bc0090e037f8de7\",\r\n---\r\n>         \"ClientOutput\": \"1f615cddfe138372b15b9dca7bba648362c5b6e160f9ae0d310e43baacb7aa57b059f0c31c35b9f9c309508759e8b9ab19918ec4bfce0f34ca77c978d2395ccb\",\r\n530c530\r\n<           \"EvaluatedElement\": \"de5a12ce33d5ed7382d04fc2c57a85c9ff1366de1e1f229bdfbb1ce883b17f51171b15b5ac9290843d56f889d2a496ecb6b8b43945342913\",\r\n---\r\n>           \"EvaluatedElement\": \"802dcc649435f2ed6403a0216e948e8e3084552be0fb8063dd346a22d7a3ebd070e1db5ec21f5812991e6c019d2852b21cecf6ffa90cd8d2\",\r\n532,533c532,533\r\n<             \"c\": \"6a6ae91d30234b0a4dae9923f24c37447248421193d58746d22d7d23d182673c107900e1ce85d6bf50f755567752a09e49eff5c74cd6a88\",\r\n<             \"s\": \"224f058494a6936779d38249103998f302d81b4ed88e90f26e355119eac461bc3b1d8002704141c63ba8364aeb1834df70369bda551ecb6e\"\r\n---\r\n>             \"c\": \"22a7f84c6cffa2313deef8bfbc03fa4938c68722dbc87913d5afb00028c5610d2f7f246226c32d37490fc3855c7815a20d95d3e259e75a0a\",\r\n>             \"s\": \"17aea24052fd9ffbbbdee0c8419fc3827a0b4d543d2d477bfc7ac4800fee6145e3bb5b4ef9f5304a107840a9807609b4554370ebd616a3e1\"\r\n540c540\r\n<           \"IssuedToken\": \"887f2b4d97266247ac364d23f68ee39de2c0403ac20dca35ea065055fea89a9dec7b6da37830cd9462a159e5315eedd9b6b2d8af2b91d4f0\"\r\n---\r\n>           \"IssuedToken\": \"c0e19c5762bfb2bbb12904d2abccf6cd7e4371f307db5e3a42d0853f8627f858d0b2ed83b7d2ac49edbdec0490ef8f22bd395b703c31708a\"\r\n```\r\n\r\nlet me know what I'm doing wrong here.",
          "createdAt": "2020-11-04T23:01:14Z",
          "updatedAt": "2020-11-04T23:01:14Z"
        },
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "And to note, in my machine:\r\n\r\n```\r\npython: aliased to /usr/local/bin/python3\r\nsage -v                       \r\nSageMath version 9.1, Release Date: 2020-05-20\r\n```",
          "createdAt": "2020-11-04T23:02:47Z",
          "updatedAt": "2020-11-04T23:02:47Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> let me know what I'm doing wrong here.\r\n\r\nI don't know what's different, but that's not behavior I'm seeing. ",
          "createdAt": "2020-11-04T23:04:10Z",
          "updatedAt": "2020-11-04T23:04:10Z"
        },
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@armfazh, I'll use that then, and keep this PR for removing the ristretto and decaf in the tests. ",
          "createdAt": "2020-11-04T23:06:36Z",
          "updatedAt": "2020-11-04T23:06:36Z"
        },
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@chris-wood I'll check then what is wrong with my machine, as I ran it again, and it created new vectors. ",
          "createdAt": "2020-11-04T23:07:04Z",
          "updatedAt": "2020-11-04T23:07:04Z"
        },
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm closing this now.",
          "createdAt": "2020-11-05T14:15:26Z",
          "updatedAt": "2020-11-05T14:15:26Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzNTMxMDU2",
          "commit": {
            "abbreviatedOid": "5a7d45f"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-04T16:30:06Z",
          "updatedAt": "2020-11-04T16:30:07Z",
          "comments": [
            {
              "originalPosition": 62,
              "body": "Why doesn't `to_hex` work here?",
              "createdAt": "2020-11-04T16:30:07Z",
              "updatedAt": "2020-11-04T16:30:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzNTMxMzcy",
          "commit": {
            "abbreviatedOid": "5a7d45f"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-04T16:30:26Z",
          "updatedAt": "2020-11-04T16:30:27Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "Same here.",
              "createdAt": "2020-11-04T16:30:26Z",
              "updatedAt": "2020-11-04T16:30:27Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzNTMxOTUz",
          "commit": {
            "abbreviatedOid": "5a7d45f"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "LGTM modulo one nit :) ",
          "createdAt": "2020-11-04T16:31:07Z",
          "updatedAt": "2020-11-04T16:31:07Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzNzk3Njcx",
          "commit": {
            "abbreviatedOid": "5a7d45f"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-04T22:58:46Z",
          "updatedAt": "2020-11-04T22:58:46Z",
          "comments": [
            {
              "originalPosition": 62,
              "body": "Because server.skS is an int: \r\n\r\n``class 'sage.rings.integer.Integer'>`, which is not accepted by `to_hex` as it checks: `assert isinstance(octet_string, (bytes, bytearray))`. That is the reason why, as it can be seen in the code, it was previously using `hex`.\r\n\r\nBut it can be added to `to_hex`, if that is what is wanted.\r\n\r\n",
              "createdAt": "2020-11-04T22:58:46Z",
              "updatedAt": "2020-11-04T22:58:46Z"
            }
          ]
        }
      ]
    },
    {
      "number": 186,
      "id": "MDExOlB1bGxSZXF1ZXN0NTE1NjYxNDMw",
      "title": "defines two varibles after ComputeComposites",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/186",
      "state": "MERGED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Adds two variables, and fixes some typos.",
      "createdAt": "2020-11-04T21:55:51Z",
      "updatedAt": "2020-11-05T14:19:51Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "e02cf3466fbf033f1e9e92c04b069a8072b31072",
      "headRepository": "armfazh/draft-irtf-cfrg-voprf",
      "headRefName": "addTwoVariables",
      "headRefOid": "b9393a90f311a5da47d12d7ba5bfee38e0612393",
      "closedAt": "2020-11-05T14:19:51Z",
      "mergedAt": "2020-11-05T14:19:51Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "d34c3fff6b352c2a1c7586c4ec0b3b9368501abc"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0MzA1MjIy",
          "commit": {
            "abbreviatedOid": "4705574"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-11-05T14:18:53Z",
          "updatedAt": "2020-11-05T14:19:39Z",
          "comments": [
            {
              "originalPosition": 58,
              "body": "```suggestion\r\nTo ensure no information is leaked during protocol execution, all\r\n```",
              "createdAt": "2020-11-05T14:18:53Z",
              "updatedAt": "2020-11-05T14:19:46Z"
            }
          ]
        }
      ]
    },
    {
      "number": 187,
      "id": "MDExOlB1bGxSZXF1ZXN0NTE1Njk4Nzkw",
      "title": "Optimization of compute composites",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/187",
      "state": "MERGED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "\r\nImplements a server-side optimization reported.\r\n\r\nhttps://mailarchive.ietf.org/arch/msg/cfrg/dt8TUtTD-JVgVxjpEL9lz5wUTb8/\r\n\r\nMerge after #186 \r\n",
      "createdAt": "2020-11-04T23:36:03Z",
      "updatedAt": "2020-11-06T00:22:50Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "97e38250ac2745ccb23e70a5e682b1f973f680b1",
      "headRepository": "armfazh/draft-irtf-cfrg-voprf",
      "headRefName": "optComputeComposites",
      "headRefOid": "831e5af0d0a740dd6ded64a18d3436a148f4ceff",
      "closedAt": "2020-11-06T00:22:50Z",
      "mergedAt": "2020-11-06T00:22:50Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "682991c30fdb2594bfa720f16edd8650a1609840"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0NzcyOTAz",
          "commit": {
            "abbreviatedOid": "831e5af"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-11-06T00:22:44Z",
          "updatedAt": "2020-11-06T00:22:44Z",
          "comments": []
        }
      ]
    },
    {
      "number": 188,
      "id": "MDExOlB1bGxSZXF1ZXN0NTE1NzcxMTI3",
      "title": "updates fields in test vectors",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/188",
      "state": "MERGED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I finally get reproducible test vectors, I suspect that the cause was grouping the suites in a set versus in a list.\r\nMerge after #187 ",
      "createdAt": "2020-11-05T03:37:30Z",
      "updatedAt": "2020-11-06T00:23:06Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "97e38250ac2745ccb23e70a5e682b1f973f680b1",
      "headRepository": "armfazh/draft-irtf-cfrg-voprf",
      "headRefName": "random",
      "headRefOid": "144d839d75a303f83ea65971539b761a7b391d3d",
      "closedAt": "2020-11-06T00:23:06Z",
      "mergedAt": "2020-11-06T00:23:06Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "f71b2b7883fc19050f45b80fae295eb53b5fac5c"
      },
      "comments": [
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Oh nice! Thank you! Can you also delete the check for ristretto or decaf on the test file?",
          "createdAt": "2020-11-05T14:15:10Z",
          "updatedAt": "2020-11-05T14:15:10Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> I suspect that the cause was grouping the suites in a set versus in a list.\r\n\r\nHah! That does explain it, as I only ran one ciphersuite each time I did the test (to save time). ",
          "createdAt": "2020-11-05T14:32:18Z",
          "updatedAt": "2020-11-05T14:32:18Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0MzA3MDY3",
          "commit": {
            "abbreviatedOid": "4715583"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-05T14:20:44Z",
          "updatedAt": "2020-11-05T14:20:45Z",
          "comments": [
            {
              "originalPosition": 113,
              "body": "```suggestion\r\nTo ensure no information is leaked during protocol execution, all\r\n```",
              "createdAt": "2020-11-05T14:20:45Z",
              "updatedAt": "2020-11-05T22:54:42Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0MzExODI0",
          "commit": {
            "abbreviatedOid": "4e98b53"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "I quite like the change, but I think it needs to be reformatted for clarity. Also, as @claucece suggests, can we remove the special case ristretto255/decaf448 changes from the test file?",
          "createdAt": "2020-11-05T14:25:21Z",
          "updatedAt": "2020-11-05T14:33:20Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "```suggestion\r\nrather than a single input. Applications can take advantage of this\r\nfunctionality by invoking `GenerateProof` on batches of inputs to \r\nproduce a combined, constant-size proof. (In the pseudocode above, \r\nthe single inputs `blindToken` and `element` passed as one-item lists \r\nto `ComputeComposites`.) \r\n```",
              "createdAt": "2020-11-05T14:25:21Z",
              "updatedAt": "2020-11-05T22:54:42Z"
            },
            {
              "originalPosition": 29,
              "body": "Can we refactor this function so that it doesn't have a reference to `self` internally? It's sort of awkward as-is.",
              "createdAt": "2020-11-05T14:26:38Z",
              "updatedAt": "2020-11-05T22:54:42Z"
            },
            {
              "originalPosition": 83,
              "body": "```suggestion\r\n            vectors.append(protocol.run())\r\n```",
              "createdAt": "2020-11-05T14:30:14Z",
              "updatedAt": "2020-11-05T22:54:42Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0NjA0MjA1",
          "commit": {
            "abbreviatedOid": "4e98b53"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-05T19:36:10Z",
          "updatedAt": "2020-11-05T19:36:10Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "I think this also extends to the contextString?\r\n```\r\n  seedDST = \"VOPRF05-seed-\" || self.contextString\r\n```\r\n",
              "createdAt": "2020-11-05T19:36:10Z",
              "updatedAt": "2020-11-05T22:54:42Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0NzM5ODkz",
          "commit": {
            "abbreviatedOid": "144d839"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-05T23:01:40Z",
          "updatedAt": "2020-11-05T23:01:41Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "I followed the same pattern of using self. Ideas are welcomed.",
              "createdAt": "2020-11-05T23:01:41Z",
              "updatedAt": "2020-11-05T23:01:41Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0NzcyNjA0",
          "commit": {
            "abbreviatedOid": "144d839"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-06T00:21:56Z",
          "updatedAt": "2020-11-06T00:21:56Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "Ohh, yeah. Hmm. How about we merge as-is and then I make an attempt at clarifying after?",
              "createdAt": "2020-11-06T00:21:56Z",
              "updatedAt": "2020-11-06T00:21:56Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0NzcyNzYy",
          "commit": {
            "abbreviatedOid": "144d839"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-11-06T00:22:22Z",
          "updatedAt": "2020-11-06T00:22:22Z",
          "comments": []
        }
      ]
    },
    {
      "number": 189,
      "id": "MDExOlB1bGxSZXF1ZXN0NTE2NDIzMzMx",
      "title": "Refactor ComputeComposites",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/189",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I think this makes the description more clear, and also makes the use for each function apparent. ",
      "createdAt": "2020-11-06T00:41:57Z",
      "updatedAt": "2020-11-10T14:39:47Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "f71b2b7883fc19050f45b80fae295eb53b5fac5c",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/refactor-compute-composites",
      "headRefOid": "63753584307623947c105d22db6db8f958092870",
      "closedAt": "2020-11-06T00:49:33Z",
      "mergedAt": "2020-11-06T00:49:32Z",
      "mergedBy": "armfazh",
      "mergeCommit": {
        "oid": "fd03eb957c9affa0d2ba8232280fd7a8b0243483"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0NzgyMjgx",
          "commit": {
            "abbreviatedOid": "6375358"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-11-06T00:49:01Z",
          "updatedAt": "2020-11-06T00:49:01Z",
          "comments": []
        }
      ]
    },
    {
      "number": 190,
      "id": "MDExOlB1bGxSZXF1ZXN0NTE3MzUwNjQ1",
      "title": "Restructure and reformat test vectors",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/190",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "And write them to in text format (for the spec). Sample output is below. In making this change, I also renamed parameters used throughout the document. Specifically, I started moving away from \"token\" (which is a relic of Privacy Pass) towards \"element.\" \r\n\r\nI also fixed a bug in the type of the Finalize \"output\" parameter, where previously it was a vector (with length prefix) but was actually just a fixed-length hash function output.\r\n\r\n```\r\n## OPRF(ristretto255, SHA-256)\r\n\r\n### Base Mode\r\n\r\nskS = 0x38ecf12e5465e4f1362d237521104338cde6717e26a25a5770da7ad85c70\r\n4c6 \r\n\r\n#### Test Vector 1\r\n\r\nInput = 0x00 \r\nBlind = 0xbe537e02b0116a48941a76d08b3af2366cc6ee4237b306d3153fc6b209\r\n5d85e \r\nBlindedElement = 0xdcdfdc7560b0fb00809bbddc395eb740ec198e3a3d098c074\r\n1a077fa20fc8126 \r\nEvaluatedElement = 0x9e066b349ff1f2e1eb82264f9777ce63fe3aea2e429e944\r\n9b89116fb1b85871d \r\nUnblindedElement = 0xe81179b0fa0b03ab4f1d4e557233f17bd05d23f158d3255\r\n2def49a0d38ea5249 \r\nInfo = 0x736f6d655f696e666f00 \r\nOutput = 0xeae38ae2f64e3747e185c7fa058141352da46f94f231c7db6b7b4c943\r\n5033545 \r\n\r\n...\r\n```\r\n\r\n@dvorak42 would this format work for you?",
      "createdAt": "2020-11-08T18:35:51Z",
      "updatedAt": "2020-11-10T14:39:46Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "72ad54bba21da719456d85d3a12304410f83448d",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/format-vectors",
      "headRefOid": "0d6b0d8c01c4736272164ce39e419baa9e635f24",
      "closedAt": "2020-11-09T22:44:54Z",
      "mergedAt": "2020-11-09T22:44:54Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "111e3606f8b26a306f1910b84954f71aa563416f"
      },
      "comments": [
        {
          "author": "dvorak42",
          "authorAssociation": "NONE",
          "body": "Generally seems good, though it might be useful to have some test vectors with multiple elements for the batching/ComputeComposites primitive.",
          "createdAt": "2020-11-09T15:24:37Z",
          "updatedAt": "2020-11-09T15:24:37Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> Generally seems good, though it might be useful to have some test vectors with multiple elements for the batching/ComputeComposites primitive.\r\n\r\nThat's a great point! I'll add that (probably in a followup PR).",
          "createdAt": "2020-11-09T17:20:48Z",
          "updatedAt": "2020-11-09T17:28:06Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2NTEzMTU3",
          "commit": {
            "abbreviatedOid": "9d60157"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2020-11-09T17:59:33Z",
          "updatedAt": "2020-11-09T18:23:16Z",
          "comments": [
            {
              "originalPosition": 231,
              "body": "in the protocol diagram, Unblind takes four arguments",
              "createdAt": "2020-11-09T17:59:33Z",
              "updatedAt": "2020-11-09T22:44:46Z"
            },
            {
              "originalPosition": 346,
              "body": "I think it is better to define `Nh` parameter in Section 2. \r\n",
              "createdAt": "2020-11-09T18:02:42Z",
              "updatedAt": "2020-11-09T22:44:46Z"
            },
            {
              "originalPosition": 386,
              "body": "4 params",
              "createdAt": "2020-11-09T18:02:55Z",
              "updatedAt": "2020-11-09T22:44:46Z"
            },
            {
              "originalPosition": 102,
              "body": "```suggestion\r\n        L = int( ceil( log(self.p, 2) / 8 ) )\r\n```",
              "createdAt": "2020-11-09T18:07:24Z",
              "updatedAt": "2020-11-09T22:44:46Z"
            },
            {
              "originalPosition": 25,
              "body": "EvaluationElement?",
              "createdAt": "2020-11-09T18:19:31Z",
              "updatedAt": "2020-11-09T22:44:46Z"
            },
            {
              "originalPosition": 114,
              "body": "Add txt file to repo?\r\n",
              "createdAt": "2020-11-09T18:22:33Z",
              "updatedAt": "2020-11-09T22:44:46Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2NTM4Njgw",
          "commit": {
            "abbreviatedOid": "9d60157"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-09T18:33:04Z",
          "updatedAt": "2020-11-09T18:33:05Z",
          "comments": [
            {
              "originalPosition": 346,
              "body": "There's a separate issue for that. I'll do it there.",
              "createdAt": "2020-11-09T18:33:05Z",
              "updatedAt": "2020-11-09T22:44:46Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2NTM4ODMy",
          "commit": {
            "abbreviatedOid": "9d60157"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-09T18:33:15Z",
          "updatedAt": "2020-11-09T18:33:16Z",
          "comments": [
            {
              "originalPosition": 102,
              "body": "This is unchanged, so resolving.",
              "createdAt": "2020-11-09T18:33:16Z",
              "updatedAt": "2020-11-09T22:44:46Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2NTM5MDYx",
          "commit": {
            "abbreviatedOid": "9d60157"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-09T18:33:34Z",
          "updatedAt": "2020-11-09T18:33:35Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "\ud83d\udc4d ",
              "createdAt": "2020-11-09T18:33:34Z",
              "updatedAt": "2020-11-09T22:44:46Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2NTM5MTkx",
          "commit": {
            "abbreviatedOid": "9d60157"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-09T18:33:45Z",
          "updatedAt": "2020-11-09T18:33:45Z",
          "comments": [
            {
              "originalPosition": 114,
              "body": "I left it out for now, since it's only needed for the document. We can add it though.",
              "createdAt": "2020-11-09T18:33:45Z",
              "updatedAt": "2020-11-09T22:44:46Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2NTkyMTE4",
          "commit": {
            "abbreviatedOid": "51bd5df"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-09T19:38:01Z",
          "updatedAt": "2020-11-09T19:38:02Z",
          "comments": [
            {
              "originalPosition": 231,
              "body": "This should be fixed.",
              "createdAt": "2020-11-09T19:38:01Z",
              "updatedAt": "2020-11-09T22:44:46Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2NjQ1MzU1",
          "commit": {
            "abbreviatedOid": "43ec9af"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-11-09T20:53:36Z",
          "updatedAt": "2020-11-09T21:16:51Z",
          "comments": [
            {
              "originalPosition": 621,
              "body": "```suggestion\r\n  blindedGenerator = ScalarBaseMult(blind)\r\n```",
              "createdAt": "2020-11-09T20:53:36Z",
              "updatedAt": "2020-11-09T22:44:46Z"
            },
            {
              "originalPosition": 76,
              "body": "Protocol types sounds to me like protocol variants.\r\n\r\n```suggestion\r\n## Data Types {#structs}\r\n```",
              "createdAt": "2020-11-09T20:56:46Z",
              "updatedAt": "2020-11-09T22:44:46Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2NzU4Njky",
          "commit": {
            "abbreviatedOid": "0d6b0d8"
          },
          "author": "bytemare",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-10T00:21:47Z",
          "updatedAt": "2020-11-10T00:21:47Z",
          "comments": [
            {
              "originalPosition": 631,
              "body": "Why return the `blind` when it is not used afterward?",
              "createdAt": "2020-11-10T00:21:47Z",
              "updatedAt": "2020-11-10T00:21:47Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2NzU4Nzg5",
          "commit": {
            "abbreviatedOid": "0d6b0d8"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-10T00:22:00Z",
          "updatedAt": "2020-11-10T00:22:01Z",
          "comments": [
            {
              "originalPosition": 631,
              "body": "This was fixed in a followup change!",
              "createdAt": "2020-11-10T00:22:00Z",
              "updatedAt": "2020-11-10T00:22:01Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2NzU5MjM0",
          "commit": {
            "abbreviatedOid": "0d6b0d8"
          },
          "author": "bytemare",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-10T00:23:04Z",
          "updatedAt": "2020-11-10T00:23:05Z",
          "comments": [
            {
              "originalPosition": 643,
              "body": "Why use `blindedPublicKey` as input and output of this function, since it is not used?",
              "createdAt": "2020-11-10T00:23:04Z",
              "updatedAt": "2020-11-10T00:23:05Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2NzYwNjU3",
          "commit": {
            "abbreviatedOid": "0d6b0d8"
          },
          "author": "bytemare",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-10T00:26:51Z",
          "updatedAt": "2020-11-10T00:26:52Z",
          "comments": [
            {
              "originalPosition": 631,
              "body": "Oh, I'm sorry about that! Missed it!",
              "createdAt": "2020-11-10T00:26:52Z",
              "updatedAt": "2020-11-10T00:26:52Z"
            }
          ]
        }
      ]
    },
    {
      "number": 202,
      "id": "MDExOlB1bGxSZXF1ZXN0NTE4MTE2MzEy",
      "title": "Fix ComputeComposite encoding.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/202",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This closes #192, and also fixes a bug in the PoC implementation.\r\n\r\ncc @claucece (for when we add verifiable mode to CIRCL)",
      "createdAt": "2020-11-09T23:56:39Z",
      "updatedAt": "2020-11-10T14:39:39Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "87d42c249e83cce10a741e4a7bc96486e8b6cdf1",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/fix-composites",
      "headRefOid": "e0b87288db276ab1667f403c7c85f564a6e277a4",
      "closedAt": "2020-11-10T00:35:29Z",
      "mergedAt": "2020-11-10T00:35:29Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "ebeed72a2081dfe824fd494dacd08717b684ae53"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2NzYyMTQ5",
          "commit": {
            "abbreviatedOid": "854ea43"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Regenerate test vectors.",
          "createdAt": "2020-11-10T00:30:51Z",
          "updatedAt": "2020-11-10T00:31:49Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "```suggestion\r\n        i = 0\r\n        h2_input = I2OSP(len(seed), 2) + seed \\\r\n            + I2OSP(i, 2) \\\r\n```",
              "createdAt": "2020-11-10T00:30:51Z",
              "updatedAt": "2020-11-10T00:34:34Z"
            }
          ]
        }
      ]
    },
    {
      "number": 203,
      "id": "MDExOlB1bGxSZXF1ZXN0NTE4MTM4NTc3",
      "title": "Move ristretto255 suite to SHA-512 for better alignment with Ed25519.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/203",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #200.\r\n\r\ncc @bytemare, @jedisct1",
      "createdAt": "2020-11-10T01:06:01Z",
      "updatedAt": "2020-11-10T14:39:36Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "ebeed72a2081dfe824fd494dacd08717b684ae53",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/fix-ristretto255",
      "headRefOid": "a69357ab2a698235c079207d4b7b1de5c35dce3a",
      "closedAt": "2020-11-10T01:49:22Z",
      "mergedAt": "2020-11-10T01:49:22Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "6573453447b918798e17270f2ad97637b7d7a667"
      },
      "comments": [
        {
          "author": "jedisct1",
          "authorAssociation": "NONE",
          "body": "Looks good!",
          "createdAt": "2020-11-10T01:12:16Z",
          "updatedAt": "2020-11-10T01:12:16Z"
        },
        {
          "author": "bytemare",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Looks good to me :)",
          "createdAt": "2020-11-10T14:03:26Z",
          "updatedAt": "2020-11-10T14:03:26Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2NzkxNTIw",
          "commit": {
            "abbreviatedOid": "a69357a"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-11-10T01:46:28Z",
          "updatedAt": "2020-11-10T01:46:28Z",
          "comments": []
        }
      ]
    },
    {
      "number": 204,
      "id": "MDExOlB1bGxSZXF1ZXN0NTE4MTQ5NDE0",
      "title": "Make DST longer and upper-case prefixes.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/204",
      "state": "MERGED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "armfazh"
      ],
      "labels": [],
      "body": "To remedy #198, I propose to extend DST as follows:\r\n```\r\nDST = \"RFCXXXX-HashToGroup-\" + I2OSP(mode, 1)  + I2OSP(suite.ID, 2)\r\nlen(DST) = 22\r\n```",
      "createdAt": "2020-11-10T01:40:57Z",
      "updatedAt": "2020-11-10T13:37:19Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "6573453447b918798e17270f2ad97637b7d7a667",
      "headRepository": "armfazh/draft-irtf-cfrg-voprf",
      "headRefName": "fixDST",
      "headRefOid": "4804f9c95d57f56a914c43ede76b3e486bc5080d",
      "closedAt": "2020-11-10T13:37:19Z",
      "mergedAt": "2020-11-10T13:37:19Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "d7f05561b695b13fa7073a98eea7391ec84e98aa"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2ODAxNzcx",
          "commit": {
            "abbreviatedOid": "a6651fc"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM with one suggestion!",
          "createdAt": "2020-11-10T02:16:39Z",
          "updatedAt": "2020-11-10T02:16:48Z",
          "comments": [
            {
              "originalPosition": 45,
              "body": "Can we add text (to the parent section) describing the rationale for this choice? For example:\r\n\r\n~~~\r\nEach ciphersuite specifies the HashToGroup operation for the corresponding group.\r\nThe domain separation tag (DST) for this operation is constructed to satisfy the \r\nrecommendations in {{!I-D.irtf-cfrg-hash-to-curve}}, Section 3.1.\r\n~~~",
              "createdAt": "2020-11-10T02:16:39Z",
              "updatedAt": "2020-11-10T13:37:02Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3MjA2MjQ1",
          "commit": {
            "abbreviatedOid": "c35c746"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-10T13:36:34Z",
          "updatedAt": "2020-11-10T13:36:35Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "```suggestion\r\n  point defined in the corresponding reference for each group. Each group also\r\n  specifies HashToGroup, HashToScalar, and serialization functionalities. For \r\n  HashToGroup, the domain separation tag (DST) is constructed in accordance\r\n  with the recommendations in {{!I-D.irtf-cfrg-hash-to-curve}}, Section 3.1.\r\n```",
              "createdAt": "2020-11-10T13:36:35Z",
              "updatedAt": "2020-11-10T13:37:02Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3MjA2NzA3",
          "commit": {
            "abbreviatedOid": "4804f9c"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-11-10T13:37:07Z",
          "updatedAt": "2020-11-10T13:37:07Z",
          "comments": []
        }
      ]
    },
    {
      "number": 205,
      "id": "MDExOlB1bGxSZXF1ZXN0NTE4NTY1OTUy",
      "title": "Add batched test vector support for verifiable mode.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/205",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Sample test vector output is below. Notice that the OPRF outputs are the same in the batched case (as expected), but the proof is different. \r\n\r\n~~~\r\n### Verifiable Mode\r\n\r\nskS = 0x91a688c1b83ecbc9dac5da9042f60bbda9f332fd6cdf828252920741dbd9\r\nc01 \r\npkS = 0xeee7a9c7fec3460c27c160c683d46a4fd18f537c055c3998748b8e4cd8f2\r\n9b3e \r\n\r\n#### Test Vector 1, Batch Size 1\r\n\r\nInput = 0x00 \r\nBlind = 0x7e7b0d8e0e019c1c5e47d3b1743cf3b333d8459e92f1fa45c1a19c8421\r\nac689 \r\nBlindedElement = 0x5c32e60d33bf1926fb6220a0ba83884be61c909683a91a647\r\nba5e161397c9420 \r\nEvaluationElement = 0x90ffd831afd69d69a08683e94a33c6e4bf46c24390591a\r\n725046faf6e104b03a \r\nUnblindedElement = 0x343b7e213ad40ab18b2095a3add95af7161704f40c270ec\r\n457c73969048ab704 \r\nEvaluationProofC = 0x6b748a78be51b6a8aaf457277f17004e43f5ccd3f96a7d0\r\n63d9f1491ede53df \r\nEvaluationProofS = 0x2b0852b04a5302eac7cfec5c3e0d41f610944defa4ac0ac\r\n6b891ffdac208319 \r\nInfo = 0x736f6d655f696e666f \r\nOutput = 0x1b5cbcddfc80e381b89fe480744b102902c94b5717d41a279b7d17d36\r\na84a940a1a5bd5efd096e042fe4b50257707cc970577d7341b19b393cc01178e0775\r\n066 \r\n\r\n#### Test Vector 2, Batch Size 1\r\n\r\nInput = 0x5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a \r\nBlind = 0x9c97062a1b0a0229b0775217c99815e2036aff826a4044cb752ade9225\r\n0668d \r\nBlindedElement = 0xf2318dd1be4c80946970fe8a2fdd457b0fb5fe9475539d0d7\r\nfeceda14e41de5f \r\nEvaluationElement = 0x02539bb26498540190ecf5a0f58994fc21a707cb0d9417\r\n9ff9799ee5b2ee9822 \r\nUnblindedElement = 0x7282c36c2cb0179ef876c8541fa8d14c532cc6f66af905b\r\n159c653c25081161f \r\nEvaluationProofC = 0x23eba0d5688610ba98e6f1a044d82bc02ca9a58ed4f537b\r\nef85e0604a3f1224 \r\nEvaluationProofS = 0xedb8dac7ff0d01b1f38ed9b07322081fd5310f907604b6d\r\nba63c505b135cd09 \r\nInfo = 0x736f6d655f696e666f \r\nOutput = 0x9b8850a28154b3fba7a00b7e74541871f85f7d17ca5300f442e9daeb7\r\ndce2b21d3b4ff67b8e84e0dfa5195e262a54fb1ab45f0851a4feadcf3a8d8a808b93\r\ncc4 \r\n\r\n#### Test Vector 3, Batch Size 2\r\n\r\nInput = 0x00,0x5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a \r\nBlind = 0x8ce6d88376170a98651af33ac718e4c44f8220586a8e4ee92157925c3a\r\nef53a,0x4afef5d250bf7f992b0e07477e3d32487b2d637e712ef4ee28dc1da700bc\r\nb8b \r\nBlindedElement = 0x5cdaff2d4304bd940b018f2e06c633d5633e5c16403f9c766\r\nbc1f418e442f174,0x6a09bfb3cbf0450cbae2e77a1159079a261d1fc8963b197dec\r\nf3b64287ab4b0a \r\nEvaluationElement = 0xda5ae0e6a48211ea990d46f22785ab5b8aebfb30a899ce\r\na4ef3e06dd7a108804,0xec518d0e6ec97c168e2f83d04f26de952658adadc3fd0cb\r\n1840c373f1842362b \r\nUnblindedElement = 0x343b7e213ad40ab18b2095a3add95af7161704f40c270ec\r\n457c73969048ab704,0x7282c36c2cb0179ef876c8541fa8d14c532cc6f66af905b1\r\n59c653c25081161f \r\nEvaluationProofC = 0xc4cfdd765340c4ab4c2fba79cd708a5e3857f7aafaab997\r\n483fa071631d7a5a \r\nEvaluationProofS = 0x8cbaf2e5349d0c992d86529e9c0628f3b26a8ba1a98ed1a\r\n99c05fd4ccd24a60 \r\nInfo = 0x736f6d655f696e666f \r\nOutput = 0x1b5cbcddfc80e381b89fe480744b102902c94b5717d41a279b7d17d36\r\na84a940a1a5bd5efd096e042fe4b50257707cc970577d7341b19b393cc01178e0775\r\n066,0x9b8850a28154b3fba7a00b7e74541871f85f7d17ca5300f442e9daeb7dce2b\r\n21d3b4ff67b8e84e0dfa5195e262a54fb1ab45f0851a4feadcf3a8d8a808b93cc4 \r\n~~~",
      "createdAt": "2020-11-10T15:21:55Z",
      "updatedAt": "2022-01-22T15:16:51Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "b2a88f0c163f86b52f549006900df01df632f460",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/add-batch-vectors",
      "headRefOid": "5ae332b1dc87f648ba2b21c60ddc2b688803d822",
      "closedAt": "2020-11-10T21:56:42Z",
      "mergedAt": "2020-11-10T21:56:42Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "b7d000d09c279b091b512331d3384ab7058b551d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NjMxMzU4",
          "commit": {
            "abbreviatedOid": "36fe1c6"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "It looks good.\r\n\r\n* I will update the json vectors tags at suite/mode level. Because currently the name and mode are used as tags, meanwhile they are already present in fields. Thus, other implementations can iterate over vectors.\r\n",
          "createdAt": "2020-11-10T21:43:27Z",
          "updatedAt": "2020-11-10T21:49:35Z",
          "comments": [
            {
              "originalPosition": 47,
              "body": "```suggestion\r\n            if skS == None:\r\n                Zi = self.suite.group.deserialize(evaluated_element)\r\n                Z = (di * Zi) + Z\r\n\r\n    if skS != None:\r\n        Z = self.skS * M\r\n```",
              "createdAt": "2020-11-10T21:43:28Z",
              "updatedAt": "2020-11-10T21:56:27Z"
            }
          ]
        }
      ]
    },
    {
      "number": 206,
      "id": "MDExOlB1bGxSZXF1ZXN0NTE4ODAwNzE4",
      "title": "Add test vectors.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/206",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #51.",
      "createdAt": "2020-11-10T22:25:01Z",
      "updatedAt": "2022-01-22T15:16:53Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "b7daba2082e8c74355c8c1f7e46911fd53186f61",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/test-vectors",
      "headRefOid": "65033b0cf66245bb439ed104aaf8f0bb3c27deb2",
      "closedAt": "2020-11-10T23:08:38Z",
      "mergedAt": "2020-11-10T23:08:38Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "2589e0bc0e294fb7ccd785506024826d9cce5026"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NjcwMTUz",
          "commit": {
            "abbreviatedOid": "3b78c8d"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-10T22:47:54Z",
          "updatedAt": "2020-11-10T22:47:54Z",
          "comments": [
            {
              "originalPosition": 169,
              "body": "```suggestion\r\nThe server key material, pkS and skS, are listed as serialized values\r\nunder the mode for each ciphersuite.\r\n```",
              "createdAt": "2020-11-10T22:47:54Z",
              "updatedAt": "2020-11-10T23:06:39Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3Njc4MTYw",
          "commit": {
            "abbreviatedOid": "3b78c8d"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-10T23:03:20Z",
          "updatedAt": "2020-11-10T23:03:20Z",
          "comments": [
            {
              "originalPosition": 169,
              "body": "Ah I wrote this and then forgot to change it. One sec, and I'll fix it. ",
              "createdAt": "2020-11-10T23:03:20Z",
              "updatedAt": "2020-11-10T23:06:39Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NjgwNTA1",
          "commit": {
            "abbreviatedOid": "65033b0"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-11-10T23:08:09Z",
          "updatedAt": "2020-11-10T23:08:09Z",
          "comments": []
        }
      ]
    },
    {
      "number": 207,
      "id": "MDExOlB1bGxSZXF1ZXN0NTE4ODIwMTg3",
      "title": "Add github.com/bytemare/voprf implementation",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/207",
      "state": "MERGED",
      "author": "bytemare",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "As suggested by @chris-wood, added a voprf implemention.",
      "createdAt": "2020-11-10T23:14:38Z",
      "updatedAt": "2020-11-10T23:36:49Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "2589e0bc0e294fb7ccd785506024826d9cce5026",
      "headRepository": "bytemare/draft-irtf-cfrg-voprf",
      "headRefName": "patch-1",
      "headRefOid": "40b9444facb6ba7e68dea0aaf1eafde6b171a3a9",
      "closedAt": "2020-11-10T23:15:46Z",
      "mergedAt": "2020-11-10T23:15:46Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "a68bd7fc0063eb2070e713a547cae5d8f6088e62"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 210,
      "id": "MDExOlB1bGxSZXF1ZXN0NTE5NTQ3NTg3",
      "title": "Pads bytestrings with zeros and fixes endianess",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/210",
      "state": "MERGED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "armfazh"
      ],
      "labels": [],
      "body": "the `hex` function didn't pad with zeros and issues with endianess.\r\n\r\n - Included a function for padding, so all byte strings are of even length.\r\n - Removes '0x' prefix because the array of bytes can be either in big-endian (256-384-521) or little-endian order (255-448).\r\n - batch is an integer.\r\n\r\nFixes #209 ",
      "createdAt": "2020-11-12T01:08:40Z",
      "updatedAt": "2020-11-12T18:28:46Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "8ec42c73db97a862827b8eec959a4df3d031adec",
      "headRepository": "armfazh/draft-irtf-cfrg-voprf",
      "headRefName": "fixHexCvt",
      "headRefOid": "874559d6b25fca862e174cd8735728f31f8aed26",
      "closedAt": "2020-11-12T18:28:46Z",
      "mergedAt": "2020-11-12T18:28:46Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "b185703c2de226b33d189ce520af91cc5cdb399f"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "This seems to work: https://play.golang.org/p/SHILTLDHRZ3\r\n\r\n@bytemare, can you please check the vectors?",
          "createdAt": "2020-11-12T18:18:16Z",
          "updatedAt": "2020-11-12T18:18:16Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4NjgwODU4",
          "commit": {
            "abbreviatedOid": "0172b54"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-12T02:00:24Z",
          "updatedAt": "2020-11-12T18:16:22Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "```suggestion\r\n    def byte_length(self):\r\n```",
              "createdAt": "2020-11-12T02:00:24Z",
              "updatedAt": "2020-11-12T18:27:11Z"
            },
            {
              "originalPosition": 14,
              "body": "```suggestion\r\n    def byte_length(self):\r\n```",
              "createdAt": "2020-11-12T02:00:43Z",
              "updatedAt": "2020-11-12T18:27:11Z"
            },
            {
              "originalPosition": 24,
              "body": "```suggestion\r\n    def byte_length(self):\r\n```",
              "createdAt": "2020-11-12T02:00:50Z",
              "updatedAt": "2020-11-12T18:27:11Z"
            },
            {
              "originalPosition": 34,
              "body": "```suggestion\r\n    def byte_length(self):\r\n```",
              "createdAt": "2020-11-12T02:00:55Z",
              "updatedAt": "2020-11-12T18:27:11Z"
            },
            {
              "originalPosition": 5,
              "body": "```suggestion\r\ndef int_to_hex(integer, byte_length):\r\n    return \"0x{0:0{1}x}\".format(int(integer), 2* byte_length)\r\n```",
              "createdAt": "2020-11-12T02:01:17Z",
              "updatedAt": "2020-11-12T18:27:11Z"
            },
            {
              "originalPosition": 14,
              "body": "```suggestion\r\n        byteLen = group. byte_length()\r\n```",
              "createdAt": "2020-11-12T02:01:25Z",
              "updatedAt": "2020-11-12T18:27:11Z"
            },
            {
              "originalPosition": 23,
              "body": "```suggestion\r\n            vector[\"Blind\"] = int_to_hex(blind, byte_length)\r\n```",
              "createdAt": "2020-11-12T02:01:31Z",
              "updatedAt": "2020-11-12T18:27:11Z"
            },
            {
              "originalPosition": 32,
              "body": "```suggestion\r\n            vector[\"Blind\"] = \",\".join([int_to_hex(blind, byte_length) for blind in blinds])\r\n```",
              "createdAt": "2020-11-12T02:01:38Z",
              "updatedAt": "2020-11-12T18:27:11Z"
            },
            {
              "originalPosition": 42,
              "body": "```suggestion\r\n                    \"c\": int_to_hex(proof[0], byte_length),\r\n                    \"s\": int_to_hex(proof[1], byte_length),\r\n```",
              "createdAt": "2020-11-12T02:01:48Z",
              "updatedAt": "2020-11-12T18:27:11Z"
            },
            {
              "originalPosition": 56,
              "body": "```suggestion\r\n        vecSuite[\"skSm\"] = int_to_hex(server.skS, byte_length)\r\n```",
              "createdAt": "2020-11-12T02:02:19Z",
              "updatedAt": "2020-11-12T18:27:11Z"
            },
            {
              "originalPosition": 35,
              "body": "```suggestion\r\n        return I2OSP(scalar % self.order(), int(ceil(len(self.p.bits()) / 8)))\r\n```",
              "createdAt": "2020-11-12T18:15:15Z",
              "updatedAt": "2020-11-12T18:27:11Z"
            },
            {
              "originalPosition": 55,
              "body": "```suggestion\r\n        return I2OSP(scalar % self.order(), 32)[::-1]\r\n```",
              "createdAt": "2020-11-12T18:15:23Z",
              "updatedAt": "2020-11-12T18:27:11Z"
            },
            {
              "originalPosition": 75,
              "body": "```suggestion\r\n        return I2OSP(scalar % self.order(), 56)[::-1]\r\n```",
              "createdAt": "2020-11-12T18:15:32Z",
              "updatedAt": "2020-11-12T18:27:11Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5MzY2MDM3",
          "commit": {
            "abbreviatedOid": "2cfa882"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-11-12T18:20:27Z",
          "updatedAt": "2020-11-12T18:20:27Z",
          "comments": []
        }
      ]
    },
    {
      "number": 212,
      "id": "MDExOlB1bGxSZXF1ZXN0NTIwMTA3NDg4",
      "title": "Specifies N parameters in test vectors.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/212",
      "state": "MERGED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "armfazh"
      ],
      "labels": [],
      "body": "Note that `Ne` is implementation-dependant as points could be compressed or not.\r\n\r\nCloses #208 ",
      "createdAt": "2020-11-12T19:26:24Z",
      "updatedAt": "2020-11-13T23:05:21Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "85265e709bbc07e93181f5251b7948bcf67709fe",
      "headRepository": "armfazh/draft-irtf-cfrg-voprf",
      "headRefName": "Nparams",
      "headRefOid": "5e2436bef0dd857fbdb490aa38f33ab4605d5594",
      "closedAt": "2020-11-13T23:05:21Z",
      "mergedAt": "2020-11-13T23:05:21Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "67c65e9b4919f56f8a25982a46c82434d45bfe46"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5NTg4MzY5",
          "commit": {
            "abbreviatedOid": "c5c4d52"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "I think these should go in the ciphersuite definition, under the group. (It's currently a lot of redundant text in the draft otherwise.)",
          "createdAt": "2020-11-12T23:34:56Z",
          "updatedAt": "2020-11-12T23:35:30Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "Can we list these in the ciphersuite section, rather than the test vectors? (Also, since this text is generated automatically by Sage, we'd have to augment that code to spit them out.)",
              "createdAt": "2020-11-12T23:34:57Z",
              "updatedAt": "2020-11-13T22:36:47Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5NjUyNDM5",
          "commit": {
            "abbreviatedOid": "c5c4d52"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-13T02:07:39Z",
          "updatedAt": "2020-11-13T02:07:39Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "That's why I did, I modified the sage script.\r\nChanges comming soon.",
              "createdAt": "2020-11-13T02:07:39Z",
              "updatedAt": "2020-11-13T22:36:47Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwNDU0MDg2",
          "commit": {
            "abbreviatedOid": "5b4985b"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "I don't like that we now make point compression optional. Let's pick one and stick with it, please. (Also, note the formatting suggestion to include spaces around ` = ` for clarity.)",
          "createdAt": "2020-11-13T22:20:15Z",
          "updatedAt": "2020-11-13T22:24:29Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "```suggestion\r\n  - Serialization: Both group elements and scalars are encoded in Ne = Ns = 32\r\n```",
              "createdAt": "2020-11-13T22:20:15Z",
              "updatedAt": "2020-11-13T22:36:47Z"
            },
            {
              "originalPosition": 24,
              "body": "```suggestion\r\n  - Serialization: Both group elements and scalars are encoded in Ne = Ns = 56\r\n```",
              "createdAt": "2020-11-13T22:20:26Z",
              "updatedAt": "2020-11-13T22:36:47Z"
            },
            {
              "originalPosition": 39,
              "body": "Please revert this. We should be either point compression or not, otherwise implementers may be left confused about what to use for Ne and Ns. Suggestion:\r\n\r\n~~~\r\nElements are serialized as Ne = 33 byte strings using compressed point encoding for the curve {{SEC1}}.\r\nScalars are serialized as Ns = 32 byte strings by fully reducing the value modulo p and in big-endian order.\r\n~~~\r\n\r\n",
              "createdAt": "2020-11-13T22:22:34Z",
              "updatedAt": "2020-11-13T22:36:47Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwNDcwODY1",
          "commit": {
            "abbreviatedOid": "5e2436b"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM -- thanks!",
          "createdAt": "2020-11-13T23:05:13Z",
          "updatedAt": "2020-11-13T23:05:13Z",
          "comments": []
        }
      ]
    },
    {
      "number": 213,
      "id": "MDExOlB1bGxSZXF1ZXN0NTIwMjM5OTYz",
      "title": "Suggested corrections of some typos.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/213",
      "state": "MERGED",
      "author": "bytemare",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-11-13T00:25:36Z",
      "updatedAt": "2020-11-13T01:42:41Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "2f9cfd7908374ed459612238d033ee63e2920f05",
      "headRepository": "bytemare/draft-irtf-cfrg-voprf",
      "headRefName": "patch-1",
      "headRefOid": "5b90e863f046905b639132a7294b6309df86a1dc",
      "closedAt": "2020-11-13T01:42:41Z",
      "mergedAt": "2020-11-13T01:42:41Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "85265e709bbc07e93181f5251b7948bcf67709fe"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5NjQxNjI1",
          "commit": {
            "abbreviatedOid": "9069be6"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-13T01:41:15Z",
          "updatedAt": "2020-11-13T01:41:16Z",
          "comments": [
            {
              "originalPosition": 68,
              "body": "```suggestion\r\n\"Blind\", \"BlindedElement\", \"EvaluationElement\", \"UnblindedElement\",\r\n```",
              "createdAt": "2020-11-13T01:41:16Z",
              "updatedAt": "2020-11-13T01:42:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5NjQyMDY4",
          "commit": {
            "abbreviatedOid": "5b90e86"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thanks! I made one nit, otherwise it looks good.",
          "createdAt": "2020-11-13T01:42:35Z",
          "updatedAt": "2020-11-13T01:42:35Z",
          "comments": []
        }
      ]
    },
    {
      "number": 214,
      "id": "MDExOlB1bGxSZXF1ZXN0NTIyODQ1MjY1",
      "title": "Use SHA-512 for ristretto255's hash-to-group implementation.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/214",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "cc @bytemare ",
      "createdAt": "2020-11-18T02:07:39Z",
      "updatedAt": "2022-01-22T15:16:53Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "67c65e9b4919f56f8a25982a46c82434d45bfe46",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/ristretto255",
      "headRefOid": "c8ae091165a1c12b525cdd77d1e2778fcfd59e40",
      "closedAt": "2020-11-18T02:13:21Z",
      "mergedAt": "2020-11-18T02:13:21Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "fb3964f4dec4e2a5c59a1885f71b0e54ca343303"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyOTkxMzQ4",
          "commit": {
            "abbreviatedOid": "c8ae091"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-11-18T02:08:56Z",
          "updatedAt": "2020-11-18T02:08:56Z",
          "comments": []
        }
      ]
    },
    {
      "number": 216,
      "id": "MDExOlB1bGxSZXF1ZXN0NTI1MTY2NTM3",
      "title": "Fix Finalize info value in test vectors. Remove unnecessary notation.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/216",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #211.",
      "createdAt": "2020-11-21T18:15:31Z",
      "updatedAt": "2022-01-22T15:16:53Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "fd17c63dd3fc3ec91d320b89f781f583d9be09eb",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/fix-info-string",
      "headRefOid": "812065797212d994b10a10dd4d6435d13bc880e1",
      "closedAt": "2020-11-24T01:50:18Z",
      "mergedAt": "2020-11-24T01:50:18Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "415a43ed345b451b9060062aae162eaa1bbbaa1f"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3MDE1NTU3",
          "commit": {
            "abbreviatedOid": "8120657"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-11-24T01:49:40Z",
          "updatedAt": "2020-11-24T01:49:40Z",
          "comments": []
        }
      ]
    },
    {
      "number": 217,
      "id": "MDExOlB1bGxSZXF1ZXN0NTI2MDQ3MzU4",
      "title": "Add clarifications about batching.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/217",
      "state": "MERGED",
      "author": "bytemare",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #201.",
      "createdAt": "2020-11-23T22:59:39Z",
      "updatedAt": "2020-11-25T17:01:03Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "fd17c63dd3fc3ec91d320b89f781f583d9be09eb",
      "headRepository": "bytemare/draft-irtf-cfrg-voprf",
      "headRefName": "add-batching-draft",
      "headRefOid": "0908b5d63b128a92e32ac73416b2866d26793f16",
      "closedAt": "2020-11-25T14:55:03Z",
      "mergedAt": "2020-11-25T14:55:02Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "64abec107ea45697950144c940c1355d946cc224"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3MDAwMDQx",
          "commit": {
            "abbreviatedOid": "e4a98bd"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Thanks for the text! I think this can be simplified somewhat and merged with already existing text. Please let me know what you think of the suggestion.",
          "createdAt": "2020-11-24T01:38:29Z",
          "updatedAt": "2020-11-24T01:38:56Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "This text is somewhat redundant with what's in the \"Batching inputs\" section. Would it be possible to add this paragraph to the end of that section? \r\n\r\n```\r\nIn particular, servers can produce a single, constant-sized proof for N \r\nclient inputs, rather than one proof per client input. This optimization \r\nbenefits clients and servers since it amortizes the cost of proof generation \r\nand bandwidth across multiple requests.\r\n```",
              "createdAt": "2020-11-24T01:38:29Z",
              "updatedAt": "2020-11-24T16:03:06Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3MDE4NjIz",
          "commit": {
            "abbreviatedOid": "e4a98bd"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Some comments",
          "createdAt": "2020-11-24T01:58:00Z",
          "updatedAt": "2020-11-24T02:06:03Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "```suggestion\r\nand the server responds with the set of evaluatedElements and a single proof object\r\n```",
              "createdAt": "2020-11-24T01:58:00Z",
              "updatedAt": "2020-11-24T16:03:06Z"
            },
            {
              "originalPosition": 17,
              "body": "Feel free to edit as needed.\r\n\r\n```suggestion\r\nbenefits both the server and the client. Hence, for N blinded inputs from the\r\nclient, instead of having N roundtrips for fetching N evaluations and N proofs,\r\nwe would bring that down to a single roudtrip carrying N evaluations and \r\none proof.\r\n```",
              "createdAt": "2020-11-24T02:02:39Z",
              "updatedAt": "2020-11-24T16:03:06Z"
            },
            {
              "originalPosition": 4,
              "body": "Does batching deserves its own section to highlight its relevance?\r\n\r\n```suggestion\r\n## Batching\r\n```",
              "createdAt": "2020-11-24T02:05:51Z",
              "updatedAt": "2020-11-24T16:03:06Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3NDI3MzUz",
          "commit": {
            "abbreviatedOid": "826192d"
          },
          "author": "bytemare",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-24T12:07:45Z",
          "updatedAt": "2020-11-24T12:07:45Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Do you mean dropping this (@armfazh suggestions have been included)\r\n\r\n> ## Batching\r\n> \r\n> Clients that need multiple verifiable evaluations would make as many requests\r\n> to the server. Batching the inputs enables the server to evaluate them all\r\n> individually and to compute a single NIZK proof for the whole set at once.\r\n> \r\n> With this technique, the client sends a set of blindedElements to the server,\r\n> and the server responds with the set of evaluatedElements and a single proof object\r\n> (proofC and proofS).\r\n> \r\n> The optimization takes place in the ComputeComposites function, and therefore\r\n> benefits both the server and the client. Hence, for N blinded inputs from the\r\n> client, instead of having N roundtrips for fetching N evaluations and N proofs,\r\n> we would bring that down to a single roundtrip carrying N evaluations and \r\n> one proof.\r\n\r\nand adding your paragraph to `##### Batching inputs` instead? Or merging the suggestions and adding them to `##### Batching inputs`?",
              "createdAt": "2020-11-24T12:07:45Z",
              "updatedAt": "2020-11-24T16:03:06Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3NTIxMTEw",
          "commit": {
            "abbreviatedOid": "826192d"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-24T14:03:33Z",
          "updatedAt": "2020-11-24T14:03:33Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "I suggest the former! I think the proposed text (with @armfazh's suggestions) have more words than are needed.",
              "createdAt": "2020-11-24T14:03:33Z",
              "updatedAt": "2020-11-24T16:03:06Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3NTg1ODI0",
          "commit": {
            "abbreviatedOid": "826192d"
          },
          "author": "bytemare",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-24T15:07:14Z",
          "updatedAt": "2020-11-24T15:07:14Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Indeed, it's much more concise. May I suggest adding the notion of the client sending the batch in a single request, though? So it's undoubtedly clear to the reader it's not about sparse elements the client sends over time.\r\n\r\nHow about this:\r\n> In particular, servers can produce a single, constant-sized proof for N \r\n> client inputs sent in a single request, rather than one proof per client\r\n> input. This optimization benefits clients and servers since it amortizes\r\n> the cost of proof generation and bandwidth across multiple requests.",
              "createdAt": "2020-11-24T15:07:14Z",
              "updatedAt": "2020-11-24T16:03:06Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3NjMwNTYy",
          "commit": {
            "abbreviatedOid": "826192d"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-24T15:30:01Z",
          "updatedAt": "2020-11-24T15:30:01Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Looks good!",
              "createdAt": "2020-11-24T15:30:01Z",
              "updatedAt": "2020-11-24T16:03:06Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3ODExOTQ4",
          "commit": {
            "abbreviatedOid": "0908b5d"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-11-24T18:52:15Z",
          "updatedAt": "2020-11-24T18:52:15Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4NTgwNDM3",
          "commit": {
            "abbreviatedOid": "0908b5d"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-11-25T14:54:55Z",
          "updatedAt": "2020-11-25T14:54:55Z",
          "comments": []
        }
      ]
    },
    {
      "number": 218,
      "id": "MDExOlB1bGxSZXF1ZXN0NTI2NTE0MzEy",
      "title": "Add DST to JSON test vectors.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/218",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #215.\r\n\r\ncc @bytemare ",
      "createdAt": "2020-11-24T14:23:15Z",
      "updatedAt": "2022-01-22T15:16:54Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "415a43ed345b451b9060062aae162eaa1bbbaa1f",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/add-dst-to-vectors",
      "headRefOid": "c859f354eaf0403060b89b603d62be4df5fdb71e",
      "closedAt": "2020-11-25T14:53:10Z",
      "mergedAt": "2020-11-25T14:53:10Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "c01bdaa8a35bd384b7aab7dfed7042a73b204758"
      },
      "comments": [
        {
          "author": "bytemare",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Oh my, I was just doing it this very moment! Thanks :) ",
          "createdAt": "2020-11-24T14:41:39Z",
          "updatedAt": "2020-11-24T14:41:39Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3Nzc4NjQz",
          "commit": {
            "abbreviatedOid": "c859f35"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-11-24T18:07:32Z",
          "updatedAt": "2020-11-24T18:08:10Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "test is not called",
              "createdAt": "2020-11-24T18:07:33Z",
              "updatedAt": "2020-11-24T18:08:10Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4NTc5NzY3",
          "commit": {
            "abbreviatedOid": "c859f35"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-25T14:54:14Z",
          "updatedAt": "2020-11-25T14:54:15Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "Yeah, it was noisy output. We should fix how we run all the tests here, include those for dependencies (like h2c).",
              "createdAt": "2020-11-25T14:54:14Z",
              "updatedAt": "2020-11-25T14:54:15Z"
            }
          ]
        }
      ]
    },
    {
      "number": 220,
      "id": "MDExOlB1bGxSZXF1ZXN0NTMyNzk5NjQ4",
      "title": "Adding opaque-ke implementation as an integration to README",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/220",
      "state": "MERGED",
      "author": "kevinlewi",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "After discussion with @chris-wood :\r\n\r\nAdding [opaque-ke](https://github.com/novifinancial/opaque-ke) as a Rust implementation of OPAQUE, which relies on VOPRF draft-06.\r\n\r\nThe VOPRF test vectors were copied [here](https://github.com/novifinancial/opaque-ke/blob/master/src/tests/voprf_test_vectors.rs) and checked for Ristretto255-SHA512, with support for more ciphersuite options coming in the future.\r\n\r\nNote: I created a separate table for \"integrations\" because `opaque-ke` does not expose VOPRF in its high-level API -- it only uses VOPRF to perform OPAQUE operations, and hence other implementations cannot currently use `opaque-ke`'s VOPRF implementation. ",
      "createdAt": "2020-12-04T21:29:40Z",
      "updatedAt": "2020-12-04T21:33:15Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "a037abc5e3d7486a2f925c5b73a9a2dc42b67b18",
      "headRepository": null,
      "headRefName": "add_opaque_ke",
      "headRefOid": "9796a567716fb979597f1421b865a9c5f11d5f26",
      "closedAt": "2020-12-04T21:33:15Z",
      "mergedAt": "2020-12-04T21:33:15Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "ea4cb3969ed1d66239f89b45eb91cd7335831646"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1MzEwNDY5",
          "commit": {
            "abbreviatedOid": "9796a56"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-12-04T21:33:10Z",
          "updatedAt": "2020-12-04T21:33:10Z",
          "comments": []
        }
      ]
    },
    {
      "number": 221,
      "id": "MDExOlB1bGxSZXF1ZXN0NTM3MjQ4NzY1",
      "title": "Update version of voprf implementation",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/221",
      "state": "MERGED",
      "author": "bytemare",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "cc @chris-wood ",
      "createdAt": "2020-12-11T18:29:39Z",
      "updatedAt": "2021-01-05T14:02:56Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "ea4cb3969ed1d66239f89b45eb91cd7335831646",
      "headRepository": "bytemare/draft-irtf-cfrg-voprf",
      "headRefName": "patch-2",
      "headRefOid": "0f8b43d85ee8389ef68a7d92761d54e90474d9b3",
      "closedAt": "2021-01-05T14:02:55Z",
      "mergedAt": "2021-01-05T14:02:55Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "611621d78489a8c78fa178d754678294b59c2a51"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxODExMDYz",
          "commit": {
            "abbreviatedOid": "0f8b43d"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-01-05T14:02:51Z",
          "updatedAt": "2021-01-05T14:02:51Z",
          "comments": []
        }
      ]
    },
    {
      "number": 223,
      "id": "MDExOlB1bGxSZXF1ZXN0NTQ5MTA4NDk2",
      "title": "Include the per-proof random scalar in test vectors.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/223",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #222.\r\n\r\ncc @bytemare ",
      "createdAt": "2021-01-05T14:32:10Z",
      "updatedAt": "2022-01-22T15:16:55Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "611621d78489a8c78fa178d754678294b59c2a51",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/proof-randomness",
      "headRefOid": "bbf217b99be7545b18ea0cea5d8da53d3497bea5",
      "closedAt": "2021-01-06T03:40:56Z",
      "mergedAt": "2021-01-06T03:40:56Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "b3e949d7bc8d5af2e32269bf783e361534b72879"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYyMDc0MjQ2",
          "commit": {
            "abbreviatedOid": "bbf217b"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-01-05T19:35:08Z",
          "updatedAt": "2021-01-05T19:35:08Z",
          "comments": []
        }
      ]
    },
    {
      "number": 227,
      "id": "MDExOlB1bGxSZXF1ZXN0NTc1Nzk0NzQ1",
      "title": "Remove `info` parameter from Finalize, and hide Unblind as a top-level API",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/227",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "As proposed in #226. \r\n\r\nCloses #226.\r\n\r\ncc @claucece, @jedisct1 ",
      "createdAt": "2021-02-18T15:59:33Z",
      "updatedAt": "2022-01-22T15:16:57Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "8c50003171c1fe2131ab6b549343087bb8f40faa",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/remove-info-param",
      "headRefOid": "b416660af1e905cd7856da8362b0708d05a52493",
      "closedAt": "2021-02-18T18:52:16Z",
      "mergedAt": "2021-02-18T18:52:16Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "8cc8edc3cb426f002c5778c54be8bca33102fb69"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkzMzc3MDI2",
          "commit": {
            "abbreviatedOid": "b416660"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-02-18T16:01:26Z",
          "updatedAt": "2021-02-18T16:01:26Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkzNDg1MTY4",
          "commit": {
            "abbreviatedOid": "b416660"
          },
          "author": "jedisct1",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-02-18T17:43:43Z",
          "updatedAt": "2021-02-18T17:43:43Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkzNTE4MDYz",
          "commit": {
            "abbreviatedOid": "b416660"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-02-18T18:21:04Z",
          "updatedAt": "2021-02-18T18:21:04Z",
          "comments": []
        }
      ]
    },
    {
      "number": 229,
      "id": "MDExOlB1bGxSZXF1ZXN0NTc2ODQwMDc0",
      "title": "Drop UnblindedElement output from test vectors.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/229",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I missed this in #227. Thanks, @bytemare!",
      "createdAt": "2021-02-20T02:03:09Z",
      "updatedAt": "2022-01-22T15:16:58Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "8cc8edc3cb426f002c5778c54be8bca33102fb69",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/unify-finalize",
      "headRefOid": "772a18402e56b508868adbdb45a66cc0724e5937",
      "closedAt": "2021-02-20T14:27:45Z",
      "mergedAt": "2021-02-20T14:27:45Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "437df1e8a980dcaf236c8a2ef19e97818a57a94e"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@alxdavids can you please review and merge if this work?",
          "createdAt": "2021-02-20T02:07:57Z",
          "updatedAt": "2021-02-20T02:07:57Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I [made these changes in CIRCL](https://github.com/cloudflare/circl/pull/217) and they seem to pass. So I'm merging this as-is.",
          "createdAt": "2021-02-20T14:27:40Z",
          "updatedAt": "2021-02-20T14:27:40Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk0NzUxMzky",
          "commit": {
            "abbreviatedOid": "772a184"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-02-20T13:15:28Z",
          "updatedAt": "2021-02-20T13:15:29Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "Nit: should we use a different DST when batching?",
              "createdAt": "2021-02-20T13:15:28Z",
              "updatedAt": "2021-02-20T13:15:29Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk0NzUxNDQ4",
          "commit": {
            "abbreviatedOid": "772a184"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM, one nit around batching, but I don't have a strong opinion either way.",
          "createdAt": "2021-02-20T13:16:13Z",
          "updatedAt": "2021-02-20T13:16:13Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk0NzU2MzM4",
          "commit": {
            "abbreviatedOid": "772a184"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-02-20T14:21:48Z",
          "updatedAt": "2021-02-20T14:21:48Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "Since this is just an optimization, I think the output should be the same. ",
              "createdAt": "2021-02-20T14:21:48Z",
              "updatedAt": "2021-02-20T14:21:48Z"
            }
          ]
        }
      ]
    },
    {
      "number": 230,
      "id": "MDExOlB1bGxSZXF1ZXN0NTc2OTU3MzMy",
      "title": "Specify Generate/DeriveKeyPair.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/230",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #228. \r\n",
      "createdAt": "2021-02-20T15:12:37Z",
      "updatedAt": "2022-01-22T15:16:59Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "0a73775d21e88151e1289e5116c0e5a3b4029aec",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/dkp",
      "headRefOid": "ed4c54f7e2ca5015fae1e853a2bdc3ed1d62a4f2",
      "closedAt": "2021-02-21T01:46:35Z",
      "mergedAt": "2021-02-21T01:46:35Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "be33d1606d1774bef14e31a04ad131f4b9ac23b1"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@armfazh do we need to expose Generator() on the API if we have ScalarBaseMult?",
          "createdAt": "2021-02-21T00:24:33Z",
          "updatedAt": "2021-02-21T00:24:33Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "> @armfazh do we need to expose Generator() on the API if we have ScalarBaseMult?\r\n\r\nThat's correct, I haven't seen where ScalarBaseMult was defined. Now, in its definition loosely specifies what the base point is.\r\n\r\n\r\n ",
          "createdAt": "2021-02-21T00:34:08Z",
          "updatedAt": "2021-02-21T00:34:08Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk0Nzk0ODA1",
          "commit": {
            "abbreviatedOid": "f5c818a"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I made a couple of suggestions. Maybe need to emphasize the MUST somewhere.",
          "createdAt": "2021-02-21T00:02:44Z",
          "updatedAt": "2021-02-21T00:22:47Z",
          "comments": [
            {
              "originalPosition": 69,
              "body": "```suggestion\r\n- Identity(): Outputs the identity element of the group (i.e. `I`).\r\n- Generator(): Outputs the chosen element of order `p` that \r\n  generates `GG`.\r\n```",
              "createdAt": "2021-02-21T00:02:44Z",
              "updatedAt": "2021-02-21T01:45:30Z"
            },
            {
              "originalPosition": 106,
              "body": "```suggestion\r\nUsing the API of a prime-order group, we assume the existence\r\nof two functions for generating a private key `skS ` and its\r\nassociated public key `pkS`. The function GenerateKeyPair() is \r\na randomized algorithm, and `DeriveKeyPair(seed)` uses a seed\r\nof at least `Ns` bytes to deterministically generate a key pair.\r\nOne recommended implementation of these functions is given.\r\n\r\ndef GenerateKeyPair():\r\n  skS = RandomScalar()\r\n  pkS = skS*Generator()\r\n  return skS, pkS\r\n\r\ndef DeriveKeyPair(seed):\r\n  skS = HashToScalar(seed)\r\n  pkS = skS*Generator()\r\n  return skS, pkS\r\n```",
              "createdAt": "2021-02-21T00:19:28Z",
              "updatedAt": "2021-02-21T01:45:30Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk0Nzk1ODYx",
          "commit": {
            "abbreviatedOid": "f5c818a"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-02-21T00:26:21Z",
          "updatedAt": "2021-02-21T00:26:22Z",
          "comments": [
            {
              "originalPosition": 106,
              "body": "DeriveKeyPair can\u2019t be just a recommendation, it needs to be a concrete specification, in order to be useful. Two different implementations of this functions must produce the same output. (If they didn\u2019t, then we might as well remove the function entirely, since it adds no value, right?)",
              "createdAt": "2021-02-21T00:26:22Z",
              "updatedAt": "2021-02-21T01:45:30Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk0Nzk2MDc2",
          "commit": {
            "abbreviatedOid": "f5c818a"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-02-21T00:31:16Z",
          "updatedAt": "2021-02-21T00:31:16Z",
          "comments": [
            {
              "originalPosition": 106,
              "body": "Yes, please edit accordingly.",
              "createdAt": "2021-02-21T00:31:16Z",
              "updatedAt": "2021-02-21T01:45:30Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk0Nzk2MTIy",
          "commit": {
            "abbreviatedOid": "f5c818a"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-02-21T00:32:21Z",
          "updatedAt": "2021-02-21T00:32:22Z",
          "comments": [
            {
              "originalPosition": 106,
              "body": "I think the current text is sufficient. It spells out concretely how DeriveKeyPair is implemented. Is there a reason why it doesn\u2019t work?",
              "createdAt": "2021-02-21T00:32:22Z",
              "updatedAt": "2021-02-21T01:45:30Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk0Nzk2MzQz",
          "commit": {
            "abbreviatedOid": "f5c818a"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-02-21T00:38:01Z",
          "updatedAt": "2021-02-21T00:38:02Z",
          "comments": [
            {
              "originalPosition": 106,
              "body": " I am not saying yours is incorrect. My intention is to improve visual readability.  ",
              "createdAt": "2021-02-21T00:38:02Z",
              "updatedAt": "2021-02-21T01:45:30Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk0Nzk4OTk2",
          "commit": {
            "abbreviatedOid": "f5c818a"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-02-21T01:42:39Z",
          "updatedAt": "2021-02-21T01:42:39Z",
          "comments": [
            {
              "originalPosition": 106,
              "body": "Let's keep it as-is for now. The current version seems to communicate the same thing, but with less words. If we decide later it can be improved, let's fix in a future PR. ",
              "createdAt": "2021-02-21T01:42:39Z",
              "updatedAt": "2021-02-21T01:45:30Z"
            }
          ]
        }
      ]
    },
    {
      "number": 233,
      "id": "MDExOlB1bGxSZXF1ZXN0NTc2OTgxODE2",
      "title": "Fix ristretto255/decaf448 hash-to-scalar.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/233",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #232.\r\n\r\ncc @gtank, @FiloSottile, @bytemare ",
      "createdAt": "2021-02-20T17:53:36Z",
      "updatedAt": "2022-01-22T15:16:58Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "437df1e8a980dcaf236c8a2ef19e97818a57a94e",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/unify-h2s",
      "headRefOid": "a00c26bd5f5c2a920f1dd3c49b5f814361377515",
      "closedAt": "2021-02-21T01:41:42Z",
      "mergedAt": "2021-02-21T01:41:41Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "0a73775d21e88151e1289e5116c0e5a3b4029aec"
      },
      "comments": [
        {
          "author": "bytemare",
          "authorAssociation": "CONTRIBUTOR",
          "body": "All vectors match \ud83d\udc4d  (except Decaf448, which I don't test, yet)",
          "createdAt": "2021-02-20T22:02:46Z",
          "updatedAt": "2021-02-20T22:02:46Z"
        },
        {
          "author": "FiloSottile",
          "authorAssociation": "NONE",
          "body": "Not familiar with all the VOPRF draft language, but the interaction with the groups LGTM.",
          "createdAt": "2021-02-21T01:26:32Z",
          "updatedAt": "2021-02-21T01:26:32Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk0NzkwMjg4",
          "commit": {
            "abbreviatedOid": "a00c26b"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "All looks fine to me \ud83d\udc4d ",
          "createdAt": "2021-02-20T22:26:47Z",
          "updatedAt": "2021-02-20T22:26:47Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk0Nzk2Njk4",
          "commit": {
            "abbreviatedOid": "a00c26b"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "lgtm",
          "createdAt": "2021-02-21T00:46:33Z",
          "updatedAt": "2021-02-21T00:46:33Z",
          "comments": []
        }
      ]
    },
    {
      "number": 235,
      "id": "MDExOlB1bGxSZXF1ZXN0NTc3MDM2NTk0",
      "title": "Changelog for v06",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/235",
      "state": "MERGED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Changelog for v06\r\nCloses #231 ",
      "createdAt": "2021-02-21T02:01:10Z",
      "updatedAt": "2021-10-15T19:03:54Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "be33d1606d1774bef14e31a04ad131f4b9ac23b1",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "armfazh/chengelog-v06",
      "headRefOid": "95a9b0256c169e7e83ad9dabd989cc3b76e2eb14",
      "closedAt": "2021-02-21T15:30:38Z",
      "mergedAt": "2021-02-21T15:30:38Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "866a54cc1021390359e67d8a1b773e2d70f19067"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk0ODUxNzgx",
          "commit": {
            "abbreviatedOid": "62969d8"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-02-21T15:23:05Z",
          "updatedAt": "2021-02-21T15:23:09Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "```suggestion\r\n- Specify of group element and scalar serialization.\r\n- Remove info parameter from the protocol API and update domain separation guidance.\r\n- Fold Unblind function into Finalize.\r\n- Optimize ComputeComposites for servers (using knowledge of the private key).\r\n- Specify deterministic key generation method.\r\n- Update test vectors. \r\n- Apply various editorial changes.\r\n```",
              "createdAt": "2021-02-21T15:23:05Z",
              "updatedAt": "2021-02-21T15:23:15Z"
            }
          ]
        }
      ]
    },
    {
      "number": 237,
      "id": "MDExOlB1bGxSZXF1ZXN0NTc4MjU0OTA0",
      "title": "Setting a fixed seed to generate same test vectors.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/237",
      "state": "MERGED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixing a seed of the PRNG.",
      "createdAt": "2021-02-23T08:23:58Z",
      "updatedAt": "2021-02-23T17:47:08Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "866a54cc1021390359e67d8a1b773e2d70f19067",
      "headRepository": "armfazh/draft-irtf-cfrg-voprf",
      "headRefName": "armfazh/fixedseed",
      "headRefOid": "086942c9a8b5fc18fef624188a1dbb6060800196",
      "closedAt": "2021-02-23T17:47:07Z",
      "mergedAt": "2021-02-23T17:47:07Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "e54d4ab9f139ed12b98ad0a7c798e65cdedb07d2"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk2NTYyMDY5",
          "commit": {
            "abbreviatedOid": "b3e793c"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2021-02-23T16:53:35Z",
          "updatedAt": "2021-02-23T16:53:38Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "Why not just fix the seed here to a string of length `Ns`?",
              "createdAt": "2021-02-23T16:53:35Z",
              "updatedAt": "2021-02-23T17:46:17Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk2NjA2Mzcz",
          "commit": {
            "abbreviatedOid": "b3e793c"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-02-23T17:36:30Z",
          "updatedAt": "2021-02-23T17:36:31Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "good trick, it's refactored now",
              "createdAt": "2021-02-23T17:36:30Z",
              "updatedAt": "2021-02-23T17:46:17Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk2NjE1NDc4",
          "commit": {
            "abbreviatedOid": "e97ab40"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-02-23T17:46:11Z",
          "updatedAt": "2021-02-23T17:46:12Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\n        self.seed = b'\\xA3' * suite.group.scalar_byte_length()\r\n```",
              "createdAt": "2021-02-23T17:46:12Z",
              "updatedAt": "2021-02-23T17:46:17Z"
            }
          ]
        }
      ]
    },
    {
      "number": 238,
      "id": "MDExOlB1bGxSZXF1ZXN0NTc4NzI0NTg0",
      "title": "Change decaf to use shake",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/238",
      "state": "CLOSED",
      "author": "claucece",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-02-23T20:12:27Z",
      "updatedAt": "2021-06-16T13:40:45Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "d88e53c61ce7be263fb5e7f9f6beae6ffaac0e6f",
      "headRepository": "claucece/draft-irtf-cfrg-voprf",
      "headRefName": "master",
      "headRefOid": "6fb690541b3ef06727df3e5e7d193db417941eb1",
      "closedAt": "2021-06-16T13:40:44Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Taking a step back, how about we specify HashToScalar following the advice in hash-to-curve like so:\r\n\r\n*ristretto255:*\r\n```\r\nHashToScalar(): Use hash_to_field from {{!I-D.irtf-cfrg-hash-to-curve}} using l=<order of field> as the prime modulus, L = 48, `expand_message_xmd` with SHA-512, and DST = \"VOPRF06-HashToScalar-\" || contextString.\r\n```\r\n\r\n*decaf448:* \r\n```\r\nHashToScalar(): Use hash_to_field from {{!I-D.irtf-cfrg-hash-to-curve}} using l=<order of field> as the prime modulus, L = 84, `expand_message_xof` with SHAKE-256, and DST = \"VOPRF06-HashToScalar-\" || contextString.\r\n```\r\n\r\nThe values of L were derived from `L = ceil((ceil(log2(p)) + k) / 8)`, where `p = <order of scalar field>` and `k = 128/224` (for a 128-bit and 224-bit security level, respectively). That would make each of these consistent with the other HashToScalar invocations. \r\n\r\n@armfazh, thoughts?",
          "createdAt": "2021-02-25T01:19:59Z",
          "updatedAt": "2021-02-25T23:03:57Z"
        },
        {
          "author": "bytemare",
          "authorAssociation": "CONTRIBUTOR",
          "body": "If SHA-512, it would be `expand_message_xmd` (not xof)",
          "createdAt": "2021-02-25T22:48:24Z",
          "updatedAt": "2021-02-25T22:48:24Z"
        },
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@bytemare yeah, probably @chris-wood meant shake ;)  \r\n\r\nI'm checking this further and respond to this pr ;)",
          "createdAt": "2021-02-25T22:50:25Z",
          "updatedAt": "2021-02-25T22:50:25Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> @bytemare yeah, probably @chris-wood meant shake ;)\r\n\r\nUgh, yes, I did. Typo. Thanks!",
          "createdAt": "2021-02-25T22:53:44Z",
          "updatedAt": "2021-02-25T22:53:44Z"
        },
        {
          "author": "bytemare",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, and I also meant for Ristretto255 ;)",
          "createdAt": "2021-02-25T22:58:12Z",
          "updatedAt": "2021-02-25T22:59:26Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> Yes, and I also meant for Ristretto255 ;)\r\n\r\nWe discussed this in #200. Basically, it makes most sense to use SHA-512 and `_xmd` for r225.",
          "createdAt": "2021-02-25T23:00:26Z",
          "updatedAt": "2021-02-25T23:00:26Z"
        },
        {
          "author": "bytemare",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I know, but you wrote `_xof` on the line for SHA-512/r255 :)",
          "createdAt": "2021-02-25T23:02:38Z",
          "updatedAt": "2021-02-25T23:02:38Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "> Taking a step back, how about we specify HashToScalar following the advice in hash-to-curve like so:\r\n> That would make each of these consistent with the other HashToScalar invocations.\r\n\r\nthis seems reasonable to me, one single hashToField implementation can serve to all the instantiations, if code reuse is a goal.\r\n",
          "createdAt": "2021-02-25T23:22:27Z",
          "updatedAt": "2021-02-25T23:22:27Z"
        },
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@bytemare noted ;) I think we all agree on that. On the pr, it will be expand_xmd with sha512 for r255; and expand_xof with shake256 for d448. ",
          "createdAt": "2021-02-25T23:43:29Z",
          "updatedAt": "2021-02-25T23:43:43Z"
        },
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I like the last proposal @chris-wood . I'll change the need text ;) Thanks!",
          "createdAt": "2021-02-25T23:44:28Z",
          "updatedAt": "2021-02-25T23:44:28Z"
        },
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@chris-wood @armfazh let me know what you think now ;)",
          "createdAt": "2021-02-25T23:53:13Z",
          "updatedAt": "2021-02-25T23:53:13Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "> let me know what you think now ;)\r\n\r\ngood, ",
          "createdAt": "2021-02-26T19:16:44Z",
          "updatedAt": "2021-02-26T19:16:44Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@alxdavids are you OK with this? If so, let's merge it!",
          "createdAt": "2021-03-01T23:09:39Z",
          "updatedAt": "2021-03-01T23:09:39Z"
        },
        {
          "author": "tmthrgd",
          "authorAssociation": "NONE",
          "body": "As someone coming across and implementing this spec, I'm not a fan of this change in general. (I'll try and elaborate elsewhere). But specifically as it stands this change seems really odd to me. It replaces `expand_message_xmd` with SHA-512  with `expand_message_xof` with SHAKE-256, but it doesn't change Hash (required for Finalize, etc.) from SHA-512.\r\n\r\nFar from removing a potential dependency this just adds another. OPRF(decaf448, SHA-512) would require *both* SHA-512 *and* SHAKE-256 to implement. That's the worst of both worlds. If there is a desire to do this, surely Hash should also be swapped out for SHA3/SHAKE?",
          "createdAt": "2021-03-02T01:41:15Z",
          "updatedAt": "2021-03-02T01:41:38Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> Far from removing a potential dependency this just adds another. OPRF(decaf448, SHA-512) would require both SHA-512 and SHAKE-256 to implement. That's the worst of both worlds. If there is a desire to do this, surely Hash should also be swapped out for SHA3/SHAKE?\r\n\r\nHah, good catch :-) I believe the *intent* was to replace all instances of SHA-2 with SHAKE for decaf. I think we all just overlooked the corresponding ciphersuite hash.",
          "createdAt": "2021-03-02T01:45:55Z",
          "updatedAt": "2021-03-02T01:49:30Z"
        },
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@tmthrgd indeed, it will be changed as well. \r\n\r\n> would require both SHA-512 and SHAKE-256 to implement\r\n\r\nGenerally, SHA-512 is widely implemented and in most languages that have the SHA-3 family, SHA-2 is also available. \r\n\r\nIs there a language that has SHA-3 family but not SHA-2?\r\n\r\nI'll change the pr to have SHAKE eveywhere.\r\n\r\n\r\n\r\n",
          "createdAt": "2021-03-04T20:01:46Z",
          "updatedAt": "2021-03-04T20:01:46Z"
        },
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@tmthrgd should be changed now ;)",
          "createdAt": "2021-03-05T21:49:11Z",
          "updatedAt": "2021-03-05T21:49:11Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@claucece any updates on this?",
          "createdAt": "2021-04-13T13:26:16Z",
          "updatedAt": "2021-04-13T13:26:16Z"
        },
        {
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@chris-wood email was sent asking for the clarifications that you needed. Last time I checked, this was not a big priority prior to IETF111.. is there a reason to make this a bigger priority now? Thanks!",
          "createdAt": "2021-04-13T13:39:24Z",
          "updatedAt": "2021-04-13T13:39:24Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> is there a reason to make this a bigger priority now? Thanks!\r\n\r\nNope! I'm just curious to know what the status is for this change.",
          "createdAt": "2021-04-13T13:41:42Z",
          "updatedAt": "2021-04-13T13:41:42Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing in favor of #249.",
          "createdAt": "2021-06-16T13:40:44Z",
          "updatedAt": "2021-06-16T13:40:44Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk2ODI4NDgx",
          "commit": {
            "abbreviatedOid": "a55df08"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-02-23T21:50:05Z",
          "updatedAt": "2021-02-23T21:53:56Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "```suggestion\r\n    `uniform_bytes` as a 896-bit integer in little-endian order, and reduce the integer\r\n```",
              "createdAt": "2021-02-23T21:50:05Z",
              "updatedAt": "2021-03-05T21:56:25Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk2ODk0MzI1",
          "commit": {
            "abbreviatedOid": "a55df08"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-02-23T23:26:25Z",
          "updatedAt": "2021-02-23T23:26:25Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "ah yes! I was going to check that! Thank you for this! ;)",
              "createdAt": "2021-02-23T23:26:25Z",
              "updatedAt": "2021-03-05T21:56:25Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk4MDA1NzE3",
          "commit": {
            "abbreviatedOid": "22ba5a1"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2021-02-24T22:47:47Z",
          "updatedAt": "2021-02-24T22:52:07Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "Hmm, why do we need longer output here? (The output lengths previously seemed to align with the conventional way of mapping bytes to scalars in d448 draft.)",
              "createdAt": "2021-02-24T22:47:48Z",
              "updatedAt": "2021-03-05T21:56:25Z"
            },
            {
              "originalPosition": 23,
              "body": "This doesn't seem right. Shouldn't it be something like this?\r\n\r\n```\r\nuniform_bytes = expand_message_xof(msg, dst, 64, hashlib.shake_256, _)\r\nreturn OS2IP_le(uniform_bytes) % self.order\r\n```",
              "createdAt": "2021-02-24T22:51:46Z",
              "updatedAt": "2021-03-05T21:56:25Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk4MDU0NTA5",
          "commit": {
            "abbreviatedOid": "22ba5a1"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-02-25T00:25:22Z",
          "updatedAt": "2021-02-25T00:25:22Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "Sure. I can change it back to 64.",
              "createdAt": "2021-02-25T00:25:22Z",
              "updatedAt": "2021-03-05T21:56:25Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk4MDU1ODUx",
          "commit": {
            "abbreviatedOid": "22ba5a1"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-02-25T00:28:20Z",
          "updatedAt": "2021-02-25T00:28:20Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "Was there a reason you made it 112? (I am genuinely curious!)",
              "createdAt": "2021-02-25T00:28:20Z",
              "updatedAt": "2021-03-05T21:56:25Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk4MDU3MjYw",
          "commit": {
            "abbreviatedOid": "22ba5a1"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-02-25T00:31:33Z",
          "updatedAt": "2021-02-25T00:31:33Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "I don't really understand what you are referring to.\r\n\r\nL here is\r\n\r\n```\r\nL = ceil((ceil(log2(p)) + k) / 8)\r\n```\r\n\r\n```\r\nTo control bias, hash_to_field instead uses random integers whose length is at least ceil(log2(p)) + k bits, where k is the target security level for the suite in bits.\r\n```\r\n\r\nAnd as defined per the draft, the security level of curve448 is 224. As defined per draft, `L: 84`. \r\n\r\nIs that what this is referring to?",
              "createdAt": "2021-02-25T00:31:33Z",
              "updatedAt": "2021-03-05T21:56:25Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk4MDU4NTI4",
          "commit": {
            "abbreviatedOid": "22ba5a1"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-02-25T00:34:38Z",
          "updatedAt": "2021-02-25T00:34:38Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "```\r\ndef hash_to_field(msg, count, dst, modulus, degree, blen, expand_fn, hash_fn, security_param):\r\n    len_in_bytes = count * degree * blen\r\n    uniform_bytes = expand_fn(msg, dst, len_in_bytes, hash_fn, security_param)\r\n    u_vals = [None] * count\r\n    for i in xrange(0, count):\r\n        e_vals = [None] * degree\r\n        for j in xrange(0, degree):\r\n            elm_offset = blen * (j + i * degree)\r\n            tv = uniform_bytes[elm_offset : (elm_offset + blen)]\r\n            e_vals[j] = OS2IP(tv) % modulus\r\n        u_vals[i] = e_vals\r\n    return u_vals\r\n```\r\n\r\nwhich translates to the draft\r\n\r\n```\r\nhash_to_field(msg, count)\r\nParameters:\r\n- DST, a domain separation tag (see discussion above).\r\n- F, a finite field of characteristic p and order q = p^m.\r\n- p, the characteristic of F (see immediately above).\r\n- m, the extension degree of F, m >= 1 (see immediately above).\r\n- L = ceil((ceil(log2(p)) + k) / 8), where k is the security\r\nparameter of the suite (e.g., k = 128).\r\n- expand_message, a function that expands a byte string and\r\ndomain separation tag into a uniformly random byte string\r\n(see discussion above).\r\nInputs:\r\n- msg, a byte string containing the message to hash.\r\n- count, the number of elements of F to output.\r\nOutputs:\r\n- (u_0, ..., u_(count - 1)), a list of field elements.\r\nSteps:\r\n1. len_in_bytes = count * m * L\r\n2. uniform_bytes = expand_message(msg, DST, len_in_bytes)\r\n3. for i in (0, ..., count - 1):\r\n4. for j in (0, ..., m - 1):\r\n5. elm_offset = L * (j + i * m)\r\n6. tv = substr(uniform_bytes, elm_offset, L)\r\n7. e_j = OS2IP(tv) mod p\r\n8. u_i = (e_0, ..., e_(m - 1))\r\n9. return (u_0, ..., u_(count - 1))\r\n```",
              "createdAt": "2021-02-25T00:34:38Z",
              "updatedAt": "2021-03-05T21:56:25Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk4MDU4ODg3",
          "commit": {
            "abbreviatedOid": "22ba5a1"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-02-25T00:35:29Z",
          "updatedAt": "2021-02-25T00:35:29Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "Sorry, sorry, I just used L for a variable name. It's not meant to refer to *that* L.",
              "createdAt": "2021-02-25T00:35:29Z",
              "updatedAt": "2021-03-05T21:56:25Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk4MDU5MjEz",
          "commit": {
            "abbreviatedOid": "22ba5a1"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-02-25T00:36:13Z",
          "updatedAt": "2021-02-25T00:36:14Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "(I updated the suggestion to remove L and avoid confusion)",
              "createdAt": "2021-02-25T00:36:14Z",
              "updatedAt": "2021-03-05T21:56:25Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk5MTk5ODQy",
          "commit": {
            "abbreviatedOid": "e912500"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good!",
          "createdAt": "2021-02-26T02:12:11Z",
          "updatedAt": "2021-02-26T02:12:11Z",
          "comments": []
        }
      ]
    },
    {
      "number": 239,
      "id": "MDExOlB1bGxSZXF1ZXN0NTgyMTQ3Njgw",
      "title": "Generalize GenerateProof/VerifyProof",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/239",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This will let folks re-use these functions more generically if they so choose.\r\n\r\ncc @siyengar, @ananthr",
      "createdAt": "2021-03-01T15:22:06Z",
      "updatedAt": "2022-01-22T15:16:59Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "e54d4ab9f139ed12b98ad0a7c798e65cdedb07d2",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/vary-generator",
      "headRefOid": "faf42aa6684b123ce2d04b8bca7bfc0d5b410c09",
      "closedAt": "2021-03-05T21:21:27Z",
      "mergedAt": "2021-03-05T21:21:27Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "d88e53c61ce7be263fb5e7f9f6beae6ffaac0e6f"
      },
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "It looks like this is re-introducing group elements to the public API, is this a good idea? It doesn't seem to match the rest of the VOPRF API (non-proof-related functions) which operates over bytes.",
          "createdAt": "2021-03-01T15:30:07Z",
          "updatedAt": "2021-03-01T15:30:07Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> It looks like this is re-introducing group elements to the public API, is this a good idea? It doesn't seem to match the rest of the VOPRF API (non-proof-related functions) which operates over bytes.\r\n\r\nHmm, these are all internal functions, right? Since they're internal, making them operate on elements rather than byte strings seems fine. (An implementation ought to know how to represent and these types locally.) \r\n\r\nAs I see it, the public APIs only include Blind, Evaluate, and Finalize, and those all operate on \"public\" types like SerializedElements that may be received over the wire. ",
          "createdAt": "2021-03-01T15:32:49Z",
          "updatedAt": "2021-03-01T15:57:04Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "> > It looks like this is re-introducing group elements to the public API, is this a good idea? It doesn't seem to match the rest of the VOPRF API (non-proof-related functions) which operates over bytes.\r\n> \r\n> Hmm, these are all internal functions, right? Since they're internal, making them operate on elements rather than byte strings seems fine. (An implementation ought to know how to represent and these types locally.)\r\n> \r\n> As I see it, the public APIs only include Blind, Evaluate, and Finalize, and those all operate on \"public\" types like SerializedElements that may be received over the wire.\r\n\r\nOkay, yeah that makes sense, I was confused. In that case, I think the changes are probably fine. Out of interest, what was the main sticking point with the previous version of the API?",
          "createdAt": "2021-03-01T16:26:30Z",
          "updatedAt": "2021-03-01T16:26:30Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> Okay, yeah that makes sense, I was confused. In that case, I think the changes are probably fine. Out of interest, what was the main sticking point with the previous version of the API?\r\n\r\nIt wasn't usable by Subodh's draft, which led them to define (yet another) DLEQ proof generation and verification routine. I threw up a [PR based on the changes here](https://github.com/siyengar/voprf-with-metadata/pull/1) that makes these two work really well together.",
          "createdAt": "2021-03-01T16:43:41Z",
          "updatedAt": "2021-03-01T16:43:41Z"
        },
        {
          "author": "siyengar",
          "authorAssociation": "NONE",
          "body": "This looks great. I think the only difference between this and the DLEQ proofs in the other draft at present is that this one uses subtraction for the proofs and the other one uses addition",
          "createdAt": "2021-03-01T17:33:43Z",
          "updatedAt": "2021-03-01T17:33:43Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> This looks great. I think the only difference between this and the DLEQ proofs in the other draft at present is that this one uses subtraction for the proofs and the other one uses addition\r\n\r\nWould you prefer one versus the other? :-)",
          "createdAt": "2021-03-01T17:35:25Z",
          "updatedAt": "2021-03-01T17:35:25Z"
        },
        {
          "author": "siyengar",
          "authorAssociation": "NONE",
          "body": "> > This looks great. I think the only difference between this and the DLEQ proofs in the other draft at present is that this one uses subtraction for the proofs and the other one uses addition\r\n> \r\n> Would you prefer one versus the other? :-)\r\n\r\nna, don't care",
          "createdAt": "2021-03-01T21:43:38Z",
          "updatedAt": "2021-03-01T21:43:38Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjAwOTIzNDk1",
          "commit": {
            "abbreviatedOid": "faf42aa"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-03-01T16:26:43Z",
          "updatedAt": "2021-03-01T16:26:43Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjAwOTk1NDYy",
          "commit": {
            "abbreviatedOid": "faf42aa"
          },
          "author": "siyengar",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-03-01T17:37:12Z",
          "updatedAt": "2021-03-01T17:37:12Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjAxMjEzMDk4",
          "commit": {
            "abbreviatedOid": "faf42aa"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-03-01T22:10:25Z",
          "updatedAt": "2021-03-01T22:10:25Z",
          "comments": []
        }
      ]
    },
    {
      "number": 240,
      "id": "MDExOlB1bGxSZXF1ZXN0NTgyNjQ0MDI5",
      "title": "Add draft of WeakVerifiable mode.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/240",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "First attempt at #225. Opening as a draft while we work through some key questions:\r\n\r\n1. The protocol sketch in the PMBTokens paper suggests that the server produces a DLEQ proof of its public key, and that the client verifies this before running the protocol. However, it's not clear to me what value this check adds. There seem to be two cases: (a) the key is invalid, in which case the client doesn't use it, or (b) the key is valid, in which case the client uses it (but is possible put into two buckets based on the server response). Is it necessary that the server produce a proof *before* the online protocol is run? @dvorak42, do you know? Could you please check with the authors? :-) \r\n2. Given (1), the proposed change right now re-uses the server's base context in the weak verifiable mode. This is because the server produces no DLEQ proof online, for each evaluation. \r\n\r\ncc @siyengar, @ananthr",
      "createdAt": "2021-03-02T02:45:46Z",
      "updatedAt": "2022-01-22T15:16:40Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "e54d4ab9f139ed12b98ad0a7c798e65cdedb07d2",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/add-weak-verifiable-mode",
      "headRefOid": "c4628e0c079764ccc750d75c81684d22bc91eb09",
      "closedAt": "2021-06-08T19:35:32Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "dvorak42",
          "authorAssociation": "NONE",
          "body": "I'll double-check with the authors tomorrow, but I believe the proof is proving that the server is capable of signing the token correctly. I don't think this is particularly necessary ahead of the protocol for this use case since for a server that can't sign the token correctly, what ends up out of the system is random garbage, similar to the case where the server multiples randomly.",
          "createdAt": "2021-03-02T03:44:54Z",
          "updatedAt": "2021-03-02T03:44:54Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Yeah, that matches my understanding. Thanks @dvorak42 :-)",
          "createdAt": "2021-03-02T03:45:51Z",
          "updatedAt": "2021-03-02T03:45:51Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 243,
      "id": "MDExOlB1bGxSZXF1ZXN0NjA2MjIzMTI0",
      "title": "Refactor domain separation strings to allow for general use.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/243",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The current domain separation strategy prepended a variant and version string to each internal DST. If the proof generation and verification routines were reused elsewhere, e.g., in other standards, that would mean the DST would include \"VOPRF,\" which is not ideal. (Certainly this proof logic is not coupled to the rest of the VOPRF protocol!) This change moves the variant and version string around to the context string, and makes that a parameter for each function. If another standard wants to change the string, they can do so by changing the context string parameter to whatever suits their needs. \r\n\r\ncc @siyengar",
      "createdAt": "2021-03-31T19:29:23Z",
      "updatedAt": "2022-01-22T15:16:39Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "cc422a71b0b530c93bcb8c5019d1664013fda3e4",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/refactor-domain-separation",
      "headRefOid": "e4f0f9bf9cf23b5e0f141d21e3de2ce5a2830e66",
      "closedAt": "2021-04-01T23:06:40Z",
      "mergedAt": "2021-04-01T23:06:40Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "662d4d60fcd8f6624f4a9fd030d9f087c8dad2c3"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjI1NjcyNzI1",
          "commit": {
            "abbreviatedOid": "7bbc1df"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-03-31T20:04:46Z",
          "updatedAt": "2021-03-31T20:04:46Z",
          "comments": [
            {
              "originalPosition": 44,
              "body": "```suggestion\r\n- GG, a prime-order group implementing the API described in {{pog}}.\r\n```",
              "createdAt": "2021-03-31T20:04:46Z",
              "updatedAt": "2021-03-31T20:04:51Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjI2NTUyNjI3",
          "commit": {
            "abbreviatedOid": "e4f0f9b"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-04-01T18:44:23Z",
          "updatedAt": "2021-04-01T18:44:23Z",
          "comments": []
        }
      ]
    },
    {
      "number": 245,
      "id": "MDExOlB1bGxSZXF1ZXN0NjI4MDUxMTA1",
      "title": "Running fix lint tool.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/245",
      "state": "MERGED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-04-30T20:01:58Z",
      "updatedAt": "2021-04-30T20:05:25Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "662d4d60fcd8f6624f4a9fd030d9f087c8dad2c3",
      "headRepository": "armfazh/draft-irtf-cfrg-voprf",
      "headRefName": "fixLint",
      "headRefOid": "d8d5d6cf305ad35df109ea770e31a774f544b0b0",
      "closedAt": "2021-04-30T20:05:24Z",
      "mergedAt": "2021-04-30T20:05:24Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "922a67b9451f248116dfbef436bae6aa7066c597"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQ5NTgxMTk2",
          "commit": {
            "abbreviatedOid": "d8d5d6c"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-04-30T20:05:19Z",
          "updatedAt": "2021-04-30T20:05:19Z",
          "comments": []
        }
      ]
    },
    {
      "number": 246,
      "id": "MDExOlB1bGxSZXF1ZXN0NjI4MDYwMjEz",
      "title": "Highlighting key generation functions.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/246",
      "state": "MERGED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This change unhides the key related operations based on primer order groups.",
      "createdAt": "2021-04-30T20:07:44Z",
      "updatedAt": "2021-05-06T00:58:12Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "922a67b9451f248116dfbef436bae6aa7066c597",
      "headRepository": "armfazh/draft-irtf-cfrg-voprf",
      "headRefName": "cryptoFuncs",
      "headRefOid": "8ff94a90b9724dc40e9a4543250ace9672c2595f",
      "closedAt": "2021-05-06T00:58:12Z",
      "mergedAt": "2021-05-06T00:58:11Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "098e1cbd21714805c724d9cfbd816d3a8a5cd1f4"
      },
      "comments": [
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "ok, I'm going to refactor based on these comments.",
          "createdAt": "2021-04-30T23:50:59Z",
          "updatedAt": "2021-04-30T23:50:59Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "I've updated the PR according to the review.",
          "createdAt": "2021-05-04T18:43:14Z",
          "updatedAt": "2021-05-04T18:43:14Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQ5NjY0MzE3",
          "commit": {
            "abbreviatedOid": "6a4f858"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-04-30T23:00:18Z",
          "updatedAt": "2021-04-30T23:02:37Z",
          "comments": [
            {
              "originalPosition": 59,
              "body": "Why not make this the required implementation? (OPAQUE, for example, depends on the function being implemented this way.)",
              "createdAt": "2021-04-30T23:00:19Z",
              "updatedAt": "2021-05-05T18:17:39Z"
            },
            {
              "originalPosition": 4,
              "body": "```suggestion\r\n```",
              "createdAt": "2021-04-30T23:00:29Z",
              "updatedAt": "2021-05-05T18:17:39Z"
            },
            {
              "originalPosition": 36,
              "body": "```suggestion\r\n```",
              "createdAt": "2021-04-30T23:00:34Z",
              "updatedAt": "2021-05-05T18:17:39Z"
            },
            {
              "originalPosition": 41,
              "body": "Hmm, why isn't this an API on the group? (The description specifically says this is a member function of `GG`, for example.)",
              "createdAt": "2021-04-30T23:01:15Z",
              "updatedAt": "2021-05-05T18:17:39Z"
            },
            {
              "originalPosition": 51,
              "body": "GenerateKeyPair and DeriveKeyPair seem to be the two functions here that are probably best pulled out of the POG API. What do you think?",
              "createdAt": "2021-04-30T23:02:03Z",
              "updatedAt": "2021-05-05T18:17:39Z"
            },
            {
              "originalPosition": 39,
              "body": "```suggestion\r\nWe also assume the two following functions for generating OPRF key pairs.\r\n```",
              "createdAt": "2021-04-30T23:02:35Z",
              "updatedAt": "2021-05-05T18:17:39Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQ5Njg5NTc4",
          "commit": {
            "abbreviatedOid": "6a4f858"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-04-30T23:44:35Z",
          "updatedAt": "2021-04-30T23:44:35Z",
          "comments": [
            {
              "originalPosition": 51,
              "body": "I agree, so we can relocate them to a different section. ~(together with the hash* see other comment)~",
              "createdAt": "2021-04-30T23:44:35Z",
              "updatedAt": "2021-05-05T18:17:39Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQ5NjkwMjgw",
          "commit": {
            "abbreviatedOid": "6a4f858"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-04-30T23:48:15Z",
          "updatedAt": "2021-04-30T23:48:16Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "it's true, it doesn't need to be part of \"the crypto API\"",
              "createdAt": "2021-04-30T23:48:16Z",
              "updatedAt": "2021-05-05T18:17:39Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjUxNjE1NjIw",
          "commit": {
            "abbreviatedOid": "93a9f05"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2021-05-04T20:01:19Z",
          "updatedAt": "2021-05-04T20:03:49Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "Can we move this section up to the where the old text was? It seems more natural to follow the description of the POG.",
              "createdAt": "2021-05-04T20:01:19Z",
              "updatedAt": "2021-05-05T18:17:39Z"
            },
            {
              "originalPosition": 31,
              "body": "Hmm, I think we should only write a description for DeriveKeyPair, and then just list requirements for GenerateKeyPair. Some folks may want to implement GenerateKeyPair a different way, e.g., due to FIPS reasons or something, and we don't want to prohibit that. ",
              "createdAt": "2021-05-04T20:03:40Z",
              "updatedAt": "2021-05-05T18:17:39Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjUxNzMzNDU4",
          "commit": {
            "abbreviatedOid": "e16653c"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-05-04T22:52:40Z",
          "updatedAt": "2021-05-04T22:52:41Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "take a look on latest changes.",
              "createdAt": "2021-05-04T22:52:41Z",
              "updatedAt": "2021-05-05T18:17:39Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjUxNzQ0Mjc0",
          "commit": {
            "abbreviatedOid": "e16653c"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-05-04T23:18:42Z",
          "updatedAt": "2021-05-04T23:18:42Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "Why does `pkS` need to be _generated_ with this function? Maybe we can just say that `pkS = ScalarBaseMult(skS)`? (The difference being that the latter specifies the relation between `skS` and `pkS`, rather than exactly how one computes `pkS` given `skS`.)",
              "createdAt": "2021-05-04T23:18:42Z",
              "updatedAt": "2021-05-05T18:17:39Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjUxNzU3OTgy",
          "commit": {
            "abbreviatedOid": "e16653c"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-05-04T23:52:40Z",
          "updatedAt": "2021-05-04T23:52:40Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "Better now?  (feel free to edit)\r\n\r\n```suggestion\r\nTwo functions can be used for generating a (V)OPRF key pair (`skS`, `pkS`).\r\nThe `DeriveKeyPair` function deterministically generates the private key\r\n`skS` given a random byte string `seed` that SHOULD have at least `Ns`\r\nbytes of length; to do that, compute `skS = GG.HashToScalar(seed)`.\r\nThe `GenerateKeyPair` function is a randomized algorithm that outputs a\r\nkey pair (`skS`, `pkS`). Both functions must guarantee that the private\r\nkey `skS` is a non-zero integer less than `p`, and the public key is\r\n`pkS = ScalarBaseMult(skS)`.\r\n```",
              "createdAt": "2021-05-04T23:52:40Z",
              "updatedAt": "2021-05-05T18:17:39Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjUyNTg0NjYy",
          "commit": {
            "abbreviatedOid": "e16653c"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-05-05T17:45:02Z",
          "updatedAt": "2021-05-05T17:45:02Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "How about this slightly different variant?\r\n\r\n```suggestion\r\nTwo functions can be used for generating a (V)OPRF key pair (`skS`, `pkS`)\r\nwhere `skS` is a non-zero integer less than `p` and `pkS = ScalarBaseMult(skS)`: \r\n`GenerateKeyPair` and `DeriveKeyPair`. `GenerateKeyPair` is a randomized function \r\nthat outputs a fresh key pair (`skS`, `pkS`) upon ever invocation. `DeriveKeyPair` \r\nis a  deterministic  function that generates private key `skS` from a random byte \r\nstring `seed` that  SHOULD have at least `Ns` bytes of entropy, and then \r\ncomputes `pkS = ScalarBaseMult(skS)`.\r\n```",
              "createdAt": "2021-05-05T17:45:02Z",
              "updatedAt": "2021-05-05T18:17:39Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjUyNjEyNDM2",
          "commit": {
            "abbreviatedOid": "e16653c"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-05-05T18:17:20Z",
          "updatedAt": "2021-05-05T18:17:20Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "so much better,",
              "createdAt": "2021-05-05T18:17:20Z",
              "updatedAt": "2021-05-05T18:17:39Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjUyODgwNTA0",
          "commit": {
            "abbreviatedOid": "8ff94a9"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-05-06T00:58:08Z",
          "updatedAt": "2021-05-06T00:58:08Z",
          "comments": []
        }
      ]
    },
    {
      "number": 247,
      "id": "MDExOlB1bGxSZXF1ZXN0NjI4MzAxODg0",
      "title": "Use a per-mode-ciphersuite DST for deterministic key derivation",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/247",
      "state": "MERGED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "no updates in the spec, this updates the code.\r\n\r\nAdds the version as prefix in several parts.\r\n\r\n",
      "createdAt": "2021-05-01T01:39:42Z",
      "updatedAt": "2021-05-04T23:00:41Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "922a67b9451f248116dfbef436bae6aa7066c597",
      "headRepository": "armfazh/draft-irtf-cfrg-voprf",
      "headRefName": "UpdatePrefix",
      "headRefOid": "80033ca1bb8a31f3872afbf3a2b769586162ad06",
      "closedAt": "2021-05-04T23:00:41Z",
      "mergedAt": "2021-05-04T23:00:41Z",
      "mergedBy": "armfazh",
      "mergeCommit": {
        "oid": "a832d5f74be661bb10ac16484a5f074e36cc76f3"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "#243 changed the domain separation strings such that they're of the following general form:\r\n\r\n```\r\nLABEL-STRING || VERSION || MODE || SUITE-ID\r\n```\r\n\r\nSo, for example, the finalize DST is:\r\n\r\n```\r\n\"Finalize-\" || \"VOPRF06-\" || MODE || SUITE-ID\r\n```\r\n\r\nThis change seems to make the code do something like:\r\n\r\n```\r\n\"VOPRF06-\" || \"Finalize-\" || MODE || SUITE-ID\r\n```\r\n\r\nWhich is a spec change. Was that intended? (For context, the change in #243 was to allow better re-use of internal functions for the DLEQ proofs _outside_ of this spec.)",
          "createdAt": "2021-05-01T15:09:12Z",
          "updatedAt": "2021-05-01T15:09:12Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "> chris-wood:\r\n> #243 changed the domain separation strings such that they're of the following general form:\r\n> Which is a spec change. Was that intended? \r\n\r\nNo, I did changes in a old version. I fixed that now.\r\nThe only \"breaking change\" is on `DeriveKeyPair`, now it uses the DST derived from mode and ciphersuite. (This was commented in #236 )\r\n\r\n\r\n",
          "createdAt": "2021-05-04T17:53:14Z",
          "updatedAt": "2021-05-04T18:00:46Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@armfazh can we file an issue to track updating this in CIRCL? And please feel free to merge with or without addressing the comment above!",
          "createdAt": "2021-05-04T20:14:59Z",
          "updatedAt": "2021-05-04T20:15:22Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjUxNjI1NzQx",
          "commit": {
            "abbreviatedOid": "7312a73"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-05-04T20:14:36Z",
          "updatedAt": "2021-05-04T20:14:45Z",
          "comments": [
            {
              "originalPosition": 118,
              "body": "Unrelated, but should we also make these constant names all-caps?",
              "createdAt": "2021-05-04T20:14:36Z",
              "updatedAt": "2021-05-04T22:59:50Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjUxNzM2NzEy",
          "commit": {
            "abbreviatedOid": "80033ca"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-05-04T23:00:02Z",
          "updatedAt": "2021-05-04T23:00:02Z",
          "comments": [
            {
              "originalPosition": 118,
              "body": "done\r\n",
              "createdAt": "2021-05-04T23:00:02Z",
              "updatedAt": "2021-05-04T23:00:02Z"
            }
          ]
        }
      ]
    },
    {
      "number": 248,
      "id": "MDExOlB1bGxSZXF1ZXN0NjQ3MTk4NTc2",
      "title": "Bumps up dependency to the latest hash to curve repo.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/248",
      "state": "MERGED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "No changes in code or test vectors.",
      "createdAt": "2021-05-19T01:21:05Z",
      "updatedAt": "2021-05-20T17:46:31Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "098e1cbd21714805c724d9cfbd816d3a8a5cd1f4",
      "headRepository": "armfazh/draft-irtf-cfrg-voprf",
      "headRefName": "bump_dep_H2c",
      "headRefOid": "7513d754f7fe1ccdd6dc7f0ca2e348d0bafa4ecd",
      "closedAt": "2021-05-20T17:46:31Z",
      "mergedAt": "2021-05-20T17:46:31Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "8bf50a0507813b92a6886ef26c504fc29402d1de"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjY0NjkyNDc3",
          "commit": {
            "abbreviatedOid": "7513d75"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-05-20T17:46:27Z",
          "updatedAt": "2021-05-20T17:46:27Z",
          "comments": []
        }
      ]
    },
    {
      "number": 249,
      "id": "MDExOlB1bGxSZXF1ZXN0NjY1MTY2NzY4",
      "title": "Adopt SHAKE-256 for decaf448",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/249",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This also fixes some serialization ambiguities.\r\n\r\nCloses #234, #242.\r\n\r\ncc @claucece ",
      "createdAt": "2021-06-08T18:33:19Z",
      "updatedAt": "2022-01-22T15:16:38Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "8bf50a0507813b92a6886ef26c504fc29402d1de",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/h2s",
      "headRefOid": "71fd44be270168fa1c0c74bae384a06c840eb9dd",
      "closedAt": "2021-06-16T13:40:24Z",
      "mergedAt": "2021-06-16T13:40:23Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "7645aa3dca6002ca8348008cc128c3cc54a1b1d0"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njc4OTEyOTAz",
          "commit": {
            "abbreviatedOid": "8750e2f"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-06-08T19:16:23Z",
          "updatedAt": "2021-06-08T19:16:23Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njg0ODg1MTc1",
          "commit": {
            "abbreviatedOid": "71fd44b"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-06-16T08:38:23Z",
          "updatedAt": "2021-06-16T08:38:23Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "I haven't really been involved in the SHAKE discussions, but is there a reason why SHAKE is suitable for decaf, but not for ristretto?",
              "createdAt": "2021-06-16T08:38:23Z",
              "updatedAt": "2021-06-16T08:38:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njg0ODg1NjA3",
          "commit": {
            "abbreviatedOid": "71fd44b"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks fine to me!",
          "createdAt": "2021-06-16T08:38:47Z",
          "updatedAt": "2021-06-16T08:38:47Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njg0OTM0ODYz",
          "commit": {
            "abbreviatedOid": "71fd44b"
          },
          "author": "bytemare",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-06-16T09:25:15Z",
          "updatedAt": "2021-06-16T09:25:15Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "It's about the consistency with regard to their original definitions, cf #234 ",
              "createdAt": "2021-06-16T09:25:15Z",
              "updatedAt": "2021-06-16T09:25:15Z"
            }
          ]
        }
      ]
    },
    {
      "number": 250,
      "id": "MDExOlB1bGxSZXF1ZXN0NjY1NDI0MzA4",
      "title": "Pin blinding mechanism to mode",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/250",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This change does three things:\r\n\r\n1. Mandates additive blinding for verifiable mode.\r\n2. RECOMMENDS multiplicative blinding for base mode.\r\n3. Adds security considerations for applications discussing when it's appropriate to use additive blinding in base mode.\r\n\r\nCloses #241.\r\n\r\ncc @hugokraw for a look at the blind considerations text :-)",
      "createdAt": "2021-06-08T23:14:29Z",
      "updatedAt": "2022-01-22T15:16:37Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "8bf50a0507813b92a6886ef26c504fc29402d1de",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/blind-fix",
      "headRefOid": "2cd64dac78bc257c8acd073f602cd7eae9f149c5",
      "closedAt": "2021-06-16T14:12:36Z",
      "mergedAt": "2021-06-16T14:12:35Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "fb6e18eab052a6fb0d19a42d973c048137e29ce5"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njg0NTk2MDIw",
          "commit": {
            "abbreviatedOid": "72176b9"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "in general is good, just left some ediorial suggestions",
          "createdAt": "2021-06-15T23:27:43Z",
          "updatedAt": "2021-06-15T23:39:25Z",
          "comments": [
            {
              "originalPosition": 148,
              "body": "```suggestion\r\nrepresentation of the public key. This avoids computing `blindedPublicKey` in `VerifiableUnblind`.\r\n```",
              "createdAt": "2021-06-15T23:27:43Z",
              "updatedAt": "2021-06-15T23:39:25Z"
            },
            {
              "originalPosition": 186,
              "body": "```suggestion\r\npre-process tables of multiples of the group generator.\r\nThis gives computational efficiency advantage, due to the fact that, by\r\nusing precomputation, fixed-base multiplications can be calculated faster\r\nthan variable-base multiplications. Pre-processing also reduces the\r\namount of computation that\r\n```",
              "createdAt": "2021-06-15T23:34:15Z",
              "updatedAt": "2021-06-15T23:39:25Z"
            },
            {
              "originalPosition": 193,
              "body": "```suggestion\r\n- Multiplicative blinding is safe for all applications.\r\n```",
              "createdAt": "2021-06-15T23:34:56Z",
              "updatedAt": "2021-06-15T23:39:25Z"
            },
            {
              "originalPosition": 197,
              "body": "```suggestion\r\n  is met: The client has a certified copy of the server public key (as is the\r\n  case in verifiable mode), the client input has high entropy, or the client mixes\r\n  the public key into the OPRF evaluation.\r\n```",
              "createdAt": "2021-06-15T23:35:47Z",
              "updatedAt": "2021-06-15T23:39:25Z"
            },
            {
              "originalPosition": 204,
              "body": "```suggestion\r\nThe verifiable mode always makes use of the more efficient additive blinding variant,\r\n```",
              "createdAt": "2021-06-15T23:36:43Z",
              "updatedAt": "2021-06-15T23:39:25Z"
            },
            {
              "originalPosition": 205,
              "body": "```suggestion\r\nas the public key is always available for verifying the proof.\r\n```",
              "createdAt": "2021-06-15T23:37:17Z",
              "updatedAt": "2021-06-15T23:39:25Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njg0ODg4NTU1",
          "commit": {
            "abbreviatedOid": "f699b1b"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I think it looks good, I just have a few nits.",
          "createdAt": "2021-06-16T08:41:31Z",
          "updatedAt": "2021-06-16T08:50:56Z",
          "comments": [
            {
              "originalPosition": 147,
              "body": "Should we be more specific about how the server key is blinded if it is provided here? Perhaps offering it as an optional input below and then returning either nil (if it wasn't supplied) or the blinded version. I would just be worried that this text leaves it up to interpretation currently.",
              "createdAt": "2021-06-16T08:41:31Z",
              "updatedAt": "2021-06-16T08:50:56Z"
            },
            {
              "originalPosition": 147,
              "body": "Perhaps something like this:\r\n```\r\n~~~\r\nInput:\r\n  PublicKey? pkS\r\n\r\nOutput:\r\n  Element blindedGenerator\r\n  Element blindedPublicKey\r\n  Scalar blind\r\n\r\ndef Preprocess(pkS):\r\n  blind = GG.RandomScalar()\r\n  blindedGenerator = ScalarBaseMult(blind)\r\n  if (!pkS):\r\n    return blindedGenerator, null, blind\r\n  blindedPublicKey = ScalarMult(pkS, blind)\r\n  return blindedGenerator, blindedPublicKey, blind\r\n~~~\r\n```",
              "createdAt": "2021-06-16T08:46:24Z",
              "updatedAt": "2021-06-16T08:50:57Z"
            },
            {
              "originalPosition": 184,
              "body": "Maybe we should be less certain here, because the advantage is only provided that the pre-computation is done.\r\n\r\n```suggestion\r\nThis can provide a computational efficiency advantage due to the fact that, by\r\n```",
              "createdAt": "2021-06-16T08:47:55Z",
              "updatedAt": "2021-06-16T08:50:56Z"
            },
            {
              "originalPosition": 198,
              "body": "```suggestion\r\n  is met: \r\n    - The client has a certified copy of the server public key (as is the case in the verifiable mode)\r\n    - The client input has high entropy\r\n    - The client mixes the public key into the OPRF evaluation.\r\n```",
              "createdAt": "2021-06-16T08:49:55Z",
              "updatedAt": "2021-06-16T08:50:56Z"
            },
            {
              "originalPosition": 200,
              "body": "```suggestion\r\nTo avoid security issues with the base mode, where some of the above conditions may not be met, this specification RECOMMENDS use of\r\n```",
              "createdAt": "2021-06-16T08:50:18Z",
              "updatedAt": "2021-06-16T08:50:57Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njg1MjI1MTMw",
          "commit": {
            "abbreviatedOid": "2cd64da"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-06-16T14:12:19Z",
          "updatedAt": "2021-06-16T14:12:19Z",
          "comments": [
            {
              "originalPosition": 147,
              "body": "I resolved this slightly differently by using the public key that's available upon context creation.",
              "createdAt": "2021-06-16T14:12:19Z",
              "updatedAt": "2021-06-16T14:12:19Z"
            }
          ]
        }
      ]
    },
    {
      "number": 252,
      "id": "MDExOlB1bGxSZXF1ZXN0NjcxNTU0NjE2",
      "title": "Add explicit deserialization errors, and describe validation logic.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/252",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #251.\r\n\r\ncc @kevinlewi, @bytemare",
      "createdAt": "2021-06-16T14:45:35Z",
      "updatedAt": "2022-01-22T15:16:36Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "fb6e18eab052a6fb0d19a42d973c048137e29ce5",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/validation",
      "headRefOid": "b65eb025d72a73072fa728409c79bab1ac9a134f",
      "closedAt": "2021-06-16T23:21:16Z",
      "mergedAt": "2021-06-16T23:21:16Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "cacbddbb8c88686f9cfc756eb6740fe677c2f0d5"
      },
      "comments": [
        {
          "author": "kevinlewi",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Great!",
          "createdAt": "2021-06-16T18:14:20Z",
          "updatedAt": "2021-06-16T18:14:20Z"
        },
        {
          "author": "bytemare",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Looks good !",
          "createdAt": "2021-06-16T20:16:29Z",
          "updatedAt": "2021-06-16T20:16:29Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njg1NzA1MjM5",
          "commit": {
            "abbreviatedOid": "6d890eb"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2021-06-16T22:04:20Z",
          "updatedAt": "2021-06-16T22:14:19Z",
          "comments": [
            {
              "originalPosition": 71,
              "body": "```suggestion\r\nfails.\r\n```",
              "createdAt": "2021-06-16T22:04:21Z",
              "updatedAt": "2021-06-16T22:14:19Z"
            },
            {
              "originalPosition": 100,
              "body": "\r\n```suggestion\r\nand `Evaluate` can fail if any element received from the peer fails deserialization.\r\n```",
              "createdAt": "2021-06-16T22:06:01Z",
              "updatedAt": "2021-06-16T22:14:19Z"
            },
            {
              "originalPosition": 99,
              "body": "```suggestion\r\nSome VOPRF APIs specified in this document are fallible. For example, `Finalize`\r\n```",
              "createdAt": "2021-06-16T22:06:13Z",
              "updatedAt": "2021-06-16T22:14:19Z"
            },
            {
              "originalPosition": 105,
              "body": "can we remove the public and secret adverbs?\r\nBetter to generalize to `group elements and scalars`. \r\n\r\n```suggestion\r\n- `DeserializeError`: Group element or scalar deserialization failure; {{pog}}.\r\n```",
              "createdAt": "2021-06-16T22:08:46Z",
              "updatedAt": "2021-06-16T22:14:19Z"
            },
            {
              "originalPosition": 120,
              "body": "Something like this would be better: \r\n`The DeserializeElement function recovers a group element from its byte representation after serialization.`\r\nsimilarly for `DeserializeScalar`",
              "createdAt": "2021-06-16T22:13:24Z",
              "updatedAt": "2021-06-16T22:14:19Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njg1NzI1NDM4",
          "commit": {
            "abbreviatedOid": "fd06312"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-06-16T22:44:20Z",
          "updatedAt": "2021-06-16T22:44:20Z",
          "comments": [
            {
              "originalPosition": 120,
              "body": "Hmm, I'm not sure. I think what we have here is accurate. (The person calling this has no idea that the byte array came from the output of SerializeElement, for example. It could be garbage!)",
              "createdAt": "2021-06-16T22:44:20Z",
              "updatedAt": "2021-06-16T22:44:20Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njg1NzM2NTMy",
          "commit": {
            "abbreviatedOid": "fd06312"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-06-16T23:09:31Z",
          "updatedAt": "2021-06-16T23:09:31Z",
          "comments": [
            {
              "originalPosition": 120,
              "body": "as is, it describes also the signature of a hash to group function. \r\nThe issue is with the `convert` word, `recover` could be more accurate.\r\n\r\n\r\n\r\n",
              "createdAt": "2021-06-16T23:09:31Z",
              "updatedAt": "2021-06-16T23:09:31Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njg1NzM3NDA0",
          "commit": {
            "abbreviatedOid": "fd06312"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-06-16T23:11:33Z",
          "updatedAt": "2021-06-16T23:11:34Z",
          "comments": [
            {
              "originalPosition": 120,
              "body": "as is, it says that the function necessarily returns a group element from whatever byte string is passed.",
              "createdAt": "2021-06-16T23:11:33Z",
              "updatedAt": "2021-06-16T23:11:34Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njg1NzM4MzIx",
          "commit": {
            "abbreviatedOid": "b65eb02"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-06-16T23:13:42Z",
          "updatedAt": "2021-06-16T23:13:42Z",
          "comments": [
            {
              "originalPosition": 120,
              "body": "Both conversion and recovery are fallible, so I don't really see a difference. But I changed it to recovery anyway. :) ",
              "createdAt": "2021-06-16T23:13:42Z",
              "updatedAt": "2021-06-16T23:13:42Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njg1NzQwNzkw",
          "commit": {
            "abbreviatedOid": "b65eb02"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-06-16T23:19:45Z",
          "updatedAt": "2021-06-16T23:19:45Z",
          "comments": []
        }
      ]
    },
    {
      "number": 253,
      "id": "MDExOlB1bGxSZXF1ZXN0NjcyNDI4MDI0",
      "title": "Change affiliation",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/253",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-06-17T09:19:07Z",
      "updatedAt": "2022-01-22T15:17:00Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "cacbddbb8c88686f9cfc756eb6740fe677c2f0d5",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/affiliation",
      "headRefOid": "5c6190f4cd6324323908027f8d75114647f3a016",
      "closedAt": "2021-06-17T11:35:54Z",
      "mergedAt": "2021-06-17T11:35:54Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "0669690ab39782e921642167dc74b1854409640b"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 254,
      "id": "MDExOlB1bGxSZXF1ZXN0Njc3OTM1NDUy",
      "title": "Fix #224: Update text for static DH oracle",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/254",
      "state": "MERGED",
      "author": "alxdavids",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Apologies for the long wait on this, CI seems to be failing but it doesn't immediately look like a linting error?",
      "createdAt": "2021-06-25T13:57:18Z",
      "updatedAt": "2022-01-22T15:17:01Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "0669690ab39782e921642167dc74b1854409640b",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "alxdavids/sdh-oracle",
      "headRefOid": "866a91b2760fa4241ebf0a4ad0f8efcecb4cd5d1",
      "closedAt": "2021-07-01T08:55:53Z",
      "mergedAt": "2021-07-01T08:55:53Z",
      "mergedBy": "alxdavids",
      "mergeCommit": {
        "oid": "6da4ed3071b4eb58278c7091d14b031f2e41683f"
      },
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "LGTM; merging!",
          "createdAt": "2021-07-01T08:55:41Z",
          "updatedAt": "2021-07-01T08:55:41Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjkyOTMxMTEz",
          "commit": {
            "abbreviatedOid": "985b427"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "This LGTM pending one question about OPAQUE. ",
          "createdAt": "2021-06-25T15:18:49Z",
          "updatedAt": "2021-06-25T15:22:03Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "```suggestion\nreduce the security of the instantiation by log_2(2^20)/2 = 10 bits. Launching an attack would require\n2^{p/2-(log(Q)/2} bits of memory.\n```\n",
              "createdAt": "2021-06-25T15:18:49Z",
              "updatedAt": "2021-06-25T15:22:03Z"
            },
            {
              "originalPosition": 37,
              "body": "Hmm... is this true? The OPRF oracle output is included in the server's response to the client, it just so happens that the OPRF key is unique per user. ",
              "createdAt": "2021-06-25T15:20:44Z",
              "updatedAt": "2021-06-25T15:22:03Z"
            },
            {
              "originalPosition": 50,
              "body": "```suggestion\nsecurity of lower than 128 bits, we recommend only implementing\nciphersuites with IDs 0x0002, 0x0004, and 0x0005.\n```\n",
              "createdAt": "2021-06-25T15:21:44Z",
              "updatedAt": "2021-06-25T15:22:03Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjkzMTY3MjY5",
          "commit": {
            "abbreviatedOid": "985b427"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-06-25T20:22:55Z",
          "updatedAt": "2021-06-25T20:22:55Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "it this 2^p of 2^log(p) ?",
              "createdAt": "2021-06-25T20:22:55Z",
              "updatedAt": "2021-06-25T20:22:55Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njk1ODExMDE0",
          "commit": {
            "abbreviatedOid": "54cce71"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-06-30T07:57:53Z",
          "updatedAt": "2021-06-30T07:57:53Z",
          "comments": [
            {
              "originalPosition": 37,
              "body": "Ah, misunderstood the setting, I have changed the text",
              "createdAt": "2021-06-30T07:57:53Z",
              "updatedAt": "2021-06-30T07:57:53Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njk2MDc3Mjcz",
          "commit": {
            "abbreviatedOid": "54cce71"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Recommend removing the OPAQUE reference entirely. We can clarify the situation over in that document. Pending that change, this LGTM.",
          "createdAt": "2021-06-30T12:16:58Z",
          "updatedAt": "2021-06-30T12:17:27Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "```suggestion\r\nIn applications where such an oracle is not made available this security loss does not apply.\r\n```",
              "createdAt": "2021-06-30T12:16:59Z",
              "updatedAt": "2021-06-30T12:17:27Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njk2NzcyNDAw",
          "commit": {
            "abbreviatedOid": "54cce71"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-07-01T03:11:54Z",
          "updatedAt": "2021-07-01T03:14:33Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "```suggestion\r\n2^(p/2-log_2(Q)/2) bits of memory.\r\n```\r\nPlease double-check.",
              "createdAt": "2021-07-01T03:11:54Z",
              "updatedAt": "2021-07-01T03:14:33Z"
            }
          ]
        }
      ]
    },
    {
      "number": 255,
      "id": "MDExOlB1bGxSZXF1ZXN0NjgxODE2NTU4",
      "title": "Version bump",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/255",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This updates the version string, test vectors, and adds a change log.\r\n\r\ncc @bytemare, @kevinlewi ",
      "createdAt": "2021-07-01T12:35:05Z",
      "updatedAt": "2022-01-22T15:16:36Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "6da4ed3071b4eb58278c7091d14b031f2e41683f",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/version-bump",
      "headRefOid": "3e833943378d87481051e32543e81eab3391978d",
      "closedAt": "2021-07-02T13:40:19Z",
      "mergedAt": "2021-07-02T13:40:19Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "16f059c20ea1b8e1f2209f2877c859269c7e7cb4"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks, @armfazh! I'm going to park this until @kevinlewi and @bytemare get a chance to take a look.",
          "createdAt": "2021-07-01T18:46:38Z",
          "updatedAt": "2021-07-01T18:46:38Z"
        },
        {
          "author": "bytemare",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Vectors are working here \ud83d\ude03 \ud83d\udc4d ",
          "createdAt": "2021-07-02T01:03:49Z",
          "updatedAt": "2021-07-02T01:03:49Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njk3NDI2ODUx",
          "commit": {
            "abbreviatedOid": "3e83394"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Confirmed, test vectors are passing in TS",
          "createdAt": "2021-07-01T16:09:28Z",
          "updatedAt": "2021-07-01T16:09:28Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njk3NDQ1NTM3",
          "commit": {
            "abbreviatedOid": "3e83394"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-07-01T16:29:51Z",
          "updatedAt": "2021-07-01T16:29:51Z",
          "comments": []
        }
      ]
    },
    {
      "number": 256,
      "id": "MDExOlB1bGxSZXF1ZXN0NjgyNjU2NDM3",
      "title": "Move definitions around. Clarify DKP implementation and blinding mode for test vectors.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/256",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "cc @bytemare, @kevinlewi ",
      "createdAt": "2021-07-02T14:05:29Z",
      "updatedAt": "2022-01-22T15:16:36Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "16f059c20ea1b8e1f2209f2877c859269c7e7cb4",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/edits",
      "headRefOid": "c6f6c72b660df6fa4b816a6bdb6465722be3f3fc",
      "closedAt": "2021-07-06T12:45:35Z",
      "mergedAt": "2021-07-06T12:45:35Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "272bfe7c37e87b188a6832e3ccfc884a94477cae"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njk4MzcwOTU2",
          "commit": {
            "abbreviatedOid": "95db44f"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-07-02T17:08:35Z",
          "updatedAt": "2021-07-02T17:08:35Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njk4NDU0MDI5",
          "commit": {
            "abbreviatedOid": "95db44f"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "two comments",
          "createdAt": "2021-07-02T19:30:37Z",
          "updatedAt": "2021-07-02T19:32:52Z",
          "comments": [
            {
              "originalPosition": 242,
              "body": "Although it's verbose, it is easier to understand.\r\n\r\n```suggestion\r\nBase mode uses multiplicative blinding while verifiable mode \r\nuses additive blinding, as described in {{base-client}} and \r\n{{verifiable-client}}, respectively.\r\n```",
              "createdAt": "2021-07-02T19:30:37Z",
              "updatedAt": "2021-07-02T19:32:53Z"
            },
            {
              "originalPosition": 154,
              "body": "Either `opaque Proof[2*Ns]` or `SerializedScalar Proof[2]` is correct.",
              "createdAt": "2021-07-02T19:32:06Z",
              "updatedAt": "2021-07-02T19:32:53Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njk4NDU1Nzg4",
          "commit": {
            "abbreviatedOid": "c6f6c72"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-07-02T19:34:10Z",
          "updatedAt": "2021-07-02T19:34:10Z",
          "comments": [
            {
              "originalPosition": 154,
              "body": "Sadly, the latter isn\u2019t. The number denotes the byte count, not element count. We were misusing this all along.",
              "createdAt": "2021-07-02T19:34:10Z",
              "updatedAt": "2021-07-02T19:34:10Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njk4NTM3OTkz",
          "commit": {
            "abbreviatedOid": "c6f6c72"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-07-02T23:19:41Z",
          "updatedAt": "2021-07-02T23:19:41Z",
          "comments": [
            {
              "originalPosition": 154,
              "body": "It's correct as is. Reference: https://www.rfc-editor.org/rfc/rfc8446.html#section-3.4",
              "createdAt": "2021-07-02T23:19:41Z",
              "updatedAt": "2021-07-02T23:19:41Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njk4NTM4MDQ4",
          "commit": {
            "abbreviatedOid": "c6f6c72"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-07-02T23:19:53Z",
          "updatedAt": "2021-07-02T23:19:53Z",
          "comments": []
        }
      ]
    },
    {
      "number": 257,
      "id": "MDExOlB1bGxSZXF1ZXN0NjgyOTIzODc2",
      "title": "Fix link in a reference to ristretto draft.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/257",
      "state": "MERGED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-07-02T23:30:34Z",
      "updatedAt": "2021-07-06T12:46:02Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "16f059c20ea1b8e1f2209f2877c859269c7e7cb4",
      "headRepository": "armfazh/draft-irtf-cfrg-voprf",
      "headRefName": "fixLink",
      "headRefOid": "5da8e9a1eef83e3856546f0127d6d8296314de2c",
      "closedAt": "2021-07-06T12:46:02Z",
      "mergedAt": "2021-07-06T12:46:02Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "24a7d4d1a22d7cd796b3d1b427d43d347fb8a217"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njk5OTA3MjE5",
          "commit": {
            "abbreviatedOid": "5da8e9a"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-07-06T12:45:58Z",
          "updatedAt": "2021-07-06T12:45:58Z",
          "comments": []
        }
      ]
    },
    {
      "number": 258,
      "id": "MDExOlB1bGxSZXF1ZXN0Njg1MzI4Mjg3",
      "title": "Add metadata mode",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/258",
      "state": "MERGED",
      "author": "claucece",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-07-07T16:09:13Z",
      "updatedAt": "2021-08-03T18:27:40Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "76a17edf5a33dfc95855a48c524026641b399754",
      "headRepository": "claucece/draft-irtf-cfrg-voprf",
      "headRefName": "master",
      "headRefOid": "22ff565b238a818fa76b2ea25712a3d358b5f9b8",
      "closedAt": "2021-08-03T18:27:40Z",
      "mergedAt": "2021-08-03T18:27:40Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "66346b0a2bd6897d411e92889d7a59b092efac1c"
      },
      "comments": [
        {
          "author": "jedisct1",
          "authorAssociation": "NONE",
          "body": "Oh, this is awesome! \ud83c\udf89",
          "createdAt": "2021-07-14T19:03:51Z",
          "updatedAt": "2021-07-14T19:03:51Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@claucece can you please resolve conflicts?",
          "createdAt": "2021-07-26T16:56:45Z",
          "updatedAt": "2021-07-26T16:56:45Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzE1MDc4NjQw",
          "commit": {
            "abbreviatedOid": "4d327c1"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "I think the shape of this PR is heading in the right direction, but there are some changes I'd like to see before we land it. (The proof generation changes in particular need some work.) I have some suggestions to simplify notation and hopefully improve clarity, too.",
          "createdAt": "2021-07-26T16:57:05Z",
          "updatedAt": "2021-07-26T17:14:40Z",
          "comments": [
            {
              "originalPosition": 57,
              "body": "```suggestion\r\n(or metadata tag) in the PRF evaluation.\r\n```",
              "createdAt": "2021-07-26T16:57:05Z",
              "updatedAt": "2021-07-26T17:14:40Z"
            },
            {
              "originalPosition": 66,
              "body": "Since this PR describes `t` as optional input to the PRF evaluation, we should probably just extend the text in the first paragraph of this section to include `t`. For example:\r\n\r\n```\r\nIn the base mode, a client and server interact to compute y = F(skS, x, t), where skS is the server's private\r\nkey, x and t are the client's secret and public input, respectively, and y is the OPRF output.\r\n```",
              "createdAt": "2021-07-26T16:59:10Z",
              "updatedAt": "2021-07-26T17:14:40Z"
            },
            {
              "originalPosition": 80,
              "body": "This is an existing issue, but should we use consistent notation for `F`? Here we use `input` and `output`, and above we use `x` and `y`. I would prefer the latter, but regardless, using the same notation would be good. ",
              "createdAt": "2021-07-26T17:02:08Z",
              "updatedAt": "2021-07-26T17:14:40Z"
            },
            {
              "originalPosition": 87,
              "body": "Shouldn't both client and server have metadata values as input? Also, maybe we can rename things to indicate what is \"private\" (`input`) and what is public (metadata values)?",
              "createdAt": "2021-07-26T17:03:56Z",
              "updatedAt": "2021-07-26T17:14:40Z"
            },
            {
              "originalPosition": 113,
              "body": "```suggestion\r\nthe server response and produces a fixed-length byte array corresponding to the output of the\r\n```",
              "createdAt": "2021-07-26T17:04:15Z",
              "updatedAt": "2021-07-26T17:14:40Z"
            },
            {
              "originalPosition": 123,
              "body": "Can we rename `ClientInput` to simply `Input`, or `Data`, and use this type for `input` and both metadata values? Or maybe use `PrivateInput` and `PublicInput` to represent the client input and metadata value types, respectively? For example:\r\n\r\n```\r\nThe data types `PrivateInput` and `PublicInput` are opaque byte strings of arbitrary length no larger than 2^13 octets.\r\n```",
              "createdAt": "2021-07-26T17:06:21Z",
              "updatedAt": "2021-07-26T17:14:40Z"
            },
            {
              "originalPosition": 157,
              "body": "Can we wrap this line so it doesn't overflow?",
              "createdAt": "2021-07-26T17:06:40Z",
              "updatedAt": "2021-07-26T17:14:40Z"
            },
            {
              "originalPosition": 157,
              "body": "What if we renamed `metadata` to `context`? The purpose of this string is to compute `m`, which effectively pins `skS` to a per-metadata value. That seems like a \"context\" to me. The result might be:\r\n\r\n```\r\ncontext = \"Context-\" || contextString || \r\n          I2OSP(len(serverMetadata), 2) || serverMetadata || \r\n          I2OSP(len(clientMetadata), 2) || clientMetadata\r\nm = GG.HashToScalar(context)\r\nt = skS + m\r\n```",
              "createdAt": "2021-07-26T17:10:34Z",
              "updatedAt": "2021-07-26T17:14:40Z"
            },
            {
              "originalPosition": 253,
              "body": "Please revert this change -- this function does not need to be updated.",
              "createdAt": "2021-07-26T17:12:19Z",
              "updatedAt": "2021-07-26T17:14:40Z"
            },
            {
              "originalPosition": 351,
              "body": "Please revert this change, too.",
              "createdAt": "2021-07-26T17:12:33Z",
              "updatedAt": "2021-07-26T17:14:40Z"
            },
            {
              "originalPosition": 445,
              "body": "Note that this differs from the PoC. I recommend checking out that code to see what should happen here.",
              "createdAt": "2021-07-26T17:13:11Z",
              "updatedAt": "2021-07-26T17:14:40Z"
            },
            {
              "originalPosition": 532,
              "body": "We should also update the blinding considerations section, which discusses additive blinding and would likely need to change as a result of this simplification.",
              "createdAt": "2021-07-26T17:13:49Z",
              "updatedAt": "2021-07-26T17:14:40Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzE1MzIwNTAw",
          "commit": {
            "abbreviatedOid": "090f153"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-07-26T22:03:42Z",
          "updatedAt": "2021-07-26T22:03:42Z",
          "comments": [
            {
              "originalPosition": 57,
              "body": "Changed.",
              "createdAt": "2021-07-26T22:03:42Z",
              "updatedAt": "2021-07-26T22:03:42Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzE1MzIwNjkz",
          "commit": {
            "abbreviatedOid": "090f153"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-07-26T22:04:02Z",
          "updatedAt": "2021-07-26T22:04:02Z",
          "comments": [
            {
              "originalPosition": 66,
              "body": "Changed.",
              "createdAt": "2021-07-26T22:04:02Z",
              "updatedAt": "2021-07-26T22:04:20Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzE1MzIwODAz",
          "commit": {
            "abbreviatedOid": "090f153"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-07-26T22:04:14Z",
          "updatedAt": "2021-07-26T22:04:14Z",
          "comments": [
            {
              "originalPosition": 80,
              "body": "I change everywhere to the latter. Let me know what you think.",
              "createdAt": "2021-07-26T22:04:14Z",
              "updatedAt": "2021-07-26T22:04:14Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzE1MzIxMDgy",
          "commit": {
            "abbreviatedOid": "090f153"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-07-26T22:04:49Z",
          "updatedAt": "2021-07-26T22:04:50Z",
          "comments": [
            {
              "originalPosition": 87,
              "body": "Mmm.. I'll like to differentiate between the client and server one.. does it look better now?",
              "createdAt": "2021-07-26T22:04:49Z",
              "updatedAt": "2021-07-26T22:04:50Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzE1MzIxMTQ1",
          "commit": {
            "abbreviatedOid": "090f153"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-07-26T22:04:57Z",
          "updatedAt": "2021-07-26T22:04:57Z",
          "comments": [
            {
              "originalPosition": 113,
              "body": "Changed.",
              "createdAt": "2021-07-26T22:04:57Z",
              "updatedAt": "2021-07-26T22:04:57Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzE1MzIxMjUy",
          "commit": {
            "abbreviatedOid": "090f153"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-07-26T22:05:08Z",
          "updatedAt": "2021-07-26T22:05:08Z",
          "comments": [
            {
              "originalPosition": 123,
              "body": "Changed to them everywhere.",
              "createdAt": "2021-07-26T22:05:08Z",
              "updatedAt": "2021-07-26T22:05:08Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzE1MzIxMzMx",
          "commit": {
            "abbreviatedOid": "090f153"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-07-26T22:05:15Z",
          "updatedAt": "2021-07-26T22:05:16Z",
          "comments": [
            {
              "originalPosition": 157,
              "body": "Changed.",
              "createdAt": "2021-07-26T22:05:15Z",
              "updatedAt": "2021-07-26T22:05:16Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzE1MzIxNjk1",
          "commit": {
            "abbreviatedOid": "090f153"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-07-26T22:05:56Z",
          "updatedAt": "2021-07-26T22:05:56Z",
          "comments": [
            {
              "originalPosition": 351,
              "body": "I revert most of it with one exception: `A`, which corresponds to the Generator, does not need to be passed to this function, as `ScalarBaseMult` can be used in its place.",
              "createdAt": "2021-07-26T22:05:56Z",
              "updatedAt": "2021-07-26T22:06:08Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzE1MzIyMjE2",
          "commit": {
            "abbreviatedOid": "090f153"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-07-26T22:06:57Z",
          "updatedAt": "2021-07-26T22:06:57Z",
          "comments": [
            {
              "originalPosition": 445,
              "body": "It is fine. The difference is that in the PoC certain operations are done outside while here I'm making them inside the `VerifyProof`. I changed to aligned with the poc.",
              "createdAt": "2021-07-26T22:06:57Z",
              "updatedAt": "2021-07-26T22:06:57Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzE1MzIyNDM5",
          "commit": {
            "abbreviatedOid": "090f153"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-07-26T22:07:18Z",
          "updatedAt": "2021-07-26T22:07:19Z",
          "comments": [
            {
              "originalPosition": 532,
              "body": "Briefly touched it now. Let me know if a bigger analysis is needed.",
              "createdAt": "2021-07-26T22:07:19Z",
              "updatedAt": "2021-07-26T22:07:19Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzE1MzIzMjAw",
          "commit": {
            "abbreviatedOid": "090f153"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-07-26T22:08:44Z",
          "updatedAt": "2021-07-26T22:08:44Z",
          "comments": [
            {
              "originalPosition": 253,
              "body": "I revert most of it with one exception: A, which corresponds to the Generator, does not need to be passed to this function, as ScalarBaseMult can be used in its place.",
              "createdAt": "2021-07-26T22:08:44Z",
              "updatedAt": "2021-07-26T22:08:44Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzE1MzMzNTU4",
          "commit": {
            "abbreviatedOid": "090f153"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-07-26T22:29:08Z",
          "updatedAt": "2021-07-26T22:29:08Z",
          "comments": [
            {
              "originalPosition": 351,
              "body": "Other users of this function may need to specify the base for the DLEQ, so I think we should still pass the generator. (In particular, the ABVOPRF needs to specify the base.)",
              "createdAt": "2021-07-26T22:29:08Z",
              "updatedAt": "2021-07-26T22:29:08Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzE1MzM3Nzg4",
          "commit": {
            "abbreviatedOid": "090f153"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Almost there!",
          "createdAt": "2021-07-26T22:37:51Z",
          "updatedAt": "2021-07-26T22:40:05Z",
          "comments": [
            {
              "originalPosition": 89,
              "body": "Hmm, how about something like this?\r\n\r\n- Client private input: `input`\r\n- Client public input: `clientInfo`\r\n- Server public input: `serverInfo`",
              "createdAt": "2021-07-26T22:37:51Z",
              "updatedAt": "2021-07-26T22:40:05Z"
            },
            {
              "originalPosition": 474,
              "body": "I don't think this is correct. In particular, the order of R and Z need to be swapped, I think.",
              "createdAt": "2021-07-26T22:38:59Z",
              "updatedAt": "2021-07-26T22:40:05Z"
            },
            {
              "originalPosition": 578,
              "body": "```suggestion\r\nThis document makes use of one type of blinding variants: multiplicative.\r\n```",
              "createdAt": "2021-07-26T22:39:11Z",
              "updatedAt": "2021-07-26T22:40:05Z"
            },
            {
              "originalPosition": 579,
              "body": "```suggestion\r\nBlinding may also be done additively. However, the choice of blinding mechanism has security implications. {{JKX21}}\r\n```",
              "createdAt": "2021-07-26T22:39:45Z",
              "updatedAt": "2021-07-26T22:40:05Z"
            },
            {
              "originalPosition": 594,
              "body": "```suggestion\r\nthis specification uses multiplicative blinding.\r\n```",
              "createdAt": "2021-07-26T22:39:56Z",
              "updatedAt": "2021-07-26T22:40:06Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzE3MTUwMTI2",
          "commit": {
            "abbreviatedOid": "090f153"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-07-28T15:23:49Z",
          "updatedAt": "2021-07-28T15:23:49Z",
          "comments": [
            {
              "originalPosition": 89,
              "body": "Done.",
              "createdAt": "2021-07-28T15:23:49Z",
              "updatedAt": "2021-07-28T15:23:49Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzE3MTUwMjY0",
          "commit": {
            "abbreviatedOid": "090f153"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-07-28T15:23:55Z",
          "updatedAt": "2021-07-28T15:23:55Z",
          "comments": [
            {
              "originalPosition": 474,
              "body": "Changed.",
              "createdAt": "2021-07-28T15:23:55Z",
              "updatedAt": "2021-07-28T15:23:55Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzE3MTUxMjE2",
          "commit": {
            "abbreviatedOid": "db37041"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-07-28T15:24:41Z",
          "updatedAt": "2021-07-28T15:24:42Z",
          "comments": [
            {
              "originalPosition": 578,
              "body": "Don.",
              "createdAt": "2021-07-28T15:24:41Z",
              "updatedAt": "2021-07-28T15:24:42Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzE3MTUxMzU0",
          "commit": {
            "abbreviatedOid": "db37041"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-07-28T15:24:47Z",
          "updatedAt": "2021-07-28T15:24:48Z",
          "comments": [
            {
              "originalPosition": 579,
              "body": "Done.",
              "createdAt": "2021-07-28T15:24:47Z",
              "updatedAt": "2021-07-28T15:24:48Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzE3MTUxNDk2",
          "commit": {
            "abbreviatedOid": "db37041"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-07-28T15:24:55Z",
          "updatedAt": "2021-07-28T15:24:55Z",
          "comments": [
            {
              "originalPosition": 594,
              "body": "Done.",
              "createdAt": "2021-07-28T15:24:55Z",
              "updatedAt": "2021-07-28T15:24:55Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzE3MTUxNzY0",
          "commit": {
            "abbreviatedOid": "db37041"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-07-28T15:25:10Z",
          "updatedAt": "2021-07-28T15:25:11Z",
          "comments": [
            {
              "originalPosition": 351,
              "body": "Changed.",
              "createdAt": "2021-07-28T15:25:11Z",
              "updatedAt": "2021-07-28T15:25:11Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzE3MzQwNzU4",
          "commit": {
            "abbreviatedOid": "dde8bbc"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Just a couple more comments.",
          "createdAt": "2021-07-28T18:30:52Z",
          "updatedAt": "2021-07-28T18:50:37Z",
          "comments": [
            {
              "originalPosition": 420,
              "body": "What is `A`? The \"left\" pair for this proof should be (G, U), where G is the generator.",
              "createdAt": "2021-07-28T18:30:52Z",
              "updatedAt": "2021-07-28T18:50:37Z"
            },
            {
              "originalPosition": 334,
              "body": "Why is this `x` but the parameter name is `input`?",
              "createdAt": "2021-07-28T18:33:03Z",
              "updatedAt": "2021-07-28T18:50:37Z"
            },
            {
              "originalPosition": 419,
              "body": "```suggestion\r\n  T = ScalarBaseMult(m)\r\n  U = T + pkS\r\n```",
              "createdAt": "2021-07-28T18:33:28Z",
              "updatedAt": "2021-07-28T18:50:37Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzE4MDUwMTk1",
          "commit": {
            "abbreviatedOid": "dde8bbc"
          },
          "author": "claucece",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-07-29T12:49:14Z",
          "updatedAt": "2021-07-29T12:49:14Z",
          "comments": [
            {
              "originalPosition": 419,
              "body": "Changed",
              "createdAt": "2021-07-29T12:49:14Z",
              "updatedAt": "2021-07-29T12:49:14Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzIxNTE3Nzgz",
          "commit": {
            "abbreviatedOid": "22ff565"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-08-03T18:27:21Z",
          "updatedAt": "2021-08-03T18:27:21Z",
          "comments": []
        }
      ]
    },
    {
      "number": 260,
      "id": "MDExOlB1bGxSZXF1ZXN0Njg1NjQzMDM3",
      "title": "Updating CIRCL implementation.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/260",
      "state": "MERGED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": " - Make the file an ascii document.\r\n - Add RFC8446 to references.\r\n - CIRCL supports v07 [PR](https://github.com/cloudflare/circl/pull/241)",
      "createdAt": "2021-07-08T02:57:07Z",
      "updatedAt": "2021-07-15T12:43:28Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "24a7d4d1a22d7cd796b3d1b427d43d347fb8a217",
      "headRepository": "armfazh/draft-irtf-cfrg-voprf",
      "headRefName": "nitsJul07",
      "headRefOid": "f8f5d6d89283d63b565ca0a9b2733865a3a88098",
      "closedAt": "2021-07-15T12:43:28Z",
      "mergedAt": "2021-07-15T12:43:28Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "2177aecf524ab6e7380ce560f8a02c65662c30d1"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzA3MzAyNzIz",
          "commit": {
            "abbreviatedOid": "f8f5d6d"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-07-15T12:43:19Z",
          "updatedAt": "2021-07-15T12:43:19Z",
          "comments": []
        }
      ]
    },
    {
      "number": 261,
      "id": "MDExOlB1bGxSZXF1ZXN0Njk2MDM2NjI3",
      "title": "Update implementation and add an integration",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/261",
      "state": "MERGED",
      "author": "bytemare",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-07-23T15:44:38Z",
      "updatedAt": "2021-07-26T16:26:14Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "2177aecf524ab6e7380ce560f8a02c65662c30d1",
      "headRepository": "bytemare/draft-irtf-cfrg-voprf",
      "headRefName": "patch-4",
      "headRefOid": "c5b2db6f52f922e342e2e37e368f8037a8bf0725",
      "closedAt": "2021-07-26T16:26:14Z",
      "mergedAt": "2021-07-26T16:26:14Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "76a17edf5a33dfc95855a48c524026641b399754"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzE1MDQ5Njkx",
          "commit": {
            "abbreviatedOid": "c5b2db6"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-07-26T16:26:09Z",
          "updatedAt": "2021-07-26T16:26:09Z",
          "comments": []
        }
      ]
    },
    {
      "number": 262,
      "id": "MDExOlB1bGxSZXF1ZXN0Njk3Njk5OTk0",
      "title": "Fix small typo in abstract",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/262",
      "state": "MERGED",
      "author": "thomwiggers",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "It seemed someone accidentally a word.",
      "createdAt": "2021-07-27T09:40:45Z",
      "updatedAt": "2021-07-27T13:14:12Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "76a17edf5a33dfc95855a48c524026641b399754",
      "headRepository": null,
      "headRefName": "patch-1",
      "headRefOid": "6542c0fe2a70203d9eab91f74ab92850493821d9",
      "closedAt": "2021-07-27T13:14:11Z",
      "mergedAt": "2021-07-27T13:14:11Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "afe67193f4d51b4591d40b537de45c06f485360a"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks!",
          "createdAt": "2021-07-27T12:52:28Z",
          "updatedAt": "2021-07-27T12:52:28Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzE1ODcyODAw",
          "commit": {
            "abbreviatedOid": "6542c0f"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-07-27T12:52:23Z",
          "updatedAt": "2021-07-27T12:52:23Z",
          "comments": []
        }
      ]
    },
    {
      "number": 263,
      "id": "MDExOlB1bGxSZXF1ZXN0NzAwNjE5OTQ4",
      "title": "Fixing typos",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/263",
      "state": "MERGED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-07-31T00:02:45Z",
      "updatedAt": "2021-10-15T19:03:56Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "afe67193f4d51b4591d40b537de45c06f485360a",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "armfazh/typo111",
      "headRefOid": "11750050cc9e4fb5c99377335662f2752a8264ac",
      "closedAt": "2021-07-31T02:04:58Z",
      "mergedAt": "2021-07-31T02:04:58Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "8b10db27b3ad64dd82bcc2d1d5eacbb8df4f07b5"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzE5NTM1NDUx",
          "commit": {
            "abbreviatedOid": "1175005"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-07-31T02:04:54Z",
          "updatedAt": "2021-07-31T02:04:54Z",
          "comments": []
        }
      ]
    },
    {
      "number": 264,
      "id": "MDExOlB1bGxSZXF1ZXN0NzAwNjI0ODY0",
      "title": "Update pointer to v07",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/264",
      "state": "MERGED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-07-31T00:26:38Z",
      "updatedAt": "2021-10-15T19:03:57Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "afe67193f4d51b4591d40b537de45c06f485360a",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "armfazh/refImplv07",
      "headRefOid": "23660212534b8b4b2cd11bd788d3d2c57bc6f86d",
      "closedAt": "2021-08-02T23:49:21Z",
      "mergedAt": "2021-08-02T23:49:21Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "099a273035b794da780e4e132385c399bac8876c"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 265,
      "id": "MDExOlB1bGxSZXF1ZXN0NzE1NDEyMzY5",
      "title": "Flatten metadata and cast it as auxiliary \"info\".",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/265",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We need to do a pass over the introduction and abstract, as we're no longer building a OPRF/VOPRF, but rather a POPRF/VPOPRF(?).\r\n\r\ncc @armfazh, @alxdavids ",
      "createdAt": "2021-08-18T20:59:37Z",
      "updatedAt": "2022-01-22T15:16:34Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "66346b0a2bd6897d411e92889d7a59b092efac1c",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/flatten-info",
      "headRefOid": "def30459fdb1519ce376aabc67544e5f9f73e0a2",
      "closedAt": "2021-08-27T17:35:11Z",
      "mergedAt": "2021-08-27T17:35:11Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "33ef3665d25b27c1a4e9c706076f56a8d6cccaba"
      },
      "comments": [
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "ACK, on my list for reviewing.",
          "createdAt": "2021-08-23T21:37:41Z",
          "updatedAt": "2021-08-23T21:37:41Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@armfazh all comments addressed! Please have another look.",
          "createdAt": "2021-08-27T16:10:01Z",
          "updatedAt": "2021-08-27T16:10:01Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzQwMTY2MzA0",
          "commit": {
            "abbreviatedOid": "721b62b"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "some few nits, but ok in general",
          "createdAt": "2021-08-27T06:01:08Z",
          "updatedAt": "2021-08-27T06:18:00Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "what about to borrow the term additional data from AEAD, instead of info? ",
              "createdAt": "2021-08-27T06:01:09Z",
              "updatedAt": "2021-08-27T06:18:00Z"
            },
            {
              "originalPosition": 41,
              "body": "s/output/y/",
              "createdAt": "2021-08-27T06:05:17Z",
              "updatedAt": "2021-08-27T06:18:00Z"
            },
            {
              "originalPosition": 51,
              "body": "```suggestion\r\ncomputes the (V)OPRF evaluation in `Evaluate` over the client's blinded token,\r\n```\r\n\r\ntoken or element?",
              "createdAt": "2021-08-27T06:06:42Z",
              "updatedAt": "2021-08-27T06:18:00Z"
            },
            {
              "originalPosition": 281,
              "body": "```suggestion\r\n- \"Input\": The private client input, an opaque byte string.\r\n```\r\n\r\nuniformize the term private vs secret",
              "createdAt": "2021-08-27T06:13:38Z",
              "updatedAt": "2021-08-27T06:18:00Z"
            },
            {
              "originalPosition": 34,
              "body": "align this line to the right",
              "createdAt": "2021-08-27T06:16:54Z",
              "updatedAt": "2021-08-27T06:18:00Z"
            },
            {
              "originalPosition": 37,
              "body": "```suggestion\r\n                             evaluatedElement, proof\r\n```",
              "createdAt": "2021-08-27T06:17:14Z",
              "updatedAt": "2021-08-27T06:18:00Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzQwNjgyNjA1",
          "commit": {
            "abbreviatedOid": "84cbb4d"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-08-27T16:09:44Z",
          "updatedAt": "2021-08-27T16:09:45Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "Eh, I think `info` is more appropriate here. ",
              "createdAt": "2021-08-27T16:09:45Z",
              "updatedAt": "2021-08-27T16:09:45Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzQwNzIzOTEy",
          "commit": {
            "abbreviatedOid": "84cbb4d"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-08-27T17:00:42Z",
          "updatedAt": "2021-08-27T17:00:42Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "in this case, there are asymmetric keys, so they must be public key and private key.\r\n\r\n\r\n",
              "createdAt": "2021-08-27T17:00:42Z",
              "updatedAt": "2021-08-27T17:00:42Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzQwNzI3NjA3",
          "commit": {
            "abbreviatedOid": "84cbb4d"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "thinking out loud: \r\nA user can have a key in secret, which is slightly different from a user having a secret key (usually assumed to be a key for symmetric encryption) vs a private key (a key that has its correspondent public key).\r\n",
          "createdAt": "2021-08-27T17:05:34Z",
          "updatedAt": "2021-08-27T17:05:34Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzQwNzI4NTcx",
          "commit": {
            "abbreviatedOid": "84cbb4d"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-08-27T17:06:53Z",
          "updatedAt": "2021-08-27T17:06:54Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "I do not feel strongly about secret vs private. I'll change to private.",
              "createdAt": "2021-08-27T17:06:53Z",
              "updatedAt": "2021-08-27T17:06:54Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzQwNzMxNjA3",
          "commit": {
            "abbreviatedOid": "def3045"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-08-27T17:10:51Z",
          "updatedAt": "2021-08-27T17:10:51Z",
          "comments": []
        }
      ]
    },
    {
      "number": 268,
      "id": "MDExOlB1bGxSZXF1ZXN0NzMyNzY4NTUx",
      "title": "Caw/fix context string",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/268",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #267.\r\n\r\ncc @kevinlewi ",
      "createdAt": "2021-09-13T13:49:18Z",
      "updatedAt": "2022-01-22T15:16:33Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "33ef3665d25b27c1a4e9c706076f56a8d6cccaba",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/fix-context-string",
      "headRefOid": "f0ce414badee33c046efe043e6fd3472ca853cce",
      "closedAt": "2021-09-13T16:45:10Z",
      "mergedAt": "2021-09-13T16:45:10Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "98932d7407f6867ffd0b83d84cc89e5879690420"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 272,
      "id": "MDExOlB1bGxSZXF1ZXN0NzMyOTI3NTc3",
      "title": "Use the private key in the PoC",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/272",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #270.\r\n\r\ncc @fredericjacobs",
      "createdAt": "2021-09-13T16:51:10Z",
      "updatedAt": "2022-01-22T15:16:32Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "98932d7407f6867ffd0b83d84cc89e5879690420",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/use-sk",
      "headRefOid": "badd3b4a30760ab9a649f249f950f52a65fb8d32",
      "closedAt": "2021-09-13T22:11:49Z",
      "mergedAt": "2021-09-13T22:11:49Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "bc4f9b6d661c964ba8ce6703fa5e4f1859e1ea12"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 275,
      "id": "MDExOlB1bGxSZXF1ZXN0NzMzMTYwMDQ4",
      "title": "Swap order ",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/275",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #274.",
      "createdAt": "2021-09-13T22:15:52Z",
      "updatedAt": "2022-01-22T15:16:32Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "bc4f9b6d661c964ba8ce6703fa5e4f1859e1ea12",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/swap-order",
      "headRefOid": "2d5fbdfacd5fd3d51d55744e49939d5616e516a5",
      "closedAt": "2021-09-14T18:52:36Z",
      "mergedAt": "2021-09-14T18:52:36Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "ff278f66d10b5d826eae55add447c8f7dda75038"
      },
      "comments": [
        {
          "author": "kevinlewi",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks! Verified that this matches with ristretto255-sha512 in base mode.",
          "createdAt": "2021-09-13T22:34:51Z",
          "updatedAt": "2021-09-13T22:34:51Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 277,
      "id": "PR_kwDOBphpts4rv089",
      "title": "Serialize proof test vector as sequence of scalars",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/277",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #276.",
      "createdAt": "2021-09-14T19:14:20Z",
      "updatedAt": "2022-01-22T15:16:29Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "ff278f66d10b5d826eae55add447c8f7dda75038",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/update-proof-vector",
      "headRefOid": "aa813333ba50954743aec6ea391bfe026cf18862",
      "closedAt": "2021-09-15T14:15:01Z",
      "mergedAt": "2021-09-15T14:15:01Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "f12aa2dc86e1d43983c405f179abc82b94ab4820"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOBphpts4s-ZrN",
          "commit": {
            "abbreviatedOid": "408a783"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-09-15T00:11:27Z",
          "updatedAt": "2021-09-15T00:11:27Z",
          "comments": []
        }
      ]
    },
    {
      "number": 278,
      "id": "PR_kwDOBphpts4r6ROs",
      "title": "Clarify string value encoding.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/278",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #271.",
      "createdAt": "2021-09-17T21:52:38Z",
      "updatedAt": "2022-01-22T15:16:29Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "f12aa2dc86e1d43983c405f179abc82b94ab4820",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/string-literals",
      "headRefOid": "8a3b688792809e6eddefee4b00e2295f3c28e714",
      "closedAt": "2021-09-18T13:15:37Z",
      "mergedAt": "2021-09-18T13:15:36Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "6e1cce1c99073050775841dc28992f12f4e3f32a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOBphpts4tLRrq",
          "commit": {
            "abbreviatedOid": "8a3b688"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-09-18T01:00:55Z",
          "updatedAt": "2021-09-18T01:00:55Z",
          "comments": []
        }
      ]
    },
    {
      "number": 279,
      "id": "PR_kwDOBphpts4r6TA4",
      "title": "Update P-384 suite to use SHA-384.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/279",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #266.",
      "createdAt": "2021-09-17T22:11:12Z",
      "updatedAt": "2022-01-22T15:16:28Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "f12aa2dc86e1d43983c405f179abc82b94ab4820",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/update-p384-suite",
      "headRefOid": "abb6880575f5d94065ae9602685f94ce5e4fe6f3",
      "closedAt": "2021-09-20T14:11:48Z",
      "mergedAt": "2021-09-20T14:11:48Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "9fd1db1888ecce632b3248e86399cb8a37fac80a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOBphpts4tLRw0",
          "commit": {
            "abbreviatedOid": "abb6880"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-09-18T01:03:41Z",
          "updatedAt": "2021-09-18T01:03:41Z",
          "comments": []
        }
      ]
    },
    {
      "number": 280,
      "id": "PR_kwDOBphpts4r-L6r",
      "title": "Fix hash-to-curve DST for all NIST curves",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/280",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #279.",
      "createdAt": "2021-09-20T16:07:47Z",
      "updatedAt": "2022-01-22T15:16:27Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "9fd1db1888ecce632b3248e86399cb8a37fac80a",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/fix-h2c-vectors",
      "headRefOid": "3805702a4b26637cfb9af3427db52917271bf6eb",
      "closedAt": "2021-09-20T19:14:33Z",
      "mergedAt": "2021-09-20T19:14:33Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "2b1043ce7b39dce3bb3de92469d36d3cdd6e61e7"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOBphpts4tPV7r",
          "commit": {
            "abbreviatedOid": "7ac75d1"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "good catch",
          "createdAt": "2021-09-20T19:04:06Z",
          "updatedAt": "2021-09-20T19:04:06Z",
          "comments": []
        }
      ]
    },
    {
      "number": 284,
      "id": "PR_kwDOBphpts4sefYd",
      "title": "Focus the document on the POPRF construction and its properties",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/284",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "There's still some other editorial changes I'd like to make, like using single-letter variable names for scalars in all operations consistently, but this is just a start. \r\n\r\ncc @nirvantyagi for \ud83d\udc40 on the updated security consideration section near the end",
      "createdAt": "2021-09-29T22:44:22Z",
      "updatedAt": "2022-01-22T15:16:27Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "56dc5dfe922686462b34f7089adc3877ec57f0b8",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/focus-poprf",
      "headRefOid": "723473e622b7c9cf230849bd2d1cd699496b1f35",
      "closedAt": "2021-10-14T17:26:50Z",
      "mergedAt": "2021-10-14T17:26:49Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "cc8976938c08e25d22c349c67acef4b09cc7f11f"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@alxdavids, @armfazh: please review!",
          "createdAt": "2021-10-04T19:26:23Z",
          "updatedAt": "2021-10-04T19:26:23Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "ack: Added to my list.",
          "createdAt": "2021-10-06T17:57:20Z",
          "updatedAt": "2021-10-06T17:57:20Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Ping @alxdavids?",
          "createdAt": "2021-10-12T12:41:32Z",
          "updatedAt": "2021-10-12T12:41:32Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@armfazh suggestions applied -- please let me know if more changes are required. @alxdavids, please review.",
          "createdAt": "2021-10-13T12:44:46Z",
          "updatedAt": "2021-10-13T12:44:46Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOBphpts4tzcxq",
          "commit": {
            "abbreviatedOid": "9460f7a"
          },
          "author": "nirvantyagi",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "Looks good! I made a comment regarding whether you want to describe the state q-Strong DH problem or the q-DL problem.",
          "createdAt": "2021-09-30T23:57:23Z",
          "updatedAt": "2021-10-01T01:01:55Z",
          "comments": [
            {
              "originalPosition": 485,
              "body": "In the context of oblivious PRFs, we also require that the output appear pseudorandom even when the adversary has access to a blind evaluation oracle.",
              "createdAt": "2021-09-30T23:57:23Z",
              "updatedAt": "2021-10-01T01:01:55Z"
            },
            {
              "originalPosition": 572,
              "body": "(namely, the pseudorandomness property)",
              "createdAt": "2021-10-01T00:00:16Z",
              "updatedAt": "2021-10-01T01:01:55Z"
            },
            {
              "originalPosition": 620,
              "body": "I'm not sure how precise you want to be here. The Q-Strong-DH problem as stated by BB04 isn't directly applicable to 3HashSDHI. You might rename this section to \"Static q-DL Assumption\" and say something like this:\r\n\r\nA side-effect of the POPRF design is that it allows instantiation of an oracle for retrieving \"strong-DH\" evaluations, in which an adversary can query a group element B and scalar c, and receive evaluation output 1/(k+c)*B. This type of oracle allows an adversary to form elements of \"repeated powers\" of the server-side secret. This \"repeated powers\" structure has been studied in terms of the q-DL problem which asks the following:\r\n\r\n~~~\r\nGiven G1, G2, h*G2, (h^2)*G2, ..., (h^Q)*G2; for G1 and G2 generators of GG.\r\n    Output h where h is an element of GF(p)\r\n~~~\r\n\r\nFor example, consider an adversary that queries the strong-DH oracle provided by the POPRF on a fixed scalar c starting with group element G2, then passes the received evaluation group element back as input for the next evaluation. If we set h = 1/(k+c), such an adversary would receive exactly the evaluations given in the q-DL problem: h*G2, (h^2)*G2, ..., (h^Q)*G2.\r\n\r\n{{TCRSTW21}} capture the power of the strong-DH oracle in the One-More Gap SDHI assumption and show, in the algebraic group model, the security of this assumption can be reduced to the security of the q-DL problem, where q is the number of queries made to the blind evaluation oracle.\r\n\r\nThe q-DL assumption has been well studied in the literature, and there exist a number of cryptanalytic studies to inform parameter choice and group instantiation (for example, {{BG04}} and {{Cheon06}}).   ...continue with what is written about parameter selection.",
              "createdAt": "2021-10-01T00:59:57Z",
              "updatedAt": "2021-10-01T01:01:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4t66KS",
          "commit": {
            "abbreviatedOid": "9460f7a"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-04T15:01:28Z",
          "updatedAt": "2021-10-04T16:18:37Z",
          "comments": [
            {
              "originalPosition": 485,
              "body": "I wonder if that's a bit too precise for this? ",
              "createdAt": "2021-10-04T15:01:28Z",
              "updatedAt": "2021-10-04T16:18:37Z"
            },
            {
              "originalPosition": 620,
              "body": "Great suggestion! I'll weave it in.",
              "createdAt": "2021-10-04T15:02:12Z",
              "updatedAt": "2021-10-04T16:18:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4uYNge",
          "commit": {
            "abbreviatedOid": "f613177"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-13T05:18:25Z",
          "updatedAt": "2021-10-13T06:54:40Z",
          "comments": [
            {
              "originalPosition": 67,
              "body": "```suggestion\r\nserver-provided key k, client-provided input x, and public input y {{TCRSTW21}}.\r\n```",
              "createdAt": "2021-10-13T05:18:25Z",
              "updatedAt": "2021-10-13T06:54:40Z"
            },
            {
              "originalPosition": 68,
              "body": "I think the same applies if we replace empty by fixed.\r\n`A POPRF with fixed input y ...`\r\n",
              "createdAt": "2021-10-13T05:20:57Z",
              "updatedAt": "2021-10-13T06:54:40Z"
            },
            {
              "originalPosition": 67,
              "body": "The reference for PO-PRF is ECS15 https://eprint.iacr.org/2015/644\r\nas they introduced the definition.",
              "createdAt": "2021-10-13T05:33:18Z",
              "updatedAt": "2021-10-13T06:54:41Z"
            },
            {
              "originalPosition": 79,
              "body": "This document introduces a POPRF protocol built upon prime-order groups based on {{TCRSTW21}}",
              "createdAt": "2021-10-13T05:35:23Z",
              "updatedAt": "2021-10-13T06:54:40Z"
            },
            {
              "originalPosition": 24,
              "body": "this sentence is odd. we haven't introduce the use of public keys in PRFs; also, the server's output is different from PRF's output.\r\n\r\n`Clients can verify that the server used a specific private key during the execution of the protocol.`\r\n",
              "createdAt": "2021-10-13T05:41:52Z",
              "updatedAt": "2021-10-13T06:54:40Z"
            },
            {
              "originalPosition": 21,
              "body": "The purpose of the protocol is not to `agree on` a public input.\r\n\r\n`A Partially-Oblivious PRF (POPRF) is an OPRF wherein both client and server are allowed to include some public input`",
              "createdAt": "2021-10-13T05:44:01Z",
              "updatedAt": "2021-10-13T06:54:40Z"
            },
            {
              "originalPosition": 82,
              "body": "```suggestion\r\nusing a known public key that serves as a commitment to the server's private\r\n```",
              "createdAt": "2021-10-13T05:44:55Z",
              "updatedAt": "2021-10-13T06:54:40Z"
            },
            {
              "originalPosition": 107,
              "body": "VPOPRF: Verifiable Partially-Oblivious Pseudorandom Function.",
              "createdAt": "2021-10-13T05:46:43Z",
              "updatedAt": "2021-10-13T06:54:40Z"
            },
            {
              "originalPosition": 112,
              "body": "```suggestion\r\n  nothing about the client's input and output.\r\n```",
              "createdAt": "2021-10-13T05:47:42Z",
              "updatedAt": "2021-10-13T06:54:40Z"
            },
            {
              "originalPosition": 144,
              "body": "maybe remove `long-term` (we haven't mentioned that key must or not be long-term).",
              "createdAt": "2021-10-13T05:50:15Z",
              "updatedAt": "2021-10-13T06:54:40Z"
            },
            {
              "originalPosition": 172,
              "body": "```suggestion\r\nresponse and produces the POPRF output.\r\n```",
              "createdAt": "2021-10-13T05:51:38Z",
              "updatedAt": "2021-10-13T06:54:40Z"
            },
            {
              "originalPosition": 196,
              "body": "```suggestion\r\n- contextString, a domain separation tag constructed during the setup phase.\r\n```",
              "createdAt": "2021-10-13T05:54:30Z",
              "updatedAt": "2021-10-13T06:54:40Z"
            },
            {
              "originalPosition": 199,
              "body": "Proof contains two values of SerializedScalar type.",
              "createdAt": "2021-10-13T05:56:02Z",
              "updatedAt": "2021-10-13T06:54:40Z"
            },
            {
              "originalPosition": 220,
              "body": "```suggestion\r\nas inputs along with public input 'info'.\r\n```",
              "createdAt": "2021-10-13T05:57:06Z",
              "updatedAt": "2021-10-13T06:54:40Z"
            },
            {
              "originalPosition": 214,
              "body": "```suggestion\r\nthe setup phase and the POPRF key pair. It has three functions, `Evaluate`,\r\n```",
              "createdAt": "2021-10-13T05:59:00Z",
              "updatedAt": "2021-10-13T06:54:40Z"
            },
            {
              "originalPosition": 306,
              "body": "Proof is a struct, isn't it?",
              "createdAt": "2021-10-13T06:02:50Z",
              "updatedAt": "2021-10-13T06:54:40Z"
            },
            {
              "originalPosition": 447,
              "body": "do we need to include an error when the inverse of `k+m` does not exist?",
              "createdAt": "2021-10-13T06:08:11Z",
              "updatedAt": "2021-10-13T06:54:40Z"
            },
            {
              "originalPosition": 471,
              "body": "```suggestion\r\nThe security properties of a POPRF protocol with functionality\r\n```",
              "createdAt": "2021-10-13T06:09:41Z",
              "updatedAt": "2021-10-13T06:54:40Z"
            },
            {
              "originalPosition": 513,
              "body": "```suggestion\r\n- Verifiability: The client must only complete execution of the protocol if\r\n```",
              "createdAt": "2021-10-13T06:12:35Z",
              "updatedAt": "2021-10-13T06:54:40Z"
            },
            {
              "originalPosition": 513,
              "body": "hmm, not so sure.",
              "createdAt": "2021-10-13T06:13:03Z",
              "updatedAt": "2021-10-13T06:54:41Z"
            },
            {
              "originalPosition": 526,
              "body": "```suggestion\r\nAny POPRF that satisfies the 'verifiability' property is known as a\r\n```",
              "createdAt": "2021-10-13T06:15:42Z",
              "updatedAt": "2021-10-13T06:54:40Z"
            },
            {
              "originalPosition": 530,
              "body": "```suggestion\r\nplace. Then the client uses this commitment to verify that the server has used the key in the\r\nprotocol. In the following, we may also refer to this\r\n```",
              "createdAt": "2021-10-13T06:17:15Z",
              "updatedAt": "2021-10-13T06:54:40Z"
            },
            {
              "originalPosition": 651,
              "body": "One-More Gap Strong Diffie-Hellman Inversion (SDHI) assumption",
              "createdAt": "2021-10-13T06:24:15Z",
              "updatedAt": "2021-10-13T06:54:40Z"
            },
            {
              "originalPosition": 651,
              "body": "Computational Diffie-Hellman (CDH) assumption",
              "createdAt": "2021-10-13T06:25:16Z",
              "updatedAt": "2021-10-13T06:54:41Z"
            },
            {
              "originalPosition": 662,
              "body": "double check if this is accurate\r\n`retrieving instances of the strong Diffie-Hellman problem, in which an adversary can query a group element`\r\n\r\n",
              "createdAt": "2021-10-13T06:35:31Z",
              "updatedAt": "2021-10-13T06:54:41Z"
            },
            {
              "originalPosition": 760,
              "body": "does the first paragraph still applies to POPRF?\r\n",
              "createdAt": "2021-10-13T06:54:26Z",
              "updatedAt": "2021-10-13T06:54:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4uZwov",
          "commit": {
            "abbreviatedOid": "2b3c751"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-13T12:31:24Z",
          "updatedAt": "2021-10-13T12:31:25Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "```suggestion\r\nthat allows client and server to provide public input to the\r\n```",
              "createdAt": "2021-10-13T12:31:24Z",
              "updatedAt": "2021-10-13T12:31:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4uZxQy",
          "commit": {
            "abbreviatedOid": "2b3c751"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-13T12:33:39Z",
          "updatedAt": "2021-10-13T12:33:39Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "Much better!",
              "createdAt": "2021-10-13T12:33:39Z",
              "updatedAt": "2021-10-13T12:33:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4uZxlf",
          "commit": {
            "abbreviatedOid": "f43ca44"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-13T12:34:47Z",
          "updatedAt": "2021-10-13T12:34:48Z",
          "comments": [
            {
              "originalPosition": 107,
              "body": "We don't use this term anywhere.",
              "createdAt": "2021-10-13T12:34:47Z",
              "updatedAt": "2021-10-13T12:34:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4uZxq3",
          "commit": {
            "abbreviatedOid": "f43ca44"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-13T12:35:05Z",
          "updatedAt": "2021-10-13T12:35:06Z",
          "comments": [
            {
              "originalPosition": 112,
              "body": "Went with 'or output'",
              "createdAt": "2021-10-13T12:35:05Z",
              "updatedAt": "2021-10-13T12:35:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4uZxun",
          "commit": {
            "abbreviatedOid": "f43ca44"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-13T12:35:18Z",
          "updatedAt": "2021-10-13T12:35:18Z",
          "comments": [
            {
              "originalPosition": 144,
              "body": "\ud83d\udc4d ",
              "createdAt": "2021-10-13T12:35:18Z",
              "updatedAt": "2021-10-13T12:35:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4uZx6t",
          "commit": {
            "abbreviatedOid": "3a87692"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-13T12:35:57Z",
          "updatedAt": "2021-10-13T12:35:58Z",
          "comments": [
            {
              "originalPosition": 196,
              "body": "Keeping as-is.",
              "createdAt": "2021-10-13T12:35:57Z",
              "updatedAt": "2021-10-13T12:35:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4uZyBd",
          "commit": {
            "abbreviatedOid": "3a87692"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-13T12:36:20Z",
          "updatedAt": "2021-10-13T12:36:21Z",
          "comments": [
            {
              "originalPosition": 199,
              "body": "These are not changes new to this PR?",
              "createdAt": "2021-10-13T12:36:20Z",
              "updatedAt": "2021-10-13T12:36:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4uZyHJ",
          "commit": {
            "abbreviatedOid": "3a87692"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-13T12:36:41Z",
          "updatedAt": "2021-10-13T12:36:42Z",
          "comments": [
            {
              "originalPosition": 214,
              "body": "Keeping as-is.",
              "createdAt": "2021-10-13T12:36:42Z",
              "updatedAt": "2021-10-13T12:36:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4uZyLc",
          "commit": {
            "abbreviatedOid": "3a87692"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-13T12:36:56Z",
          "updatedAt": "2021-10-13T12:36:56Z",
          "comments": [
            {
              "originalPosition": 220,
              "body": "\ud83d\udc4d ",
              "createdAt": "2021-10-13T12:36:56Z",
              "updatedAt": "2021-10-13T12:36:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4uZykX",
          "commit": {
            "abbreviatedOid": "3a87692"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-13T12:38:15Z",
          "updatedAt": "2021-10-13T12:38:16Z",
          "comments": [
            {
              "originalPosition": 306,
              "body": "It is, but it's encoded this way.",
              "createdAt": "2021-10-13T12:38:15Z",
              "updatedAt": "2021-10-13T12:38:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4uZyuE",
          "commit": {
            "abbreviatedOid": "3a87692"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-13T12:38:46Z",
          "updatedAt": "2021-10-13T12:38:46Z",
          "comments": [
            {
              "originalPosition": 447,
              "body": "Maybe? File a new issue?",
              "createdAt": "2021-10-13T12:38:46Z",
              "updatedAt": "2021-10-13T12:38:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4uZzAr",
          "commit": {
            "abbreviatedOid": "78e8ec8"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-13T12:39:43Z",
          "updatedAt": "2021-10-13T12:39:44Z",
          "comments": [
            {
              "originalPosition": 526,
              "body": "Keeping as-is.",
              "createdAt": "2021-10-13T12:39:43Z",
              "updatedAt": "2021-10-13T12:39:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4uZzFO",
          "commit": {
            "abbreviatedOid": "78e8ec8"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-13T12:39:58Z",
          "updatedAt": "2021-10-13T12:39:58Z",
          "comments": [
            {
              "originalPosition": 530,
              "body": "Keeping as-is.",
              "createdAt": "2021-10-13T12:39:58Z",
              "updatedAt": "2021-10-13T12:39:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4uZzd5",
          "commit": {
            "abbreviatedOid": "78e8ec8"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-13T12:41:22Z",
          "updatedAt": "2021-10-13T12:41:22Z",
          "comments": [
            {
              "originalPosition": 651,
              "body": "\ud83d\udc4d ",
              "createdAt": "2021-10-13T12:41:22Z",
              "updatedAt": "2021-10-13T12:41:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4uZzg6",
          "commit": {
            "abbreviatedOid": "78e8ec8"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-13T12:41:31Z",
          "updatedAt": "2021-10-13T12:41:32Z",
          "comments": [
            {
              "originalPosition": 662,
              "body": "Confirmed",
              "createdAt": "2021-10-13T12:41:31Z",
              "updatedAt": "2021-10-13T12:41:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4uZzmx",
          "commit": {
            "abbreviatedOid": "78e8ec8"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-13T12:41:50Z",
          "updatedAt": "2021-10-13T12:41:51Z",
          "comments": [
            {
              "originalPosition": 760,
              "body": "This is external to the protocol, so we don't need any of this text",
              "createdAt": "2021-10-13T12:41:50Z",
              "updatedAt": "2021-10-13T12:41:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4ua324",
          "commit": {
            "abbreviatedOid": "723473e"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-13T16:04:19Z",
          "updatedAt": "2021-10-13T16:04:20Z",
          "comments": [
            {
              "originalPosition": 306,
              "body": "the problem is that later in the pseudocode you access to the fields as `proof.c` and `proof.s`",
              "createdAt": "2021-10-13T16:04:20Z",
              "updatedAt": "2021-10-13T16:04:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4ubPQA",
          "commit": {
            "abbreviatedOid": "723473e"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-13T17:27:56Z",
          "updatedAt": "2021-10-13T17:27:57Z",
          "comments": [
            {
              "originalPosition": 306,
              "body": "I don't think these are incompatible -- this line says \"create a Proof struct that contains serialized c and s\". Please suggest something concrete if you think this should be done differently.",
              "createdAt": "2021-10-13T17:27:56Z",
              "updatedAt": "2021-10-13T17:27:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4ubXBt",
          "commit": {
            "abbreviatedOid": "723473e"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-13T18:00:45Z",
          "updatedAt": "2021-10-13T18:00:45Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOBphpts4ubYSI",
          "commit": {
            "abbreviatedOid": "723473e"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-13T18:06:02Z",
          "updatedAt": "2021-10-13T18:06:02Z",
          "comments": [
            {
              "originalPosition": 67,
              "body": "reference is still not updated.",
              "createdAt": "2021-10-13T18:06:02Z",
              "updatedAt": "2021-10-13T18:06:10Z"
            }
          ]
        }
      ]
    },
    {
      "number": 286,
      "id": "PR_kwDOBphpts4shzMh",
      "title": "Add Novi's VOPRF crate",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/286",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "cc @kevinlewi ",
      "createdAt": "2021-09-30T21:16:30Z",
      "updatedAt": "2022-01-22T15:16:27Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "56dc5dfe922686462b34f7089adc3877ec57f0b8",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "add-novi-voprf",
      "headRefOid": "792e0e589c1987f0c04407a4ae52727aeb8f45c3",
      "closedAt": "2021-10-04T19:26:38Z",
      "mergedAt": "2021-10-04T19:26:38Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "28800c417c97b83a82b81bdb403acd25d56bcba8"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 287,
      "id": "PR_kwDOBphpts4s5zNN",
      "title": "Fixing typo in VerifiableFinalize method signature",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/287",
      "state": "MERGED",
      "author": "FredericJacobs",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-10-07T16:26:58Z",
      "updatedAt": "2021-10-07T17:54:51Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "28800c417c97b83a82b81bdb403acd25d56bcba8",
      "headRepository": "FredericJacobs/draft-irtf-cfrg-voprf",
      "headRefName": "patch-1",
      "headRefOid": "16949a1e823f603f83ec4c96c274d945c88c72ec",
      "closedAt": "2021-10-07T17:54:51Z",
      "mergedAt": "2021-10-07T17:54:51Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "ac9f93375a11eccd8b1cfd258539f49d3ea5687c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOBphpts4uJbxu",
          "commit": {
            "abbreviatedOid": "16949a1"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "\u2764\ufe0f \ud83d\ude4f ",
          "createdAt": "2021-10-07T17:54:06Z",
          "updatedAt": "2021-10-07T17:54:06Z",
          "comments": []
        }
      ]
    },
    {
      "number": 291,
      "id": "PR_kwDOBphpts4tOH-y",
      "title": "Include input element (under HashToGroup) in Finalize DST",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/291",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #288.",
      "createdAt": "2021-10-14T20:29:19Z",
      "updatedAt": "2022-01-22T15:16:26Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "cc8976938c08e25d22c349c67acef4b09cc7f11f",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/hash-input",
      "headRefOid": "071bc5e51dc29545b64a26de2d40193e3078df71",
      "closedAt": "2022-01-21T15:45:55Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "bytemare",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hi \ud83d\udc4b \r\nTest-vectors check out with a DST for version 07 \ud83d\udc4d ",
          "createdAt": "2021-12-18T23:04:56Z",
          "updatedAt": "2021-12-18T23:04:56Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing for now. Maybe revisit this later.",
          "createdAt": "2022-01-21T15:45:55Z",
          "updatedAt": "2022-01-21T15:45:55Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOBphpts4uj5J-",
          "commit": {
            "abbreviatedOid": "071bc5e"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-15T19:13:15Z",
          "updatedAt": "2021-10-15T19:13:15Z",
          "comments": [
            {
              "originalPosition": 122,
              "body": "this secret key is not the same as the one in the JSON file.",
              "createdAt": "2021-10-15T19:13:15Z",
              "updatedAt": "2021-10-15T19:13:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4uj5RL",
          "commit": {
            "abbreviatedOid": "071bc5e"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "changes are ok; but pls double-check test vectors.",
          "createdAt": "2021-10-15T19:13:54Z",
          "updatedAt": "2021-10-19T23:30:51Z",
          "comments": []
        }
      ]
    },
    {
      "number": 292,
      "id": "PR_kwDOBphpts4tQ8vz",
      "title": "Adds an error signaling the inverse cannot be computed.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/292",
      "state": "MERGED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Adds an error signaling the inverse cannot be computed.\r\nIt follows the style and conventions in current pseudocode.",
      "createdAt": "2021-10-15T18:40:34Z",
      "updatedAt": "2021-10-25T20:48:25Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "2c266fe6d7cf12d9b97dc86453730c6735f85fa8",
      "headRepository": "armfazh/draft-irtf-cfrg-voprf",
      "headRefName": "errInv",
      "headRefOid": "1c2eeab67042db850d910646f94331c6508c4013",
      "closedAt": "2021-10-25T20:48:25Z",
      "mergedAt": "2021-10-25T20:48:25Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "30f61bbfefa5c4e72f553fd6ef2520c1bb15b865"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOBphpts4urw0-",
          "commit": {
            "abbreviatedOid": "3ef78fa"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-19T12:45:40Z",
          "updatedAt": "2021-10-19T12:45:40Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOBphpts4u-_ZH",
          "commit": {
            "abbreviatedOid": "3ef78fa"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2021-10-25T15:13:00Z",
          "updatedAt": "2021-10-25T15:13:07Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Shouldn't we actually check for zero and then raise this error? As of now, the conditions in which this is returned are not clear.",
              "createdAt": "2021-10-25T15:13:01Z",
              "updatedAt": "2021-10-25T15:13:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4u_9sW",
          "commit": {
            "abbreviatedOid": "1c2eeab"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-25T19:19:53Z",
          "updatedAt": "2021-10-25T19:19:53Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "updated now,",
              "createdAt": "2021-10-25T19:19:53Z",
              "updatedAt": "2021-10-25T19:19:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4vAShr",
          "commit": {
            "abbreviatedOid": "1c2eeab"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-25T20:48:21Z",
          "updatedAt": "2021-10-25T20:48:21Z",
          "comments": []
        }
      ]
    },
    {
      "number": 293,
      "id": "PR_kwDOBphpts4tdvtn",
      "title": "Add the oprf-ts TypeScript implementation",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/293",
      "state": "MERGED",
      "author": "rolfeschmidt",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-10-20T23:07:38Z",
      "updatedAt": "2021-10-25T15:12:20Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "cc8976938c08e25d22c349c67acef4b09cc7f11f",
      "headRepository": "rolfeschmidt/draft-irtf-cfrg-voprf",
      "headRefName": "master",
      "headRefOid": "dc39cd1ce8d11d75a69d1d807a9cecfa2057b057",
      "closedAt": "2021-10-25T15:12:20Z",
      "mergedAt": "2021-10-25T15:12:20Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "64de5cef41e87d815d39574b3eb6822d69e813a5"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOBphpts4u-_JC",
          "commit": {
            "abbreviatedOid": "dc39cd1"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-25T15:12:16Z",
          "updatedAt": "2021-10-25T15:12:16Z",
          "comments": []
        }
      ]
    },
    {
      "number": 294,
      "id": "PR_kwDOBphpts4tkayD",
      "title": "Updating Cloudflare affiliation.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/294",
      "state": "MERGED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-10-22T21:31:11Z",
      "updatedAt": "2021-10-25T18:21:33Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "cc8976938c08e25d22c349c67acef4b09cc7f11f",
      "headRepository": "armfazh/draft-irtf-cfrg-voprf",
      "headRefName": "cf",
      "headRefOid": "f91be6513d5744968c801582b859f30b9f86e222",
      "closedAt": "2021-10-25T18:21:33Z",
      "mergedAt": "2021-10-25T18:21:33Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "2c266fe6d7cf12d9b97dc86453730c6735f85fa8"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 295,
      "id": "PR_kwDOBphpts4tpBAi",
      "title": "Bump version DST to 08 and update test vectors",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/295",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "cc @bytemare, @kevinlewi ",
      "createdAt": "2021-10-25T18:21:20Z",
      "updatedAt": "2022-01-22T15:16:12Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "64de5cef41e87d815d39574b3eb6822d69e813a5",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/bump-dst",
      "headRefOid": "31128c8aef5ebd425c99ae6fa45424a37e9e1332",
      "closedAt": "2021-10-25T21:03:28Z",
      "mergedAt": "2021-10-25T21:03:28Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "63c369bb661078e040ca75ca1800b57e556f65d3"
      },
      "comments": [
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "At the end, this version string will be attached to the RFC number? I believe we were using version to match the draft version.",
          "createdAt": "2021-10-25T19:09:49Z",
          "updatedAt": "2021-10-25T19:09:49Z"
        },
        {
          "author": "kevinlewi",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Shouldn't this change the draft text as well (instead of just the code)?",
          "createdAt": "2021-10-25T21:01:33Z",
          "updatedAt": "2021-10-25T21:01:33Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@kevinlewi it does :) ",
          "createdAt": "2021-10-25T21:03:10Z",
          "updatedAt": "2021-10-25T21:03:10Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOBphpts4vAUvh",
          "commit": {
            "abbreviatedOid": "492c8a4"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-25T20:58:50Z",
          "updatedAt": "2021-10-25T20:58:50Z",
          "comments": []
        }
      ]
    },
    {
      "number": 299,
      "id": "PR_kwDOBphpts4vYIIz",
      "title": "Including voprf-ts, a typescript implementation.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/299",
      "state": "MERGED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-12-03T19:39:25Z",
      "updatedAt": "2021-12-03T19:40:34Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "6ec89bf24664fe872e230f57fe2bca26a9ef04a8",
      "headRepository": "armfazh/draft-irtf-cfrg-voprf",
      "headRefName": "implCF",
      "headRefOid": "891f52999ee820150346512a083bb119026bbd57",
      "closedAt": "2021-12-03T19:40:34Z",
      "mergedAt": "2021-12-03T19:40:34Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "95b1411627ef64b3db791c3e65305cd856e3da70"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOBphpts4xDk5r",
          "commit": {
            "abbreviatedOid": "891f529"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-12-03T19:40:27Z",
          "updatedAt": "2021-12-03T19:40:27Z",
          "comments": []
        }
      ]
    },
    {
      "number": 300,
      "id": "PR_kwDOBphpts4v2vCO",
      "title": "Add note on 2HashDH equivalence",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/300",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "See the mailing list.",
      "createdAt": "2021-12-14T22:34:13Z",
      "updatedAt": "2022-01-22T15:16:11Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "95b1411627ef64b3db791c3e65305cd856e3da70",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/2hashdh-equiv",
      "headRefOid": "443d45cf67029bc9f0e546dd1ff7f19aee04ba8e",
      "closedAt": "2022-01-07T00:32:57Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing in favor of https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/304.",
          "createdAt": "2022-01-07T00:32:57Z",
          "updatedAt": "2022-01-07T00:32:57Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOBphpts4xqar6",
          "commit": {
            "abbreviatedOid": "df91c5c"
          },
          "author": "tomrist",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-12-15T18:36:15Z",
          "updatedAt": "2021-12-15T18:36:16Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "I think it'd be slightly more precise to say: \"Because only a single choice of k leads to this undefined case, the distribution of `k'' defined via this transformation is statistically close to to the distribution of a randomly sampled `k'` as output from `GG.GenerateKeyPair`. ",
              "createdAt": "2021-12-15T18:36:15Z",
              "updatedAt": "2021-12-15T18:36:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4xuyhg",
          "commit": {
            "abbreviatedOid": "df91c5c"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-12-16T16:45:16Z",
          "updatedAt": "2021-12-16T16:45:16Z",
          "comments": [
            {
              "originalPosition": 47,
              "body": "```suggestion\r\n`k + H2(t) = 0`. Because only a single choice of `k` leads to this \r\nundefined case, the distribution of `k'` defined via this transformation\r\nis statistically close to the distribution of a randomly sampled `k'`\r\nas output from `GG.GenerateKeyPair`.\r\n```",
              "createdAt": "2021-12-16T16:45:16Z",
              "updatedAt": "2021-12-16T16:45:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4xuylR",
          "commit": {
            "abbreviatedOid": "df91c5c"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-12-16T16:45:27Z",
          "updatedAt": "2021-12-16T16:45:27Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "Fixed - thanks!",
              "createdAt": "2021-12-16T16:45:27Z",
              "updatedAt": "2021-12-16T16:45:27Z"
            }
          ]
        }
      ]
    },
    {
      "number": 301,
      "id": "PR_kwDOBphpts4wCdYr",
      "title": "Update github.com/bytemare implementations",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/301",
      "state": "MERGED",
      "author": "bytemare",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-12-18T22:26:30Z",
      "updatedAt": "2021-12-20T14:29:49Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "95b1411627ef64b3db791c3e65305cd856e3da70",
      "headRepository": "bytemare/draft-irtf-cfrg-voprf",
      "headRefName": "patch-3",
      "headRefOid": "e58f62199694776ca36c7dc79de6acfa859cc153",
      "closedAt": "2021-12-20T14:29:49Z",
      "mergedAt": "2021-12-20T14:29:49Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "5d1d957a10270f3d75750e089376d03eb2842277"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 302,
      "id": "PR_kwDOBphpts4wacYg",
      "title": "use Proof type for proof inputs",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/302",
      "state": "MERGED",
      "author": "aldenml",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-12-31T04:37:52Z",
      "updatedAt": "2022-01-03T17:08:29Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "5d1d957a10270f3d75750e089376d03eb2842277",
      "headRepository": "aldenml/draft-irtf-cfrg-voprf",
      "headRefName": "arg-type",
      "headRefOid": "399b1be95f68f976b43b8ca7d5c70874bd4769ab",
      "closedAt": "2022-01-03T15:24:00Z",
      "mergedAt": "2022-01-03T15:24:00Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "119a4d4cabd3c9d6d4f222b373d020338cb86539"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks!",
          "createdAt": "2022-01-03T15:23:54Z",
          "updatedAt": "2022-01-03T15:23:54Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOBphpts4yPGQC",
          "commit": {
            "abbreviatedOid": "399b1be"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-01-03T15:23:49Z",
          "updatedAt": "2022-01-03T15:23:49Z",
          "comments": []
        }
      ]
    },
    {
      "number": 303,
      "id": "PR_kwDOBphpts4wcHEM",
      "title": "add a c implementation to readme",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/303",
      "state": "MERGED",
      "author": "aldenml",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "For your consideration (relevant files):\r\n\r\nhttps://github.com/aldenml/ecc/blob/master/src/oprf.h\r\nhttps://github.com/aldenml/ecc/blob/master/src/oprf.c\r\nhttps://github.com/aldenml/ecc/blob/master/test/test_oprf.c\r\n",
      "createdAt": "2022-01-02T03:29:17Z",
      "updatedAt": "2022-01-03T17:08:08Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "5d1d957a10270f3d75750e089376d03eb2842277",
      "headRepository": "aldenml/draft-irtf-cfrg-voprf",
      "headRefName": "add-c-impl",
      "headRefOid": "ddcb5d78d2a40919dd1970edcf03e951728212cd",
      "closedAt": "2022-01-03T15:24:43Z",
      "mergedAt": "2022-01-03T15:24:43Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "250a71063a5fb6e598f9823b53594a7fb4ad79c4"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOBphpts4yPGaZ",
          "commit": {
            "abbreviatedOid": "ddcb5d7"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "\ud83c\udf89  nice work!",
          "createdAt": "2022-01-03T15:24:38Z",
          "updatedAt": "2022-01-03T15:24:38Z",
          "comments": []
        }
      ]
    },
    {
      "number": 304,
      "id": "PR_kwDOBphpts4wovPt",
      "title": "Major refactor to focus on three protocol variants: OPRF, VOPRF, and POPRF",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/304",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This refactor is predicated on the observation that 2HashDH and 3HashSDHI are equivalent for the non-verifiable case, and that public input is only really relevant for the verifiable case. The end result is three protocol variants in the spec: a base OPRF mode that is not variable, a 2HashDH verifiable mode without public input, and a 3HashDH-SDHI variant that is verifiable with public input. \r\n\r\nI think this is a good compromise given all the considerations involved -- threshold VOPRF, huzzah! -- and in the end yields a more understandable document. I also think the new structure should be easier to follow. \r\n\r\n[Rendered version of this PR](https://cfrg.github.io/draft-irtf-cfrg-voprf/caw/all-three/draft-irtf-cfrg-voprf.html).\r\n\r\nNote: test vectors have not yet been updated. I will do that in a followup series of commits once this gets some approvals.\r\n\r\ncc @kevinlewi, @bytemare, @hugokraw, @tomrist",
      "createdAt": "2022-01-07T00:32:49Z",
      "updatedAt": "2022-01-22T15:16:10Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "250a71063a5fb6e598f9823b53594a7fb4ad79c4",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/all-three",
      "headRefOid": "741b019b69d5dab5b6a1d5d5d018ce7b2e88a5a4",
      "closedAt": "2022-01-17T14:16:42Z",
      "mergedAt": "2022-01-17T14:16:41Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "51637f1c3ad91bc24e9986133d32a6d5599cbd89"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@armfazh suggestions applied and comments resolved. Please have another look. ",
          "createdAt": "2022-01-10T14:22:40Z",
          "updatedAt": "2022-01-10T14:22:40Z"
        },
        {
          "author": "bytemare",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@chris-wood We could piggyback #291 in this PR",
          "createdAt": "2022-01-11T14:56:34Z",
          "updatedAt": "2022-01-11T14:57:15Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@bytemare I figured we'd leave that out for now, since this is _primarily_ a refactoring.",
          "createdAt": "2022-01-11T14:57:47Z",
          "updatedAt": "2022-01-11T14:57:47Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Ready for review. @alxdavids, please let me know if you will or will not have time to review this.",
          "createdAt": "2022-01-13T00:57:34Z",
          "updatedAt": "2022-01-13T00:57:34Z"
        },
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "@chris-wood I will review it, but I won't be able to get it done until the start of next week. Does this need to move on a quicker timeframe?",
          "createdAt": "2022-01-13T13:43:52Z",
          "updatedAt": "2022-01-13T13:43:52Z"
        },
        {
          "author": "bytemare",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Forgot to confirm that vectors are ok!",
          "createdAt": "2022-01-15T20:09:48Z",
          "updatedAt": "2022-01-15T20:09:48Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOBphpts4yeT-u",
          "commit": {
            "abbreviatedOid": "d74f417"
          },
          "author": "bytemare",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-01-07T17:01:58Z",
          "updatedAt": "2022-01-07T18:31:59Z",
          "comments": [
            {
              "originalPosition": 44,
              "body": "```suggestion\r\nto provide public input to the PRF computation. This document specifies an OPRF,\r\nVOPRF, and POPRF instantiated within standard prime-order groups, including\r\n```",
              "createdAt": "2022-01-07T17:01:58Z",
              "updatedAt": "2022-01-07T18:31:59Z"
            },
            {
              "originalPosition": 42,
              "body": "```suggestion\r\nbe partially-oblivious, then called a POPRF. A POPRF allows clients and servers\r\n```",
              "createdAt": "2022-01-07T17:02:43Z",
              "updatedAt": "2022-01-07T18:31:59Z"
            },
            {
              "originalPosition": 705,
              "body": "The client also needs the server's public key for verification in that step",
              "createdAt": "2022-01-07T17:27:22Z",
              "updatedAt": "2022-01-07T18:31:59Z"
            },
            {
              "originalPosition": 728,
              "body": "The client also needs the server's public key for verification in that step",
              "createdAt": "2022-01-07T17:28:27Z",
              "updatedAt": "2022-01-07T18:31:59Z"
            },
            {
              "originalPosition": 1094,
              "body": "Why is pkS left out if it's still needed at line 1042? If the pkS is pulled from the context (vs added as an argument), it might be beneficial to clarify that here.",
              "createdAt": "2022-01-07T17:39:42Z",
              "updatedAt": "2022-01-07T18:32:00Z"
            },
            {
              "originalPosition": 1198,
              "body": "Would it be clearer precising that \"commitment\" implies that the client has the server's public key before protocol execution?",
              "createdAt": "2022-01-07T18:28:11Z",
              "updatedAt": "2022-01-07T18:32:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4yemhX",
          "commit": {
            "abbreviatedOid": "2fbaae1"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-07T18:33:00Z",
          "updatedAt": "2022-01-07T18:33:01Z",
          "comments": [
            {
              "originalPosition": 705,
              "body": "I omitted these from all functions here and assumed they're implicit, since they're provided during context creation.",
              "createdAt": "2022-01-07T18:33:01Z",
              "updatedAt": "2022-01-07T18:33:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4yemkv",
          "commit": {
            "abbreviatedOid": "2fbaae1"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-07T18:33:20Z",
          "updatedAt": "2022-01-07T18:33:20Z",
          "comments": [
            {
              "originalPosition": 1094,
              "body": "Pulled from the context, and described in a comment at the top of the {{online}} section.",
              "createdAt": "2022-01-07T18:33:20Z",
              "updatedAt": "2022-01-07T18:33:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4yemrH",
          "commit": {
            "abbreviatedOid": "2fbaae1"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-07T18:33:56Z",
          "updatedAt": "2022-01-07T18:33:56Z",
          "comments": [
            {
              "originalPosition": 1198,
              "body": "That's already the case. The client receives passes the public key in the context creation (offline) phase.",
              "createdAt": "2022-01-07T18:33:56Z",
              "updatedAt": "2022-01-07T18:33:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4yenhx",
          "commit": {
            "abbreviatedOid": "2fbaae1"
          },
          "author": "bytemare",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-01-07T18:38:38Z",
          "updatedAt": "2022-01-07T18:38:38Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOBphpts4ygrjk",
          "commit": {
            "abbreviatedOid": "2fbaae1"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "some small comments",
          "createdAt": "2022-01-10T07:04:08Z",
          "updatedAt": "2022-01-10T08:22:23Z",
          "comments": [
            {
              "originalPosition": 107,
              "body": "```suggestion\r\nFor serialization, all data structure descriptions use TLS notation {{RFC8446, Section 3}}.\r\n```",
              "createdAt": "2022-01-10T07:04:08Z",
              "updatedAt": "2022-01-10T08:22:23Z"
            },
            {
              "originalPosition": 418,
              "body": "```suggestion\r\nin the verifiable protocols, and another for verifying the proof, which is\r\n```",
              "createdAt": "2022-01-10T07:07:22Z",
              "updatedAt": "2022-01-10T08:22:24Z"
            },
            {
              "originalPosition": 608,
              "body": "```suggestion\r\n  return CT_EQUAL(expectedC, proof.c)\r\n```",
              "createdAt": "2022-01-10T07:13:27Z",
              "updatedAt": "2022-01-10T08:22:24Z"
            },
            {
              "originalPosition": 612,
              "body": "proof generation uses `ComputeCompositesFast` ",
              "createdAt": "2022-01-10T07:14:49Z",
              "updatedAt": "2022-01-10T08:22:24Z"
            },
            {
              "originalPosition": 688,
              "body": "```suggestion\r\nthe `Evaluate` function is the same key as it used to produce the server's public key.\r\n```\r\n\r\n--to me, it wasn't clear who is their.",
              "createdAt": "2022-01-10T07:19:45Z",
              "updatedAt": "2022-01-10T08:22:24Z"
            },
            {
              "originalPosition": 709,
              "body": "```suggestion\r\nThe partially-oblivious mode extends the VOPRF mode such that the client and server can additionally provide a public\r\n```\r\n\r\n-- or something like that,\r\n",
              "createdAt": "2022-01-10T07:21:42Z",
              "updatedAt": "2022-01-10T14:15:01Z"
            },
            {
              "originalPosition": 710,
              "body": "```suggestion\r\ninput `info` that is used in computing the pseudorandom function. That is, the client and server\r\n```",
              "createdAt": "2022-01-10T07:26:12Z",
              "updatedAt": "2022-01-10T08:22:24Z"
            },
            {
              "originalPosition": 786,
              "body": "what about creating a function\r\n```python\r\ndef CreateContextString(mode,suite):\r\n    return \"VOPRF08-\" || I2OSP(modeVOPRF, 1) || I2OSP(suiteID, 2)\r\n\r\n```",
              "createdAt": "2022-01-10T07:30:47Z",
              "updatedAt": "2022-01-10T08:22:24Z"
            },
            {
              "originalPosition": 796,
              "body": "include `info`?",
              "createdAt": "2022-01-10T07:31:41Z",
              "updatedAt": "2022-01-10T08:22:24Z"
            },
            {
              "originalPosition": 732,
              "body": "```suggestion\r\nEach protocol consists of an offline setup phase and an online phase,\r\n```",
              "createdAt": "2022-01-10T07:32:10Z",
              "updatedAt": "2022-01-10T08:22:24Z"
            },
            {
              "originalPosition": 949,
              "body": "I think the `InverseError` doesn't trigger in this function.",
              "createdAt": "2022-01-10T07:40:22Z",
              "updatedAt": "2022-01-10T08:22:24Z"
            },
            {
              "originalPosition": 1024,
              "body": "```suggestion\r\nThe POPRF protocol begins with the client blinding its input, using the same\r\n```",
              "createdAt": "2022-01-10T07:42:57Z",
              "updatedAt": "2022-01-10T08:22:24Z"
            },
            {
              "originalPosition": 1106,
              "body": "```suggestion\r\ndef Finalize(input, blind, evaluatedElement, blindedElement, proof, info):\r\n```",
              "createdAt": "2022-01-10T07:48:33Z",
              "updatedAt": "2022-01-10T08:22:24Z"
            },
            {
              "originalPosition": 1140,
              "body": "```suggestion\r\n- `VerifyError`: Verifiable OPRF proof verification failed; {{voprf}} and {{poprf}}.\r\n```",
              "createdAt": "2022-01-10T07:51:43Z",
              "updatedAt": "2022-01-10T08:22:24Z"
            },
            {
              "originalPosition": 1218,
              "body": "nizk was not defined before.",
              "createdAt": "2022-01-10T07:55:45Z",
              "updatedAt": "2022-01-10T08:22:24Z"
            },
            {
              "originalPosition": 1272,
              "body": "```suggestion\r\nLaunching this attack would require 2^(p/2-log\\_2(Q)/2) bits of memory.\r\n```",
              "createdAt": "2022-01-10T07:58:32Z",
              "updatedAt": "2022-01-10T08:22:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4yiWCK",
          "commit": {
            "abbreviatedOid": "9b69efa"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-10T14:09:36Z",
          "updatedAt": "2022-01-10T14:09:37Z",
          "comments": [
            {
              "originalPosition": 608,
              "body": "```suggestion\r\n  return expectedC == c\r\n```",
              "createdAt": "2022-01-10T14:09:36Z",
              "updatedAt": "2022-01-10T14:09:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4yiWJ2",
          "commit": {
            "abbreviatedOid": "9b69efa"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-10T14:10:00Z",
          "updatedAt": "2022-01-10T14:10:00Z",
          "comments": [
            {
              "originalPosition": 608,
              "body": "proof.c is a byte string, whereas expectedC is a scalar. I'll just make this `==`.",
              "createdAt": "2022-01-10T14:10:00Z",
              "updatedAt": "2022-01-10T14:10:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4yiWox",
          "commit": {
            "abbreviatedOid": "eeb066a"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-10T14:11:39Z",
          "updatedAt": "2022-01-10T14:11:40Z",
          "comments": [
            {
              "originalPosition": 614,
              "body": "```suggestion\r\nThe definition of `ComputeComposites` is given below.\r\n```",
              "createdAt": "2022-01-10T14:11:39Z",
              "updatedAt": "2022-01-10T14:11:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4yiXOE",
          "commit": {
            "abbreviatedOid": "9fe0439"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-10T14:13:37Z",
          "updatedAt": "2022-01-10T14:13:38Z",
          "comments": [
            {
              "originalPosition": 694,
              "body": "```suggestion\r\nthe `Evaluate` function is the same private key corresponding to the server's public key.\r\n```",
              "createdAt": "2022-01-10T14:13:37Z",
              "updatedAt": "2022-01-10T14:13:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4yiYlD",
          "commit": {
            "abbreviatedOid": "81a8cae"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-10T14:18:12Z",
          "updatedAt": "2022-01-10T14:18:12Z",
          "comments": [
            {
              "originalPosition": 786,
              "body": "The purpose of these setup functions is to create the context string and then the context used for the online portion of the protocol, so I think it's better as-is. But your comment wasn't really clear to me, so maybe I'm missing your point?",
              "createdAt": "2022-01-10T14:18:12Z",
              "updatedAt": "2022-01-10T14:18:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4yiY25",
          "commit": {
            "abbreviatedOid": "81a8cae"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-10T14:19:03Z",
          "updatedAt": "2022-01-10T14:19:04Z",
          "comments": [
            {
              "originalPosition": 796,
              "body": "No, since `info` can change for each invocation of the online phase, we omit it here. The offline phase should include everything that doesn't change during the online phase.",
              "createdAt": "2022-01-10T14:19:04Z",
              "updatedAt": "2022-01-10T14:19:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4yiY-h",
          "commit": {
            "abbreviatedOid": "81a8cae"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-10T14:19:24Z",
          "updatedAt": "2022-01-10T14:19:25Z",
          "comments": [
            {
              "originalPosition": 949,
              "body": "Yep, copy pasta. Thanks.",
              "createdAt": "2022-01-10T14:19:24Z",
              "updatedAt": "2022-01-10T14:19:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4yiY_b",
          "commit": {
            "abbreviatedOid": "81a8cae"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-10T14:19:27Z",
          "updatedAt": "2022-01-10T14:19:28Z",
          "comments": [
            {
              "originalPosition": 949,
              "body": "```suggestion\r\nErrors: DeserializeError\r\n```",
              "createdAt": "2022-01-10T14:19:27Z",
              "updatedAt": "2022-01-10T14:19:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4yiZvP",
          "commit": {
            "abbreviatedOid": "a1cb36f"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-10T14:21:45Z",
          "updatedAt": "2022-01-10T14:21:45Z",
          "comments": [
            {
              "originalPosition": 1216,
              "body": "```suggestion\r\nat once whilst only constructing one proof object. This is enabled using\r\n```",
              "createdAt": "2022-01-10T14:21:45Z",
              "updatedAt": "2022-01-10T14:21:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4yjBX0",
          "commit": {
            "abbreviatedOid": "66bf44f"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-10T16:23:50Z",
          "updatedAt": "2022-01-10T16:23:51Z",
          "comments": [
            {
              "originalPosition": 786,
              "body": "my point is to factor out the context creation in a function, so we don't need to update in six different points when, for example, switching from `VOPRF-08` to `VOPRF-09`.",
              "createdAt": "2022-01-10T16:23:50Z",
              "updatedAt": "2022-01-10T16:23:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4yjBzw",
          "commit": {
            "abbreviatedOid": "66bf44f"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-10T16:25:23Z",
          "updatedAt": "2022-01-10T16:25:24Z",
          "comments": [
            {
              "originalPosition": 786,
              "body": "I don't think that's an improvement in clarity. In any case, it's editorial, so I think we can resolve this.",
              "createdAt": "2022-01-10T16:25:23Z",
              "updatedAt": "2022-01-10T16:25:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4ykRN3",
          "commit": {
            "abbreviatedOid": "62c5f4b"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-10T21:20:20Z",
          "updatedAt": "2022-01-10T21:20:20Z",
          "comments": [
            {
              "originalPosition": 1218,
              "body": "not resolved yet",
              "createdAt": "2022-01-10T21:20:20Z",
              "updatedAt": "2022-01-10T21:20:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4ykRzr",
          "commit": {
            "abbreviatedOid": "62c5f4b"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-01-10T21:21:47Z",
          "updatedAt": "2022-01-10T21:21:47Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOBphpts4ykhlZ",
          "commit": {
            "abbreviatedOid": "62c5f4b"
          },
          "author": "bytemare",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-10T22:47:49Z",
          "updatedAt": "2022-01-10T22:47:50Z",
          "comments": [
            {
              "originalPosition": 786,
              "body": "I agree with @armfazh, and to me, it reads more clearly :)",
              "createdAt": "2022-01-10T22:47:49Z",
              "updatedAt": "2022-01-10T22:47:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4ykjMq",
          "commit": {
            "abbreviatedOid": "62c5f4b"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-10T22:57:46Z",
          "updatedAt": "2022-01-10T22:57:46Z",
          "comments": [
            {
              "originalPosition": 786,
              "body": "Fair enough -- done!",
              "createdAt": "2022-01-10T22:57:46Z",
              "updatedAt": "2022-01-10T22:57:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4ykvm7",
          "commit": {
            "abbreviatedOid": "4a414a0"
          },
          "author": "bytemare",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-11T00:35:28Z",
          "updatedAt": "2022-01-11T02:24:43Z",
          "comments": [
            {
              "originalPosition": 56,
              "body": "Should `I2OSP(len(compositeDST), 2)` then be rather `I2OSP(len(compositeDST), 1)` ?",
              "createdAt": "2022-01-11T00:35:28Z",
              "updatedAt": "2022-01-11T02:24:43Z"
            },
            {
              "originalPosition": 56,
              "body": "The same comment applies to all the other dst that are not suffixed with the context string anymore",
              "createdAt": "2022-01-11T00:36:09Z",
              "updatedAt": "2022-01-11T02:24:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4yk9Pv",
          "commit": {
            "abbreviatedOid": "4a414a0"
          },
          "author": "bytemare",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "~There seems to be an error for the client and server in VOPRF when calling generate and verify functions.\r\nThe `C` argument in GenerateProof should be evaluated elements, and `D` argument blinded. Same for verification.\r\nR is the blinded element, Z is the evaluation.~ ",
          "createdAt": "2022-01-11T02:42:32Z",
          "updatedAt": "2022-01-11T02:59:05Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOBphpts4yn0GL",
          "commit": {
            "abbreviatedOid": "4a414a0"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-11T14:58:30Z",
          "updatedAt": "2022-01-11T14:58:30Z",
          "comments": [
            {
              "originalPosition": 56,
              "body": "Yep, good idea!",
              "createdAt": "2022-01-11T14:58:30Z",
              "updatedAt": "2022-01-11T14:58:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4yu6I6",
          "commit": {
            "abbreviatedOid": "741b019"
          },
          "author": "kevinlewi",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-01-13T01:13:23Z",
          "updatedAt": "2022-01-13T01:13:23Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOBphpts4y4MAO",
          "commit": {
            "abbreviatedOid": "741b019"
          },
          "author": "bytemare",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-01-15T20:09:05Z",
          "updatedAt": "2022-01-15T20:09:05Z",
          "comments": []
        }
      ]
    },
    {
      "number": 308,
      "id": "PR_kwDOBphpts4w8nLL",
      "title": "DeriveKeyPair and serialization improvements",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/308",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Based on #304. Addresses #306.\r\n\r\n[Rendered version of this PR.](https://cfrg.github.io/draft-irtf-cfrg-voprf/caw/dkp-and-serialize/draft-irtf-cfrg-voprf.html)",
      "createdAt": "2022-01-13T16:53:53Z",
      "updatedAt": "2022-01-22T15:16:10Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "99f9894c4dd8e4ba3b23c3170b6652b6684c7cd5",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/dkp-and-serialize",
      "headRefOid": "b13fc8a650518e4cabe21d3f4e08526d6c72cc4c",
      "closedAt": "2022-01-18T00:33:10Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@armfazh @bytemare this is ready for review.",
          "createdAt": "2022-01-17T14:19:02Z",
          "updatedAt": "2022-01-17T14:19:02Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for the reviews! I'll update based on the latest comments and then update test vectors, too. (This will change how keys are derived, so the vectors will change.)",
          "createdAt": "2022-01-17T23:45:27Z",
          "updatedAt": "2022-01-17T23:45:27Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "This branch is incredibly screwed up. Blowing it away and starting anew.",
          "createdAt": "2022-01-18T00:33:10Z",
          "updatedAt": "2022-01-18T00:33:10Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOBphpts4y4IdX",
          "commit": {
            "abbreviatedOid": "7d6dd6b"
          },
          "author": "bytemare",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-01-15T16:53:30Z",
          "updatedAt": "2022-01-15T16:54:21Z",
          "comments": [
            {
              "originalPosition": 220,
              "body": "```suggestion\r\nUpon receipt, servers process `blindedElement` using the `Evaluate` function described\r\n```",
              "createdAt": "2022-01-15T16:53:30Z",
              "updatedAt": "2022-01-15T16:54:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4y8yjL",
          "commit": {
            "abbreviatedOid": "be5a9f3"
          },
          "author": "bytemare",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-17T21:40:00Z",
          "updatedAt": "2022-01-17T21:40:00Z",
          "comments": [
            {
              "originalPosition": 167,
              "body": "`counter` is bound between 0 and 255, so technically an unsigned 8-bit integer, a byte. Does it make sense to explicitly I2OSP it to one byte?",
              "createdAt": "2022-01-17T21:40:00Z",
              "updatedAt": "2022-01-17T21:40:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4y80bf",
          "commit": {
            "abbreviatedOid": "be5a9f3"
          },
          "author": "bytemare",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-01-17T21:58:44Z",
          "updatedAt": "2022-01-17T22:19:52Z",
          "comments": [
            {
              "originalPosition": 219,
              "body": "```suggestion\r\nClients store `blind` locally, and send `blindedElement` to the server for evaluation.\r\n```",
              "createdAt": "2022-01-17T21:58:44Z",
              "updatedAt": "2022-01-17T22:19:52Z"
            },
            {
              "originalPosition": 428,
              "body": "This part of the section\r\n\r\n> Some OPRF variants specified in this document have fallible operations. For example, `Finalize`\r\nand `Evaluate` can fail if any element received from the peer fails deserialization.\r\n\r\nmight need to be updated, since Finalize doesn't deserialize anymore",
              "createdAt": "2022-01-17T22:19:36Z",
              "updatedAt": "2022-01-17T22:19:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4y83Ub",
          "commit": {
            "abbreviatedOid": "be5a9f3"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-01-17T22:29:13Z",
          "updatedAt": "2022-01-17T22:47:36Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "we can leverage the TLS syntax notation to express these types.",
              "createdAt": "2022-01-17T22:29:13Z",
              "updatedAt": "2022-01-17T22:47:36Z"
            },
            {
              "originalPosition": 72,
              "body": "not really agree with this arrow. it was implicit that the client obtained server's key by any method, not precisely server sending its key to client.\r\ne.g. Client could get key by pre-installation.",
              "createdAt": "2022-01-17T22:33:16Z",
              "updatedAt": "2022-01-17T22:47:36Z"
            },
            {
              "originalPosition": 72,
              "body": "otoh, does the server require to use a certificate that proves ownership of the pair of keys? (*I was told the protocol is PKI-free)",
              "createdAt": "2022-01-17T22:35:09Z",
              "updatedAt": "2022-01-17T22:47:36Z"
            },
            {
              "originalPosition": 120,
              "body": "```suggestion\r\nto as `ID`; see {{ciphersuites}} for the registry of initial values.\r\n```\r\n",
              "createdAt": "2022-01-17T22:35:54Z",
              "updatedAt": "2022-01-17T22:47:36Z"
            },
            {
              "originalPosition": 143,
              "body": "```suggestion\r\nusing the following function, which accepts a randomly generated seed of length\r\n```",
              "createdAt": "2022-01-17T22:36:55Z",
              "updatedAt": "2022-01-17T22:47:36Z"
            },
            {
              "originalPosition": 272,
              "body": "Z is not defined",
              "createdAt": "2022-01-17T22:40:55Z",
              "updatedAt": "2022-01-17T22:47:36Z"
            },
            {
              "originalPosition": 322,
              "body": "```suggestion\r\nErrors: VerifyError\r\n```",
              "createdAt": "2022-01-17T22:42:45Z",
              "updatedAt": "2022-01-17T22:47:36Z"
            },
            {
              "originalPosition": 404,
              "body": "as U is a multiple of G, \r\nso blinded is a multiple of evaluated element, (double check)",
              "createdAt": "2022-01-17T22:45:26Z",
              "updatedAt": "2022-01-17T22:47:36Z"
            },
            {
              "originalPosition": 426,
              "body": "this means that applications can define its own serialization for objects? or applications must comply with the serialization recommended in this doc? not clear to me.",
              "createdAt": "2022-01-17T22:47:17Z",
              "updatedAt": "2022-01-17T22:47:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4y85HH",
          "commit": {
            "abbreviatedOid": "be5a9f3"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-17T22:50:26Z",
          "updatedAt": "2022-01-17T22:50:26Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "I don't think that's appropriate. These are just byte strings, not length prefixed byte strings or anything.",
              "createdAt": "2022-01-17T22:50:26Z",
              "updatedAt": "2022-01-17T22:50:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4y85Mj",
          "commit": {
            "abbreviatedOid": "be5a9f3"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-17T22:51:30Z",
          "updatedAt": "2022-01-17T22:51:30Z",
          "comments": [
            {
              "originalPosition": 72,
              "body": "This simply means the client gets the public key from the server, somehow. That can be preinstallation.",
              "createdAt": "2022-01-17T22:51:30Z",
              "updatedAt": "2022-01-17T22:51:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4y85X_",
          "commit": {
            "abbreviatedOid": "7041d2a"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-17T22:53:44Z",
          "updatedAt": "2022-01-17T22:53:44Z",
          "comments": [
            {
              "originalPosition": 426,
              "body": "It means that how applications choose to expose the external API is up to them. Does that clarify?",
              "createdAt": "2022-01-17T22:53:44Z",
              "updatedAt": "2022-01-17T22:53:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4y85km",
          "commit": {
            "abbreviatedOid": "7041d2a"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-17T22:56:12Z",
          "updatedAt": "2022-01-17T22:56:12Z",
          "comments": [
            {
              "originalPosition": 426,
              "body": "last question, does the wire format is no more a MUST in order to be compliant with this draft?",
              "createdAt": "2022-01-17T22:56:12Z",
              "updatedAt": "2022-01-17T22:56:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4y85pr",
          "commit": {
            "abbreviatedOid": "45d922a"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-17T22:57:16Z",
          "updatedAt": "2022-01-17T22:57:16Z",
          "comments": [
            {
              "originalPosition": 404,
              "body": "are you saying this is incorrect as is?",
              "createdAt": "2022-01-17T22:57:16Z",
              "updatedAt": "2022-01-17T22:57:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4y85uL",
          "commit": {
            "abbreviatedOid": "45d922a"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-17T22:58:09Z",
          "updatedAt": "2022-01-17T22:58:09Z",
          "comments": [
            {
              "originalPosition": 426,
              "body": "Applications that use the OPRF define how to send protocol messages. They can use the wire formats (serialized forms) defined here or something else.",
              "createdAt": "2022-01-17T22:58:09Z",
              "updatedAt": "2022-01-17T22:58:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4y86hG",
          "commit": {
            "abbreviatedOid": "45d922a"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-17T23:08:14Z",
          "updatedAt": "2022-01-17T23:08:14Z",
          "comments": [
            {
              "originalPosition": 404,
              "body": "I double-checked, it's fine because of the inverse of `t` ",
              "createdAt": "2022-01-17T23:08:14Z",
              "updatedAt": "2022-01-17T23:08:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4y87WR",
          "commit": {
            "abbreviatedOid": "45d922a"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-17T23:19:32Z",
          "updatedAt": "2022-01-17T23:19:33Z",
          "comments": [
            {
              "originalPosition": 167,
              "body": "Yeah, I think so. We don't say the type of counter is an unsigned byte, so this makes it explicit. ",
              "createdAt": "2022-01-17T23:19:33Z",
              "updatedAt": "2022-01-17T23:19:33Z"
            }
          ]
        }
      ]
    },
    {
      "number": 309,
      "id": "PR_kwDOBphpts4xHdcZ",
      "title": "fix capitalization GO -> Go",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/309",
      "state": "MERGED",
      "author": "bytemare",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-01-16T23:32:13Z",
      "updatedAt": "2022-01-17T14:16:15Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "250a71063a5fb6e598f9823b53594a7fb4ad79c4",
      "headRepository": "bytemare/draft-irtf-cfrg-voprf",
      "headRefName": "patch-5",
      "headRefOid": "15d22abde1d9bda437ee5e83466c5b79bde13f20",
      "closedAt": "2022-01-17T14:16:15Z",
      "mergedAt": "2022-01-17T14:16:15Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "f478d866523b73142f7df716921f1ef4a5149a0e"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 310,
      "id": "PR_kwDOBphpts4xLObZ",
      "title": "Add DeriveKeyPair and separate serialization code from main protocol routines",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/310",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #306.\r\n\r\n[Rendered version of this PR](https://cfrg.github.io/draft-irtf-cfrg-voprf/caw/dkp-with-serialization/draft-irtf-cfrg-voprf.html)\r\n\r\ncc @bytemare, @kevinlewi, @tomrist",
      "createdAt": "2022-01-18T00:35:20Z",
      "updatedAt": "2022-01-22T15:16:08Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "master",
      "baseRefOid": "99f9894c4dd8e4ba3b23c3170b6652b6684c7cd5",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/dkp-with-serialization",
      "headRefOid": "efaf06a895764b11ec2093fea47b6e5f0f41cca0",
      "closedAt": "2022-01-21T15:42:20Z",
      "mergedAt": "2022-01-21T15:42:20Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "aea43e012b4b7a39b265ee39c01b43ac92b087bc"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@armfazh @bytemare: reference implementation and test vectors updated!",
          "createdAt": "2022-01-19T14:58:11Z",
          "updatedAt": "2022-01-19T14:58:11Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "We can avoid the counter overflows by using an iterated hashing instead.\r\nwhat about something like this?\r\n```python\r\n1. T = 000000\r\n2. contextString = CreateContextString(mode, suiteID)\r\n3. deriveInput = seed || I2OSP(len(info), 2) || info\r\n4. MSG = deriveInput || T\r\n5. DST = \"DeriveKeyPair\" || contextString\r\n6. skS = GG.HashToScalar(MSG, DST)  \r\n7. if skS == 0\r\n8.    T = Hash(T)\r\n9.    return to Step 4.\r\nA. pks = ScalarBaseMult(skS)\r\nB. return (skS,pkS).\r\n```",
          "createdAt": "2022-01-19T20:55:01Z",
          "updatedAt": "2022-01-19T20:55:01Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> We can avoid the counter overflows by using an iterated hashing instead.\r\n\r\nProbability of counter overflow is negligible, so I don't think we need to be overly clever with the construction here. It seems best to match key generation routines used for other algorithms like [HPKE](https://cfrg.github.io/draft-irtf-cfrg-hpke/draft-irtf-cfrg-hpke.html#name-derivekeypair). I suggest we stick with what's here in this PR, and file this iterated hash variant as an issue to possibly do later on. ",
          "createdAt": "2022-01-19T21:39:17Z",
          "updatedAt": "2022-01-19T21:39:17Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOBphpts4y-h0n",
          "commit": {
            "abbreviatedOid": "4997f9a"
          },
          "author": "daxpedda",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-18T10:56:14Z",
          "updatedAt": "2022-01-18T10:56:15Z",
          "comments": [
            {
              "originalPosition": 185,
              "body": "Is there interest in making this function infallible?\r\n\r\nIANA cryptographer, but could `HashToScalar` be changed to always return a non-zero scalar by using the reduction mod n-1 plus one method. My assumption here is actually that `HashToScalar` returning zero scalars is actually a problem in other functions.\r\n\r\n@armfazh mentions here https://github.com/cfrg/draft-irtf-cfrg-opaque/issues/298#issuecomment-1006936162 that `HashToScalar` shouldn't be subject to change, may I ask why?\r\n\r\nI made a list of problems here https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/307 that are affected by `HashToScalar` returning a zero scalar.",
              "createdAt": "2022-01-18T10:56:14Z",
              "updatedAt": "2022-01-18T10:56:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4zE5Hr",
          "commit": {
            "abbreviatedOid": "2a85106"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-19T14:59:02Z",
          "updatedAt": "2022-01-19T14:59:02Z",
          "comments": [
            {
              "originalPosition": 185,
              "body": "The probably that this fails is negligible, so it's pretty reasonable for implementations to panic if this occurs. In any case, we'll address fallible functions separately, not in this PR.",
              "createdAt": "2022-01-19T14:59:02Z",
              "updatedAt": "2022-01-19T14:59:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4zGc-H",
          "commit": {
            "abbreviatedOid": "2a85106"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-19T20:48:59Z",
          "updatedAt": "2022-01-19T20:49:00Z",
          "comments": [
            {
              "originalPosition": 185,
              "body": "> @armfazh mentions here [cfrg/draft-irtf-cfrg-opaque#298 (comment)](https://github.com/cfrg/draft-irtf-cfrg-opaque/issues/298#issuecomment-1006936162) that `HashToScalar` shouldn't be subject to change, may I ask why?\r\n\r\nWe would like the hash function behaves as a random oracle to the entire domain, in this case the whole field including zero.\r\nThis is similar to a regular hash function, for example, we cannot require that SHA-256 must not return 0.",
              "createdAt": "2022-01-19T20:48:59Z",
              "updatedAt": "2022-01-19T20:49:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4zHGU3",
          "commit": {
            "abbreviatedOid": "2a85106"
          },
          "author": "daxpedda",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-20T00:08:54Z",
          "updatedAt": "2022-01-20T00:08:55Z",
          "comments": [
            {
              "originalPosition": 185,
              "body": "> In any case, we'll address fallible functions separately, not in this PR.\r\n\r\nSounds good!",
              "createdAt": "2022-01-20T00:08:55Z",
              "updatedAt": "2022-01-20T00:08:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4zIwZK",
          "commit": {
            "abbreviatedOid": "2a85106"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-01-20T08:49:21Z",
          "updatedAt": "2022-01-20T08:49:21Z",
          "comments": []
        }
      ]
    },
    {
      "number": 311,
      "id": "PR_kwDOBphpts4xcbIR",
      "title": "Use a separate info string for the DeriveKeyPair info",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/311",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Previously, the same `info` string was used for the POPRF evaluation and DeriveKeyPair function. Separating them is an improvement.\r\n\r\ncc @bytemare ",
      "createdAt": "2022-01-22T15:27:57Z",
      "updatedAt": "2022-01-27T20:54:56Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "main",
      "baseRefOid": "aea43e012b4b7a39b265ee39c01b43ac92b087bc",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/separate-dkp-info",
      "headRefOid": "3913a9cb7934bcfa0c506f0313df2dab833edab6",
      "closedAt": "2022-01-22T21:50:08Z",
      "mergedAt": "2022-01-22T21:50:08Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "4edd1fc6347d85c366a062c05cb01a4eaeb5fc5e"
      },
      "comments": [
        {
          "author": "bytemare",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We're good! \ud83d\udc4d ",
          "createdAt": "2022-01-22T21:14:31Z",
          "updatedAt": "2022-01-22T21:14:31Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 312,
      "id": "PR_kwDOBphpts4xlTdF",
      "title": "Update version constant and test vectors",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/312",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "cc @bytemare, @kevinlewi ",
      "createdAt": "2022-01-25T21:00:30Z",
      "updatedAt": "2022-01-27T20:54:55Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "main",
      "baseRefOid": "4edd1fc6347d85c366a062c05cb01a4eaeb5fc5e",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/update-version-constant",
      "headRefOid": "545d9cdaf3313b62d2885950bf7ed1be0a11bba4",
      "closedAt": "2022-01-25T21:58:58Z",
      "mergedAt": "2022-01-25T21:58:58Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "0cd44667b7b359b81baac68cb3229181ba460326"
      },
      "comments": [
        {
          "author": "bytemare",
          "authorAssociation": "CONTRIBUTOR",
          "body": "\u2705 lgtm!",
          "createdAt": "2022-01-25T21:57:20Z",
          "updatedAt": "2022-01-25T21:57:20Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOBphpts4zbveX",
          "commit": {
            "abbreviatedOid": "545d9cd"
          },
          "author": "bytemare",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-01-25T21:57:02Z",
          "updatedAt": "2022-01-25T21:57:02Z",
          "comments": []
        }
      ]
    },
    {
      "number": 313,
      "id": "PR_kwDOBphpts4xloiK",
      "title": "Make Blind fallible",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/313",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "@hugokraw, can you please have a look at this change? The [rationale](https://github.com/cfrg/draft-irtf-cfrg-voprf/issues/307#issuecomment-1021694128) is in issue #307. \r\n\r\nCloses #307.\r\n\r\ncc @bytemare, @kevinlewi ",
      "createdAt": "2022-01-25T23:17:21Z",
      "updatedAt": "2022-01-27T20:54:54Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "main",
      "baseRefOid": "0cd44667b7b359b81baac68cb3229181ba460326",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/blind-error",
      "headRefOid": "f5e0ed2bf4685c877fcb313ebbc345ed40e78ffa",
      "closedAt": "2022-01-26T12:56:26Z",
      "mergedAt": "2022-01-26T12:56:25Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "660fe02e04ea3440ece686e44332f050b19c295a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOBphpts4zcCkj",
          "commit": {
            "abbreviatedOid": "f5e0ed2"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-01-25T23:46:08Z",
          "updatedAt": "2022-01-25T23:46:08Z",
          "comments": []
        }
      ]
    },
    {
      "number": 314,
      "id": "PR_kwDOBphpts4xoUM0",
      "title": "Make Blind fail earlier for the POPRF",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/314",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Note that this check on the client is equivalent to the server, since `(skS + t) == 0` is only true iff `pkS + tG = skS*G + tG = (skS + t)G` is the identity element.\r\n\r\nCloses #307.\r\n\r\ncc @bytemare, @kevinlewi ",
      "createdAt": "2022-01-26T17:33:04Z",
      "updatedAt": "2022-01-27T20:54:53Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "main",
      "baseRefOid": "e6a6cfc8da77e3fbc4d9411a73c2e8ea87fe7211",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/blind-fallible-poprf",
      "headRefOid": "cfafa4fa2e157275f87019f9848d51ca9ebf8ed4",
      "closedAt": "2022-01-27T17:03:46Z",
      "mergedAt": "2022-01-27T17:03:46Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "74477afddaf9f409d1264b85d3d42b38553239f5"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "(Please ignore @bifurcation!)",
          "createdAt": "2022-01-26T17:34:50Z",
          "updatedAt": "2022-01-26T17:34:50Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOBphpts4zgSoq",
          "commit": {
            "abbreviatedOid": "f88522d"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-26T21:04:19Z",
          "updatedAt": "2022-01-26T21:04:20Z",
          "comments": [
            {
              "originalPosition": 61,
              "body": "```suggestion\r\n  Element blindedElement\r\n```\r\n```suggestion\r\n  Element blindedElement\r\n  Element tweakedKey\r\n```",
              "createdAt": "2022-01-26T21:04:20Z",
              "updatedAt": "2022-01-26T21:04:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4zgSud",
          "commit": {
            "abbreviatedOid": "3992fc1"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-26T21:04:43Z",
          "updatedAt": "2022-01-26T21:04:44Z",
          "comments": [
            {
              "originalPosition": 84,
              "body": "```suggestion\r\nClients store the outputs `blind` and `tweakedKey` locally and send `blindedElement` to\r\n```",
              "createdAt": "2022-01-26T21:04:43Z",
              "updatedAt": "2022-01-26T21:04:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4zgSzN",
          "commit": {
            "abbreviatedOid": "3992fc1"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-26T21:05:03Z",
          "updatedAt": "2022-01-26T21:05:04Z",
          "comments": [
            {
              "originalPosition": 119,
              "body": "```suggestion\r\ndef Finalize(input, blind, evaluatedElement, blindedElement, proof, info, tweakedKey):\r\n```",
              "createdAt": "2022-01-26T21:05:03Z",
              "updatedAt": "2022-01-26T21:05:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4zkMU-",
          "commit": {
            "abbreviatedOid": "707c1e1"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-27T16:28:29Z",
          "updatedAt": "2022-01-27T16:48:18Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "```suggestion\r\nidentity element, as well as certain public inputs that map to invalid\r\n```",
              "createdAt": "2022-01-27T16:28:29Z",
              "updatedAt": "2022-01-27T16:48:18Z"
            },
            {
              "originalPosition": 89,
              "body": "```suggestion\r\n```\r\n--remove Finalize",
              "createdAt": "2022-01-27T16:31:42Z",
              "updatedAt": "2022-01-27T16:48:18Z"
            },
            {
              "originalPosition": 72,
              "body": "once client arrives to this line, it follows \r\n```\r\nT + pkS     == 0\r\nT + skS * G == 0\r\nskS * G     == -T\r\nskS * G     == - m * G\r\nskS         == -m\r\n```\r\nand the server's private key is found.\r\nis this a concern for the server?",
              "createdAt": "2022-01-27T16:45:38Z",
              "updatedAt": "2022-01-27T16:48:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4zkUp0",
          "commit": {
            "abbreviatedOid": "bc95d70"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-27T16:50:46Z",
          "updatedAt": "2022-01-27T16:50:46Z",
          "comments": [
            {
              "originalPosition": 72,
              "body": "No, I don't think so, since it's an exceptional case and there's nothing a server can really do to prevent it.",
              "createdAt": "2022-01-27T16:50:46Z",
              "updatedAt": "2022-01-27T16:50:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4zkXQ9",
          "commit": {
            "abbreviatedOid": "cfafa4f"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-01-27T16:58:48Z",
          "updatedAt": "2022-01-27T16:58:48Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOBphpts4zkYLd",
          "commit": {
            "abbreviatedOid": "cfafa4f"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-27T17:01:36Z",
          "updatedAt": "2022-01-27T17:01:36Z",
          "comments": [
            {
              "originalPosition": 72,
              "body": "(just adding more info for later)\r\nhitting the case `m==skS` is kind of different from freely searching on the entire space.\r\n`m` is generated by `HashToField`, so `m` is in the image of the hash function.",
              "createdAt": "2022-01-27T17:01:36Z",
              "updatedAt": "2022-01-27T17:01:36Z"
            }
          ]
        }
      ]
    },
    {
      "number": 318,
      "id": "PR_kwDOBphpts4xvevn",
      "title": "First cut at Patton's review",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/318",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Thanks for the review, @cjpatton! This PR tracks changes to most of your suggestions, with some tweaks.\r\n\r\nI took most of your editorial and protocol change suggestion as they were great. I reworked the security considerations section to remove unhelpful jargon and focus on applications and implementers. I'd like to call your attention to the {{limits}} section, which tries to collapse much of the previous text into a straightforward description of the static DH problem and its impact on the group security level.\r\n\r\nRight now I don't have any good ideas for sharpening the application guidance against this problem beyond what's there. (\"If you admit an oracle and want more than 128 bits of security, use a larger group.\") I would welcome concrete suggestions for improving the text here.\r\n\r\ncc @tomrist, @nirvantyagi for \ud83d\udc40  on the new security considerations, too, which you can find [rendered here](https://cfrg.github.io/draft-irtf-cfrg-voprf/caw/all-three/draft-irtf-cfrg-voprf.html).\r\n\r\ncc @kevinlewi, @bytemare for \ud83d\udc40  regarding other editorial changes.\r\n\r\nCloses #317.\r\nCloses #316.\r\nCloses #315.",
      "createdAt": "2022-01-28T14:57:12Z",
      "updatedAt": "2022-01-31T15:41:39Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "main",
      "baseRefOid": "0254da8f5935b89a3120ccc0f24f1c1291d3ca81",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/patton-edits",
      "headRefOid": "1aee0e31ed4d20f56275db11c24df4c1fa7b408c",
      "closedAt": "2022-01-31T15:41:39Z",
      "mergedAt": "2022-01-31T15:41:39Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "58e615be1b14bc848ece1ca62c12ea2a32893f49"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> 1. For applications we know about, such as OPAQUE or PrivacyPass, say whether the static DH is exposed, and how.\r\n\r\nAs above, I don't think we should describe that in this document.\r\n\r\n> 2. Say that applications can partially mitigate attacks that use a static-DH oracle by rate-limiting requests from clients.\r\n> 3. RECOMMEND frequent key rotation.\r\n\r\nThese can be harmful for some applications, so I'll just note them as possibilities.\r\n",
          "createdAt": "2022-01-28T18:35:04Z",
          "updatedAt": "2022-01-28T18:35:04Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@cjpatton addressed your comments!",
          "createdAt": "2022-01-28T18:36:15Z",
          "updatedAt": "2022-01-28T18:36:15Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOBphpts4zo_W6",
          "commit": {
            "abbreviatedOid": "66656d1"
          },
          "author": "cjpatton",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Lookin' good. Some concrete suggestions for security considerations:\r\n\r\n1. For applications we know about, such as OPAQUE or PrivacyPass, say whether the static DH is exposed, and how.\r\n2. Say that applications can partially mitigate attacks that use a static-DH oracle by rate-limiting requests from clients.\r\n3. RECOMMEND frequent key rotation. ",
          "createdAt": "2022-01-28T16:32:47Z",
          "updatedAt": "2022-01-28T17:05:21Z",
          "comments": [
            {
              "originalPosition": 101,
              "body": "`0` is used as the identity in every section except this one. I suggest s/I/0/, here and below.",
              "createdAt": "2022-01-28T16:35:56Z",
              "updatedAt": "2022-01-28T17:05:21Z"
            },
            {
              "originalPosition": 161,
              "body": "This notation is not ideal since `G` is also used as the basepoint. I think `GG` works perfectly fine.",
              "createdAt": "2022-01-28T16:36:46Z",
              "updatedAt": "2022-01-28T17:05:21Z"
            },
            {
              "originalPosition": 718,
              "body": "The signature of `F` is slightly different for POPRF. I would just note this here and mention that the same security considerations apply.",
              "createdAt": "2022-01-28T16:45:38Z",
              "updatedAt": "2022-01-28T17:05:21Z"
            },
            {
              "originalPosition": 890,
              "body": "```suggestion\r\nto the POPRF construction of {{section-about-poprf}}.)\r\n```",
              "createdAt": "2022-01-28T16:47:06Z",
              "updatedAt": "2022-01-28T17:05:21Z"
            },
            {
              "originalPosition": 896,
              "body": "One question I had here, which is not addressed by this change: What's the relevance of this equivalence to security? Does this equivalence imply that the security analysis of {{JKK14}} applies to a variant of the POPRF with fixed `info`? That would certainly be useful, especially if the former analysis is not in the generic group model.\r\n\r\nIf this is the case, then I would say it.",
              "createdAt": "2022-01-28T16:50:30Z",
              "updatedAt": "2022-01-28T17:05:21Z"
            },
            {
              "originalPosition": 958,
              "body": "I don't think this qualification adds much, since there's no a priori reason the attacker shouldn't be able to make a number of queries that divides either `p-1` or `p+1`.\r\n\r\n```suggestion\r\nbits, where Q is the number of `Evalute()` calls made by the attacker.\r\n```",
              "createdAt": "2022-01-28T16:53:40Z",
              "updatedAt": "2022-01-28T17:05:21Z"
            },
            {
              "originalPosition": 952,
              "body": "This paragraph ought to say what the attacks do. In particular, Brown-Gallant-04's goal is to recover the key.",
              "createdAt": "2022-01-28T16:55:02Z",
              "updatedAt": "2022-01-28T17:05:21Z"
            },
            {
              "originalPosition": 971,
              "body": "What's an example of an application for which this oracle is not exposed? Take OPAQUE: The client's first step in the authentication flow is evaluate the OPRF under the client's password so that it can decrypt its envelope. Isn't the static-DH problem inevitable here?\r\n\r\nWhat about PrivacyPass?",
              "createdAt": "2022-01-28T16:58:43Z",
              "updatedAt": "2022-01-28T17:05:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4zpf-Q",
          "commit": {
            "abbreviatedOid": "158dbd1"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-28T18:25:30Z",
          "updatedAt": "2022-01-28T18:25:30Z",
          "comments": [
            {
              "originalPosition": 971,
              "body": "I don't think we want to get into application specific details here. Those can and should be dealt with by those relevant protocols.",
              "createdAt": "2022-01-28T18:25:30Z",
              "updatedAt": "2022-01-28T18:25:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4zpgIC",
          "commit": {
            "abbreviatedOid": "158dbd1"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-28T18:26:12Z",
          "updatedAt": "2022-01-28T18:26:12Z",
          "comments": [
            {
              "originalPosition": 952,
              "body": "Good point!",
              "createdAt": "2022-01-28T18:26:12Z",
              "updatedAt": "2022-01-28T18:26:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4zpgnh",
          "commit": {
            "abbreviatedOid": "158dbd1"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-28T18:28:28Z",
          "updatedAt": "2022-01-28T18:28:28Z",
          "comments": [
            {
              "originalPosition": 161,
              "body": "I'll fix by making the base point `B` to match RFC8032 =)",
              "createdAt": "2022-01-28T18:28:28Z",
              "updatedAt": "2022-01-28T18:28:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4zphYY",
          "commit": {
            "abbreviatedOid": "6f23ce2"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-28T18:31:55Z",
          "updatedAt": "2022-01-28T18:31:56Z",
          "comments": [
            {
              "originalPosition": 896,
              "body": "That's not quite it (and indeed not true, since the proof generation is different). Rather, it's to say that if you need verifiability, use the POPRF, since it also works for the VOPRF when the public input is fixed. I'll clarify.",
              "createdAt": "2022-01-28T18:31:56Z",
              "updatedAt": "2022-01-28T18:31:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4zphvB",
          "commit": {
            "abbreviatedOid": "6f23ce2"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-28T18:33:34Z",
          "updatedAt": "2022-01-28T18:33:35Z",
          "comments": [
            {
              "originalPosition": 896,
              "body": "Actually, it is somewhat obsolete now. Removing entirely.",
              "createdAt": "2022-01-28T18:33:35Z",
              "updatedAt": "2022-01-28T18:33:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4zqYKT",
          "commit": {
            "abbreviatedOid": "1a7958b"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-28T21:59:15Z",
          "updatedAt": "2022-01-28T23:22:03Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "```suggestion\r\nto the server's public key the client knows in advance. A Partially-Oblivious PRF (POPRF)\r\n```\r\n\r\nit may be wordy, but it is clearer to me. -- reshape if needed.",
              "createdAt": "2022-01-28T21:59:16Z",
              "updatedAt": "2022-01-28T23:22:03Z"
            },
            {
              "originalPosition": 36,
              "body": "the proof object is mentioned at POPRF, it's better to introduce it here first.",
              "createdAt": "2022-01-28T22:02:06Z",
              "updatedAt": "2022-01-28T23:22:03Z"
            },
            {
              "originalPosition": 118,
              "body": "```suggestion\r\nprime-order group.\r\n```\r\nIt was already hinted at lines 352, and 362.",
              "createdAt": "2022-01-28T22:08:35Z",
              "updatedAt": "2022-01-28T23:22:03Z"
            },
            {
              "originalPosition": 145,
              "body": "```suggestion\r\n- DeserializeElement(x): A member function of `Group` that maps an array of bytes\r\n  `x` to a group element `A`, or fails if the input is not a valid\r\n```",
              "createdAt": "2022-01-28T22:11:24Z",
              "updatedAt": "2022-01-28T23:22:03Z"
            },
            {
              "originalPosition": 141,
              "body": "array of bytes vs byte array.\r\n\r\n```suggestion\r\n- SerializeElement(A): A member function of `Group` that maps a group element `A`\r\n  to a unique byte array `buf` of fixed length `Ne`. The output type of\r\n```\r\n",
              "createdAt": "2022-01-28T22:12:52Z",
              "updatedAt": "2022-01-28T23:25:25Z"
            },
            {
              "originalPosition": 265,
              "body": "B variable collides with generator B\r\nwe can remove generator B by defining\r\n`ScalarBaseMult(s) := s * G.Generator()`",
              "createdAt": "2022-01-28T22:19:31Z",
              "updatedAt": "2022-01-28T23:22:03Z"
            },
            {
              "originalPosition": 597,
              "body": "```suggestion\r\nand hash functions. It also includes implementation details for\r\n```",
              "createdAt": "2022-01-28T22:25:39Z",
              "updatedAt": "2022-01-28T23:22:03Z"
            },
            {
              "originalPosition": 665,
              "body": "```suggestion\r\nThe DeserializeElement function recovers a group element from an array of\r\nbytes produced by a serialization function. This function validates that the element is a proper member\r\n```\r\n\r\nit is important to remark that Deserialize only works for inputs produced by a Serialization function, and not on arbitrary-length input strings. (reshape if needed)",
              "createdAt": "2022-01-28T22:30:26Z",
              "updatedAt": "2022-01-28T23:22:03Z"
            },
            {
              "originalPosition": 677,
              "body": "```suggestion\r\nwhich returns false if the input is invalid. If this function returns false,\r\n```",
              "createdAt": "2022-01-28T22:31:11Z",
              "updatedAt": "2022-01-28T23:22:03Z"
            },
            {
              "originalPosition": 682,
              "body": "idem as for DeserializeElement",
              "createdAt": "2022-01-28T22:32:12Z",
              "updatedAt": "2022-01-28T23:22:03Z"
            },
            {
              "originalPosition": 689,
              "body": "```suggestion\r\na little-endian integer, is a valud between 0 and `Order()-1`.\r\n```",
              "createdAt": "2022-01-28T23:08:42Z",
              "updatedAt": "2022-01-28T23:22:03Z"
            },
            {
              "originalPosition": 785,
              "body": "does unlinkability also applies to VOPRF? or it is a property of POPRF only? ",
              "createdAt": "2022-01-28T23:12:52Z",
              "updatedAt": "2022-01-28T23:22:03Z"
            },
            {
              "originalPosition": 969,
              "body": "```suggestion\r\nAs a result of this class of attack, choosing prime-order groups with a\r\n```",
              "createdAt": "2022-01-28T23:14:42Z",
              "updatedAt": "2022-01-28T23:22:03Z"
            },
            {
              "originalPosition": 970,
              "body": "```suggestion\r\n128-bit security level instantiates an OPRF with a reduced security level of 128-(log\\_2(Q)/2) bits of security.\r\n```",
              "createdAt": "2022-01-28T23:15:40Z",
              "updatedAt": "2022-01-28T23:22:03Z"
            },
            {
              "originalPosition": 974,
              "body": "Reinforcing cjpatton's point: how does a user knows whether applications expose or not this oracle.\r\nI think, the oracle is there by construction. Applications/users must be aware of it, and must protect following the recommendations given above.\r\nSo, in which situation _the oracle is not made available_?",
              "createdAt": "2022-01-28T23:19:54Z",
              "updatedAt": "2022-01-28T23:22:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4zqjOI",
          "commit": {
            "abbreviatedOid": "1a7958b"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-28T23:23:14Z",
          "updatedAt": "2022-01-28T23:23:14Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "```suggestion\r\nto the server's public key the client knows. A Partially-Oblivious PRF (POPRF)\r\n```",
              "createdAt": "2022-01-28T23:23:14Z",
              "updatedAt": "2022-01-28T23:23:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4zqjSU",
          "commit": {
            "abbreviatedOid": "1a7958b"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-28T23:23:57Z",
          "updatedAt": "2022-01-28T23:23:57Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "There's no requirement for the client to know the key in advance, so I didn't take that suggestion.",
              "createdAt": "2022-01-28T23:23:57Z",
              "updatedAt": "2022-01-28T23:23:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4zqjZZ",
          "commit": {
            "abbreviatedOid": "1038d57"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-28T23:24:59Z",
          "updatedAt": "2022-01-28T23:25:00Z",
          "comments": [
            {
              "originalPosition": 145,
              "body": "This is the same as byte array, so I'm rejecting this suggestion.",
              "createdAt": "2022-01-28T23:24:59Z",
              "updatedAt": "2022-01-28T23:25:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4zqjx9",
          "commit": {
            "abbreviatedOid": "9649bb3"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-28T23:28:58Z",
          "updatedAt": "2022-01-28T23:28:58Z",
          "comments": [
            {
              "originalPosition": 665,
              "body": "Well, no, that's not true. One can _try_ to call deserialize on arbitrary strings, and it should fail in those cases.",
              "createdAt": "2022-01-28T23:28:58Z",
              "updatedAt": "2022-01-28T23:28:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4zqj1T",
          "commit": {
            "abbreviatedOid": "9649bb3"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-28T23:29:31Z",
          "updatedAt": "2022-01-28T23:29:31Z",
          "comments": [
            {
              "originalPosition": 682,
              "body": "See comment above.",
              "createdAt": "2022-01-28T23:29:31Z",
              "updatedAt": "2022-01-28T23:29:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4zqkTD",
          "commit": {
            "abbreviatedOid": "9649bb3"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-28T23:34:25Z",
          "updatedAt": "2022-01-28T23:34:25Z",
          "comments": [
            {
              "originalPosition": 785,
              "body": "The example here is just for the VOPRF. Unlinkability isn't a property for the OPRF. Rather, it's input secrecy. I'll add this property.",
              "createdAt": "2022-01-28T23:34:25Z",
              "updatedAt": "2022-01-28T23:34:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4zqkZk",
          "commit": {
            "abbreviatedOid": "9649bb3"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-28T23:35:32Z",
          "updatedAt": "2022-01-28T23:35:32Z",
          "comments": [
            {
              "originalPosition": 974,
              "body": "In applications that don't give an _attacker_ (malicious client) access to the oracle, for example.",
              "createdAt": "2022-01-28T23:35:32Z",
              "updatedAt": "2022-01-28T23:35:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4zqkfA",
          "commit": {
            "abbreviatedOid": "9539378"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-01-28T23:36:28Z",
          "updatedAt": "2022-01-28T23:36:28Z",
          "comments": [
            {
              "originalPosition": 265,
              "body": "Good point -- I just rewrote the ScalarBaseMult definition.",
              "createdAt": "2022-01-28T23:36:28Z",
              "updatedAt": "2022-01-28T23:36:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts4zqlXi",
          "commit": {
            "abbreviatedOid": "1aee0e3"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-01-28T23:46:54Z",
          "updatedAt": "2022-01-28T23:46:54Z",
          "comments": []
        }
      ]
    },
    {
      "number": 319,
      "id": "PR_kwDOBphpts4x2MfZ",
      "title": "Change log for -09",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/319",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Last step before cutting the new version.\r\n\r\ncc @bytemare, @kevinlewi ",
      "createdAt": "2022-01-31T15:50:03Z",
      "updatedAt": "2022-01-31T20:26:57Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "main",
      "baseRefOid": "6cb9adbc7e8728f911c661469f5557ade5d15f86",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/change-log-09",
      "headRefOid": "ab2bf3908df25f0de9d9e0698b8ee592eaff4df0",
      "closedAt": "2022-01-31T20:26:57Z",
      "mergedAt": "2022-01-31T20:26:57Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "4122e5a4f7b5106e4bf80a4b03a5019b66dbbce6"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOBphpts4zwm-W",
          "commit": {
            "abbreviatedOid": "ab2bf39"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-01-31T20:26:24Z",
          "updatedAt": "2022-01-31T20:26:24Z",
          "comments": []
        }
      ]
    },
    {
      "number": 325,
      "id": "PR_kwDOBphpts4yGqtl",
      "title": "Fix batch test vector generation",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/325",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Small bug in the test generation code. Thanks, @kevinlewi!\r\n\r\nThis change trickles down and affects other test vectors due to the way we fix the RNG seed for tests. (It depends on the order in which `random` is invoked, which is silly and something we should fix. I'll do that in #322.)\r\n\r\nCloses #323.\r\nCloses #324.",
      "createdAt": "2022-02-04T21:00:27Z",
      "updatedAt": "2022-02-07T15:25:41Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "main",
      "baseRefOid": "f1f8e0fb1f1d1eceb6cd40875240289b514c1674",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/poprf-batch",
      "headRefOid": "fd2a79a3a6173373ef3a612a3a4ed2bb57d547a7",
      "closedAt": "2022-02-07T15:25:41Z",
      "mergedAt": "2022-02-07T15:25:41Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "81deca6a23e4d196c5c7d4e9c62cb6f5185edd99"
      },
      "comments": [
        {
          "author": "bytemare",
          "authorAssociation": "CONTRIBUTOR",
          "body": "lgtm \u2705 ",
          "createdAt": "2022-02-07T00:53:44Z",
          "updatedAt": "2022-02-07T00:53:44Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 327,
      "id": "PR_kwDOBphpts4yH_FR",
      "title": "Note that some errors occur with negligible probability",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/327",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "cc @hugokraw in case he has opinions on any additional language that should be said here. (We should deal with the error case in OPAQUE separately, I think.)",
      "createdAt": "2022-02-05T22:59:06Z",
      "updatedAt": "2022-02-08T21:45:19Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "main",
      "baseRefOid": "f1f8e0fb1f1d1eceb6cd40875240289b514c1674",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/error-probability",
      "headRefOid": "bb9acdf0c2eecf639b469c9e016f0166130df61d",
      "closedAt": "2022-02-08T21:45:19Z",
      "mergedAt": "2022-02-08T21:45:19Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "14b407d0371a523fd9ec1e748f69de3d5e01835e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOBphpts40Pm9-",
          "commit": {
            "abbreviatedOid": "bb9acdf"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-02-08T18:48:46Z",
          "updatedAt": "2022-02-08T18:48:52Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "I think the line with the example is not needed,",
              "createdAt": "2022-02-08T18:48:46Z",
              "updatedAt": "2022-02-08T18:48:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts40QSdu",
          "commit": {
            "abbreviatedOid": "bb9acdf"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-08T21:45:10Z",
          "updatedAt": "2022-02-08T21:45:11Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "Since this isn't new text, I'll leave it as-is.",
              "createdAt": "2022-02-08T21:45:11Z",
              "updatedAt": "2022-02-08T21:45:11Z"
            }
          ]
        }
      ]
    },
    {
      "number": 328,
      "id": "PR_kwDOBphpts4yQ2ot",
      "title": "Note input limits",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/328",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #326.",
      "createdAt": "2022-02-08T21:57:49Z",
      "updatedAt": "2022-02-08T22:23:29Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "main",
      "baseRefOid": "080a53576cd55b79fb8366968b2714c34e9c0a1b",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/input-limits",
      "headRefOid": "b842827ead2ab3cf97c59aae64ce2c62ae7339b4",
      "closedAt": "2022-02-08T22:23:29Z",
      "mergedAt": "2022-02-08T22:23:29Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "5aadeabe04ce7589673e8fc239a3fd75fd18f2a6"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOBphpts40QaNH",
          "commit": {
            "abbreviatedOid": "b842827"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-02-08T22:20:54Z",
          "updatedAt": "2022-02-08T22:20:54Z",
          "comments": []
        }
      ]
    },
    {
      "number": 329,
      "id": "PR_kwDOBphpts4yQ3gG",
      "title": "Update to draft-10 to incorporate small fixes",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/329",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "cc @bytemare, @kevinlewi, @stef",
      "createdAt": "2022-02-08T22:02:49Z",
      "updatedAt": "2022-02-09T01:15:59Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "main",
      "baseRefOid": "080a53576cd55b79fb8366968b2714c34e9c0a1b",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/draft10",
      "headRefOid": "d467801ab070896a32cd27a22651b328427db62a",
      "closedAt": "2022-02-08T23:15:41Z",
      "mergedAt": "2022-02-08T23:15:40Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "47a5998e463667dc5b85465e6beb3b0da27cc110"
      },
      "comments": [
        {
          "author": "stef",
          "authorAssociation": "CONTRIBUTOR",
          "body": "did anything else had an effect on the testvectors besides `s/VOPRF09/VOPRF10/`?",
          "createdAt": "2022-02-08T23:50:39Z",
          "updatedAt": "2022-02-08T23:50:39Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Nope, that\u2019s the only change!\n\n> On Feb 8, 2022, at 3:50 PM, Stefan Marsiske ***@***.***> wrote:\n> \n> \n> did anything else had an effect on the testvectors besides s/VOPRF09/VOPRF10/?\n> \n> \u2014\n> Reply to this email directly, view it on GitHub, or unsubscribe.\n> You are receiving this because you modified the open/close state.\n> \n\n",
          "createdAt": "2022-02-08T23:51:13Z",
          "updatedAt": "2022-02-08T23:51:13Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Uhm, I have no idea how this happened, but apparently -09 didn't actually register in the datatracker? I need to back out this change. But I'll update the change log for -09 accordingly. Sorry, folks.",
          "createdAt": "2022-02-09T01:15:59Z",
          "updatedAt": "2022-02-09T01:15:59Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOBphpts40QZzA",
          "commit": {
            "abbreviatedOid": "d467801"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-02-08T22:18:58Z",
          "updatedAt": "2022-02-08T22:18:58Z",
          "comments": []
        }
      ]
    },
    {
      "number": 330,
      "id": "PR_kwDOBphpts4yRSG1",
      "title": "Revert \"Update to draft-10 to incorporate small fixes\"",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/330",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Reverts cfrg/draft-irtf-cfrg-voprf#329",
      "createdAt": "2022-02-09T01:16:19Z",
      "updatedAt": "2022-02-09T01:16:30Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "main",
      "baseRefOid": "130be377350b519c06fd29b78bb2cb15dcb094b6",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "revert-329-caw/draft10",
      "headRefOid": "f1d8339716ff55d1ac60d3ddb8e0f0756efa90ce",
      "closedAt": "2022-02-09T01:16:30Z",
      "mergedAt": "2022-02-09T01:16:30Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "a6cbe570fc2b1ecfd8229a8d3472edeaa1391c78"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 331,
      "id": "PR_kwDOBphpts4yVWtn",
      "title": "added libopaque to integrations in /README.md",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/331",
      "state": "MERGED",
      "author": "stef",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-02-09T23:18:01Z",
      "updatedAt": "2022-02-09T23:18:52Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "main",
      "baseRefOid": "1f1f0f1bed4dd77c8d4e6f8dd27f6df4ae9257ba",
      "headRepository": "stef/draft-irtf-cfrg-voprf",
      "headRefName": "main",
      "headRefOid": "3a02011b49fb3298d386d706c51865dcab67372f",
      "closedAt": "2022-02-09T23:18:52Z",
      "mergedAt": "2022-02-09T23:18:52Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "015e34156e33daf1d75b693064952aed0f694f20"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOBphpts40V7xM",
          "commit": {
            "abbreviatedOid": "3a02011"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-02-09T23:18:48Z",
          "updatedAt": "2022-02-09T23:18:48Z",
          "comments": []
        }
      ]
    },
    {
      "number": 332,
      "id": "PR_kwDOBphpts4y41vM",
      "title": "Plumb randomness into the test vector generation code",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/332",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This should address the previous problem where each test vector changed based on the order in which previous test vectors were invoked. Each test vector gets a freshly seeded test DRNG.\r\n\r\ncc @stef, as this is what I'll propose using higher up in OPAQUE to fix the randomness issue once and for all.",
      "createdAt": "2022-02-15T22:35:04Z",
      "updatedAt": "2022-02-16T17:29:03Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "main",
      "baseRefOid": "015e34156e33daf1d75b693064952aed0f694f20",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/plumb-randomness",
      "headRefOid": "2efd198d014e890be6e26937fe3bbcb4328a122a",
      "closedAt": "2022-02-16T17:29:03Z",
      "mergedAt": "2022-02-16T17:29:03Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "912e08dcc03d6fa043051015ff885bdfad6b4061"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOBphpts40vlpo",
          "commit": {
            "abbreviatedOid": "2efd198"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-02-16T17:28:55Z",
          "updatedAt": "2022-02-16T17:28:55Z",
          "comments": []
        }
      ]
    },
    {
      "number": 334,
      "id": "PR_kwDOBphpts42ghIe",
      "title": "Updates voprf-ts and CIRCL libraries",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/334",
      "state": "MERGED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-04-20T17:49:54Z",
      "updatedAt": "2022-04-26T00:58:34Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "main",
      "baseRefOid": "f5bc8b84e693ecedc8f5c642a5d909e6587120e9",
      "headRepository": "armfazh/draft-irtf-cfrg-voprf",
      "headRefName": "updateLib",
      "headRefOid": "c43b77c8a83e192fbfc839595d458764f97b890b",
      "closedAt": "2022-04-26T00:58:34Z",
      "mergedAt": "2022-04-26T00:58:34Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "9e4039587344c0e48ea8e9ae982cfd8a46ee5f83"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOBphpts44x3XV",
          "commit": {
            "abbreviatedOid": "c43b77c"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-04-26T00:58:30Z",
          "updatedAt": "2022-04-26T00:58:30Z",
          "comments": []
        }
      ]
    },
    {
      "number": 336,
      "id": "PR_kwDOBphpts42_D8F",
      "title": "Include more details in DLEQ proof section.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/336",
      "state": "MERGED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "It addresses the following items from [review](https://mailarchive.ietf.org/arch/msg/crypto-panel/QXC3drh1hs-XGkXyjwyCj_pFNNI/)\r\n\r\n>   2.  2.2 on page 10 says \"... proving that the discrete log of two values is identical in zero knowledge\" without ever defining discrete log and zero knowledge proofs. The authors say that their construction is built on Chaum-Pedersen proof, but no further details are provided.\r\n>   4.  2.2.1 on page 11 ends the description of GenerateProof without ever describing why the output of the function [c , s] is a discrete log equivalence proof and why is it zero knowledge.\r\n>   5.  2.1 on page 8 starts talking about groups and then suddenly mentions finite fields without explaining what they are. It becomes clear reading further down that the authors need them for scalars. It would have been less confusing if they simply used the set of integers {0, 1, ..., p-1}.\r\n\r\n",
      "createdAt": "2022-04-28T23:46:04Z",
      "updatedAt": "2022-05-07T12:44:19Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "main",
      "baseRefOid": "c6b5c6ba717c2220bd1524fa2a9e42008ae1487b",
      "headRepository": "armfazh/draft-irtf-cfrg-voprf",
      "headRefName": "dleqText",
      "headRefOid": "bf23712e7a31aa50d6d3cd38c6ac657c0360f12c",
      "closedAt": "2022-05-07T12:44:19Z",
      "mergedAt": "2022-05-07T12:44:19Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "e937bd8607f7e13751d8dae152d3d07110eac959"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOBphpts45H4S1",
          "commit": {
            "abbreviatedOid": "1b31cab"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Requesting some additional details, and removing of some seemingly unnecessary text.",
          "createdAt": "2022-04-29T22:37:25Z",
          "updatedAt": "2022-04-29T22:43:43Z",
          "comments": [
            {
              "originalPosition": 43,
              "body": "```suggestion\r\nB with respect to the base A.\r\n```",
              "createdAt": "2022-04-29T22:37:26Z",
              "updatedAt": "2022-04-29T22:43:43Z"
            },
            {
              "originalPosition": 61,
              "body": "```suggestion\r\nnothing beyond the truthiness of the statement claimed by the prover,\r\nthe proof is zero-knowledge.\r\n```",
              "createdAt": "2022-04-29T22:38:36Z",
              "updatedAt": "2022-04-29T22:43:43Z"
            },
            {
              "originalPosition": 63,
              "body": "```suggestion\r\nThis section describes a noninteractive zero-knowledge proof for discrete\r\n```",
              "createdAt": "2022-04-29T22:38:57Z",
              "updatedAt": "2022-04-29T22:43:43Z"
            },
            {
              "originalPosition": 64,
              "body": "```suggestion\r\nlogarithm equivalence (DLEQ). A DLEQ proof demonstrates that two pairs of group elements\r\n```",
              "createdAt": "2022-04-29T22:39:22Z",
              "updatedAt": "2022-04-29T22:43:43Z"
            },
            {
              "originalPosition": 65,
              "body": "```suggestion\r\nhave the same discrete logarithm without revealing the discrete logarithm.\r\n```",
              "createdAt": "2022-04-29T22:39:31Z",
              "updatedAt": "2022-04-29T22:43:43Z"
            },
            {
              "originalPosition": 70,
              "body": "```suggestion\r\n```\r\nI think we can note this where the proof is actually used.",
              "createdAt": "2022-04-29T22:41:34Z",
              "updatedAt": "2022-04-29T22:43:43Z"
            },
            {
              "originalPosition": 78,
              "body": "```suggestion\r\nThe specific DLEQ proof construction presented below is built on the Chaum-Pedersen {{ChaumPedersen}}\r\n```",
              "createdAt": "2022-04-29T22:42:23Z",
              "updatedAt": "2022-04-29T23:43:05Z"
            },
            {
              "originalPosition": 80,
              "body": "Can we point to the specific section of this thesis where the batching technique is used?",
              "createdAt": "2022-04-29T22:43:04Z",
              "updatedAt": "2022-04-29T22:43:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts45H-58",
          "commit": {
            "abbreviatedOid": "8c81342"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-04-29T23:43:58Z",
          "updatedAt": "2022-04-29T23:43:58Z",
          "comments": [
            {
              "originalPosition": 61,
              "body": "it looks that the definition of `truthiness` is not accurate [Webster](https://www.merriam-webster.com/dictionary/truthiness)\r\n[`veracity`](https://www.merriam-webster.com/dictionary/veracity) is more formal ",
              "createdAt": "2022-04-29T23:43:58Z",
              "updatedAt": "2022-04-29T23:43:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts45ICVr",
          "commit": {
            "abbreviatedOid": "1b31cab"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-04-30T01:03:24Z",
          "updatedAt": "2022-04-30T01:03:25Z",
          "comments": [
            {
              "originalPosition": 80,
              "body": "done",
              "createdAt": "2022-04-30T01:03:24Z",
              "updatedAt": "2022-04-30T01:03:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts45IUrp",
          "commit": {
            "abbreviatedOid": "5ea6682"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-04-30T11:55:04Z",
          "updatedAt": "2022-04-30T11:55:04Z",
          "comments": [
            {
              "originalPosition": 61,
              "body": "While veracity fits the mold, I think truthiness is more understandable to most people, so I would prefer to use that. ",
              "createdAt": "2022-04-30T11:55:04Z",
              "updatedAt": "2022-04-30T11:55:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts45MkWR",
          "commit": {
            "abbreviatedOid": "64d7250"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-02T21:44:41Z",
          "updatedAt": "2022-05-02T21:44:41Z",
          "comments": [
            {
              "originalPosition": 70,
              "body": "```suggestion\r\nnothing beyond the validity of the statement claimed by the prover,\r\n```\r\n\r\nI wonder if this is even _more_ clear?",
              "createdAt": "2022-05-02T21:44:41Z",
              "updatedAt": "2022-05-02T21:44:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts45MuaJ",
          "commit": {
            "abbreviatedOid": "64d7250"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-02T22:47:39Z",
          "updatedAt": "2022-05-02T22:47:40Z",
          "comments": [
            {
              "originalPosition": 70,
              "body": "It sounds clearer, but it according to [this](https://web.stanford.edu/~bobonich/terms.concepts/valid.sound.html) is not correct.\r\n\r\n> Validity and invalidity apply only to arguments, not statements.\r\n\r\nThis workaround is a safe option:\r\n\r\n`If the verifier learns nothing other than the statement claimed by the prover is true, the proof is zero-knowledge.`\r\n\r\n",
              "createdAt": "2022-05-02T22:47:39Z",
              "updatedAt": "2022-05-02T22:47:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts45Oi-f",
          "commit": {
            "abbreviatedOid": "64d7250"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-03T09:17:49Z",
          "updatedAt": "2022-05-03T09:17:49Z",
          "comments": [
            {
              "originalPosition": 70,
              "body": "That works, but here's a slight rephrasing: `If the verifier learns nothing other than whether the statement claimed by the prover is true or false, the proof is zero-knowledge.`",
              "createdAt": "2022-05-03T09:17:49Z",
              "updatedAt": "2022-05-03T09:17:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts45RANV",
          "commit": {
            "abbreviatedOid": "64d7250"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-03T17:47:30Z",
          "updatedAt": "2022-05-03T17:47:30Z",
          "comments": [
            {
              "originalPosition": 70,
              "body": "applied that suggestion",
              "createdAt": "2022-05-03T17:47:30Z",
              "updatedAt": "2022-05-03T17:47:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts45ib6_",
          "commit": {
            "abbreviatedOid": "8793af3"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-05-07T12:44:05Z",
          "updatedAt": "2022-05-07T12:44:09Z",
          "comments": [
            {
              "originalPosition": 86,
              "body": "```suggestion\r\nby Jarecki, et al. {{JKK14}} and uses the product test batching technique\r\n```",
              "createdAt": "2022-05-07T12:44:05Z",
              "updatedAt": "2022-05-07T12:44:09Z"
            }
          ]
        }
      ]
    },
    {
      "number": 337,
      "id": "PR_kwDOBphpts42_Ls2",
      "title": "Fetch metadata from references with DOI.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/337",
      "state": "MERGED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This helps to fetch metadata from publications with DOI.",
      "createdAt": "2022-04-29T00:24:16Z",
      "updatedAt": "2022-04-29T22:36:42Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "main",
      "baseRefOid": "9e4039587344c0e48ea8e9ae982cfd8a46ee5f83",
      "headRepository": "armfazh/draft-irtf-cfrg-voprf",
      "headRefName": "doiref",
      "headRefOid": "567eff11c273493285b85ff66ec378ca9d81189c",
      "closedAt": "2022-04-29T22:36:42Z",
      "mergedAt": "2022-04-29T22:36:42Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "c6b5c6ba717c2220bd1524fa2a9e42008ae1487b"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOBphpts45H368",
          "commit": {
            "abbreviatedOid": "567eff1"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-04-29T22:36:37Z",
          "updatedAt": "2022-04-29T22:36:37Z",
          "comments": []
        }
      ]
    },
    {
      "number": 338,
      "id": "PR_kwDOBphpts42_PD0",
      "title": "Removes OS2IP, and fixes some words.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/338",
      "state": "MERGED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This PR solves the following comments from [review](https://mailarchive.ietf.org/arch/msg/crypto-panel/QXC3drh1hs-XGkXyjwyCj_pFNNI/): \r\n\r\n>   2.  1.3 on page 7: Better to separate I2SOP and OS2IP, because the current description might be taken to suggest that I2SOP converts a byte array to a non-negative integer, which according to RFC 8017 is just the opposite, i.e., converts a non-negative integer to a byte array.\r\n>   4.  2 on page 8: Redundant long at the end of this sentence \"A cryptographic hash function whose output length is Nh bytes long\".\r\n>   6.  2.1 on page 9 says \"... multiplicative inverse of input Scalar s modulo ...\". This is the first time modulo operation is mentioned.\r\n\r\n\r\n",
      "createdAt": "2022-04-29T00:43:00Z",
      "updatedAt": "2022-05-07T12:41:15Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "main",
      "baseRefOid": "9e4039587344c0e48ea8e9ae982cfd8a46ee5f83",
      "headRepository": "armfazh/draft-irtf-cfrg-voprf",
      "headRefName": "os2ip",
      "headRefOid": "1457cf2cd5a81ad1c22ff1388715184cf0352b72",
      "closedAt": "2022-05-07T12:41:15Z",
      "mergedAt": "2022-05-07T12:41:15Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "5bbb75a019e7a6575adda0d4bab993ef33428995"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOBphpts45H3rt",
          "commit": {
            "abbreviatedOid": "1457cf2"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM assuming we don't actually using `OS2IP`.",
          "createdAt": "2022-04-29T22:36:02Z",
          "updatedAt": "2022-04-29T22:36:17Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "Do we not use `OS2IP`?",
              "createdAt": "2022-04-29T22:36:03Z",
              "updatedAt": "2022-04-29T22:36:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts45H9pJ",
          "commit": {
            "abbreviatedOid": "1457cf2"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-04-29T23:23:18Z",
          "updatedAt": "2022-04-29T23:23:18Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "I checked it, it is not used, could you confirm too?",
              "createdAt": "2022-04-29T23:23:18Z",
              "updatedAt": "2022-04-29T23:23:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts45ib3i",
          "commit": {
            "abbreviatedOid": "1457cf2"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-05-07T12:40:46Z",
          "updatedAt": "2022-05-07T12:40:47Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "Confirmed.",
              "createdAt": "2022-05-07T12:40:47Z",
              "updatedAt": "2022-05-07T12:40:47Z"
            }
          ]
        }
      ]
    },
    {
      "number": 339,
      "id": "PR_kwDOBphpts42_VZS",
      "title": "Gathers all labels in a single section.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/339",
      "state": "CLOSED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This PR addresses the comment from [review](https://mailarchive.ietf.org/arch/msg/crypto-panel/QXC3drh1hs-XGkXyjwyCj_pFNNI/)\r\n\r\n>  3.  1.3 on page 8 says \"String values such as \"Finalize\" are ASCII string literals\": It would be good to have all the strings mentioned here not just an example.",
      "createdAt": "2022-04-29T01:18:37Z",
      "updatedAt": "2022-05-02T20:46:42Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "main",
      "baseRefOid": "9e4039587344c0e48ea8e9ae982cfd8a46ee5f83",
      "headRepository": "armfazh/draft-irtf-cfrg-voprf",
      "headRefName": "labels",
      "headRefOid": "fb380c1f468ff3e9b9bcf4eff81ac1a037132bf9",
      "closedAt": "2022-05-02T20:46:42Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "> I think this is a reduction in readability. I think the right way to address this comment is merely to list a couple more examples beyond \"Finalize\".\r\n\r\nThen, I will decline this one and open a different PR.",
          "createdAt": "2022-05-02T20:46:42Z",
          "updatedAt": "2022-05-02T20:46:42Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOBphpts45H3QS",
          "commit": {
            "abbreviatedOid": "fb380c1"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "I think this is a reduction in readability. I think the right way to address this comment is merely to list a couple more examples beyond \"Finalize\".",
          "createdAt": "2022-04-29T22:34:55Z",
          "updatedAt": "2022-04-29T22:34:55Z",
          "comments": []
        }
      ]
    },
    {
      "number": 343,
      "id": "PR_kwDOBphpts44ZE1z",
      "title": "Edit input validation text.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/343",
      "state": "MERGED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "armfazh"
      ],
      "labels": [],
      "body": "Edit input validation text.\r\n\r\nChanges:\r\n- Move the non-identity requirement from DeserializeElement to Input Validation section.\r\n- Remove SerializedElement and SerializedScalar types, since they are not used.\r\n- Rename validation subsections.\r\n- Minor nits.\r\n\r\nNote: usually crypto libraries already implement a `DeserializeElement` functionality (following [SECG Sec 2.3.4](https://www.secg.org/sec1-v2.pdf)), however they do not fail if the identity element is decoded. Hence the check for non-identity must be done explicitly after deserialization. \r\n\r\n\r\nFixes #342 ",
      "createdAt": "2022-05-24T20:24:14Z",
      "updatedAt": "2024-03-09T08:08:01Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "main",
      "baseRefOid": "e937bd8607f7e13751d8dae152d3d07110eac959",
      "headRepository": "armfazh/draft-irtf-cfrg-voprf",
      "headRefName": "deserError",
      "headRefOid": "9d2872d433ace08580877c08a1be0d493b97f90d",
      "closedAt": "2022-05-25T17:52:38Z",
      "mergedAt": "2022-05-25T17:52:38Z",
      "mergedBy": "armfazh",
      "mergeCommit": {
        "oid": "ff7722c8c45d675c3cb57bc45f343a883781a8f7"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOBphpts46sN-H",
          "commit": {
            "abbreviatedOid": "c8c624a"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM with one nit.",
          "createdAt": "2022-05-25T11:44:12Z",
          "updatedAt": "2022-05-25T11:45:45Z",
          "comments": [
            {
              "originalPosition": 92,
              "body": "```suggestion\r\nSince messages are serialized before transmission between client and server, \r\ndeserialization is followed by input validation to prevent malformed or invalid\r\ninvalid inputs from being used in the protocol.\r\n```",
              "createdAt": "2022-05-25T11:44:12Z",
              "updatedAt": "2022-05-25T11:45:45Z"
            }
          ]
        }
      ]
    },
    {
      "number": 344,
      "id": "PR_kwDOBphpts44ba3z",
      "title": "Gives more details about DLEQ proof.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/344",
      "state": "MERGED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "armfazh"
      ],
      "labels": [],
      "body": "The document actually uses a slightly modified version of Davidson et al. proof (POPETS).\r\nThis PR specifies two subtle changes.\r\n\r\nFixes #335 ",
      "createdAt": "2022-05-25T08:49:07Z",
      "updatedAt": "2022-05-25T17:51:09Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "main",
      "baseRefOid": "e937bd8607f7e13751d8dae152d3d07110eac959",
      "headRepository": "armfazh/draft-irtf-cfrg-voprf",
      "headRefName": "proofPointers",
      "headRefOid": "9e08d190653026112ca69d753271c2c8309eefd8",
      "closedAt": "2022-05-25T17:51:09Z",
      "mergedAt": "2022-05-25T17:51:08Z",
      "mergedBy": "armfazh",
      "mergeCommit": {
        "oid": "4c529d27f06d407e2a2f249b979160b158556284"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOBphpts46sQpv",
          "commit": {
            "abbreviatedOid": "9ca5a40"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-05-25T11:53:28Z",
          "updatedAt": "2022-05-25T11:53:35Z",
          "comments": [
            {
              "originalPosition": 42,
              "body": "```suggestion\r\nconstruction with two modifications: (1) the transcript used to generate\r\nthe seed includes more context information, and (2) the individual challenges\r\nfor each element in the proof is derived from a seed-prefixed hash-to-scalar \r\ninvocation rather than being sampled from a seeded PRNG.\r\n```",
              "createdAt": "2022-05-25T11:53:28Z",
              "updatedAt": "2022-05-25T11:53:35Z"
            }
          ]
        }
      ]
    },
    {
      "number": 345,
      "id": "PR_kwDOBphpts44efNQ",
      "title": "Clarify how batching inputs works.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/345",
      "state": "MERGED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "armfazh"
      ],
      "labels": [],
      "body": " - Updates the description in GenerateProof and VerifyProof to alert reader that batching can be supported.\r\n - Recalls about batching in the description of the verifiable modes.\r\n - minor nits\r\n\r\nCloses #297 ",
      "createdAt": "2022-05-25T20:43:51Z",
      "updatedAt": "2022-05-26T16:27:46Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "main",
      "baseRefOid": "cacf15d863ac17e43cf78eb2fd79c8cd86c97d23",
      "headRepository": "armfazh/draft-irtf-cfrg-voprf",
      "headRefName": "batchExp",
      "headRefOid": "897e41353c316dface1821fc3e6099f38e7b1661",
      "closedAt": "2022-05-26T16:27:46Z",
      "mergedAt": "2022-05-26T16:27:46Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "dde93524df1ad62cfe8ea3603ca17c9c11b4bbc9"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOBphpts46xSwO",
          "commit": {
            "abbreviatedOid": "8e97e57"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Looking for some editorial alterations.",
          "createdAt": "2022-05-26T10:04:52Z",
          "updatedAt": "2022-05-26T10:18:45Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "```suggestion\r\n`GenerateProof` accepts lists of inputs to amortize the cost of proof\r\ngeneration. Applications can take advantage of this functionality to\r\nproduce a single, constant-sized proof for `m` DLEQ inputs, rather \r\nthan `m` proofs for `m` DLEQ inputs.\r\n```",
              "createdAt": "2022-05-26T10:04:53Z",
              "updatedAt": "2022-05-26T10:18:45Z"
            },
            {
              "originalPosition": 235,
              "body": "```suggestion\r\n  blindedElements = [blindedElement]     // list of length 1\r\n  evaluatedElements = [evaluatedElement] // list of length 1\r\n  if VerifyProof(G.Generator(), pkS, blindedElements, \r\n                 evaluatedElements, proof) == false:\r\n```",
              "createdAt": "2022-05-26T10:08:26Z",
              "updatedAt": "2022-05-26T10:18:46Z"
            },
            {
              "originalPosition": 220,
              "body": "```suggestion\r\nIn the description above, inputs to `GenerateProof` are one-item\r\n```",
              "createdAt": "2022-05-26T10:09:01Z",
              "updatedAt": "2022-05-26T10:18:46Z"
            },
            {
              "originalPosition": 245,
              "body": "```suggestion\r\nAs in `Evaluate`, inputs to `VerifyProof` are one-item lists. Clients can verify\r\nmultiple inputs at once whenever the server produced a batched DLEQ proof\r\nfor them.\r\n```",
              "createdAt": "2022-05-26T10:09:52Z",
              "updatedAt": "2022-05-26T10:18:46Z"
            },
            {
              "originalPosition": 258,
              "body": "```suggestion\r\n  evaluatedElements = [evaluatedElement] // list of length 1\r\n  blindedElements = [blindedElement]     // list of length 1\r\n  proof = GenerateProof(t, G.Generator(), tweakedKey, \r\n                        evaluatedElements, blindedElements)\r\n```",
              "createdAt": "2022-05-26T10:10:34Z",
              "updatedAt": "2022-05-26T10:18:46Z"
            },
            {
              "originalPosition": 263,
              "body": "```suggestion\r\nIn the description above, inputs to `GenerateProof` are one-item\r\n```",
              "createdAt": "2022-05-26T10:10:46Z",
              "updatedAt": "2022-05-26T16:14:31Z"
            },
            {
              "originalPosition": 216,
              "body": "```suggestion\r\n  blindedElements = [blindedElement]     // list of length 1\r\n  evaluatedElements = [evaluatedElement] // list of length 1\r\n  proof = GenerateProof(skS, G.Generator(), pkS, \r\n                        blindedElements, evaluatedElements)\r\n```",
              "createdAt": "2022-05-26T10:11:43Z",
              "updatedAt": "2022-05-26T16:13:11Z"
            },
            {
              "originalPosition": 281,
              "body": "```suggestion\r\n  evaluatedElements = [evaluatedElement] // list of length 1\r\n  blindedElements = [blindedElement]     // list of length 1\r\n  if VerifyProof(G.Generator(), tweakedKey, evaluatedElements, \r\n                 blindedElements, proof) == false:\r\n```",
              "createdAt": "2022-05-26T10:13:28Z",
              "updatedAt": "2022-05-26T10:18:46Z"
            },
            {
              "originalPosition": 291,
              "body": "```suggestion\r\nAs in `Evaluate`, inputs to `VerifyProof` are one-item lists.\r\nClients can verify multiple inputs at once whenever the server produced a\r\nbatched DLEQ proof for them.\r\n```",
              "createdAt": "2022-05-26T10:13:45Z",
              "updatedAt": "2022-05-26T10:18:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts46xWHd",
          "commit": {
            "abbreviatedOid": "8e97e57"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Looking for some editorial alterations.",
          "createdAt": "2022-05-26T10:18:56Z",
          "updatedAt": "2022-05-26T10:18:56Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOBphpts46zIa4",
          "commit": {
            "abbreviatedOid": "897e413"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-05-26T16:27:41Z",
          "updatedAt": "2022-05-26T16:27:41Z",
          "comments": []
        }
      ]
    },
    {
      "number": 346,
      "id": "PR_kwDOBphpts44eiJC",
      "title": "Adding more examples of labels.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/346",
      "state": "MERGED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "armfazh"
      ],
      "labels": [],
      "body": "Derived from\r\nhttps://github.com/cfrg/draft-irtf-cfrg-voprf/pull/339#pullrequestreview-958362642\r\n\r\n",
      "createdAt": "2022-05-25T20:54:51Z",
      "updatedAt": "2022-05-26T10:01:23Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "main",
      "baseRefOid": "ff7722c8c45d675c3cb57bc45f343a883781a8f7",
      "headRepository": "armfazh/draft-irtf-cfrg-voprf",
      "headRefName": "labels",
      "headRefOid": "54c82f0e3748d48e909a7e405d6de29b62e3dcc0",
      "closedAt": "2022-05-26T10:01:23Z",
      "mergedAt": "2022-05-26T10:01:23Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "cacf15d863ac17e43cf78eb2fd79c8cd86c97d23"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOBphpts46vbmN",
          "commit": {
            "abbreviatedOid": "86d9802"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-05-25T21:53:52Z",
          "updatedAt": "2022-05-25T21:53:56Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\nString values such as \"DeriveKeyPair\", \"Seed-\", and \"Finalize\" are ASCII string literals.\n```\n",
              "createdAt": "2022-05-25T21:53:52Z",
              "updatedAt": "2022-05-25T21:53:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts46xR1N",
          "commit": {
            "abbreviatedOid": "54c82f0"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-05-26T10:01:19Z",
          "updatedAt": "2022-05-26T10:01:19Z",
          "comments": []
        }
      ]
    },
    {
      "number": 347,
      "id": "PR_kwDOBphpts44nciS",
      "title": "Update reference code to match main document",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/347",
      "state": "OPEN",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "armfazh"
      ],
      "labels": [],
      "body": "This PR has no effect on test vectors.\r\n\r\nFixes #322 ",
      "createdAt": "2022-05-28T01:24:25Z",
      "updatedAt": "2023-06-06T04:04:06Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "main",
      "baseRefOid": "284af1122eea66b1154b19329e5f4b54ca17265c",
      "headRepository": "armfazh/draft-irtf-cfrg-voprf",
      "headRefName": "codeArgs",
      "headRefOid": "4cf4950eeb4e1ab962689097f826ff1e1c59e276",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "body": "(apologies, accidentally clicked approve previously). Is this PR still to be merged once the conflicts are resolved?",
          "createdAt": "2022-09-14T13:18:03Z",
          "updatedAt": "2022-09-14T13:18:03Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "Just rebased this PR on top of main.",
          "createdAt": "2022-09-14T22:10:50Z",
          "updatedAt": "2022-09-14T22:10:50Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOBphpts5CAo3P",
          "commit": {
            "abbreviatedOid": "4d84f0d"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-09-14T13:16:16Z",
          "updatedAt": "2022-09-14T13:16:16Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOBphpts5CHBC2",
          "commit": {
            "abbreviatedOid": "4cf4950"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-09-15T12:52:29Z",
          "updatedAt": "2022-09-15T12:52:29Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOBphpts5XRjzd",
          "commit": {
            "abbreviatedOid": "4cf4950"
          },
          "author": "Mitsuecom",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-06T04:04:06Z",
          "updatedAt": "2023-06-06T04:04:06Z",
          "comments": []
        }
      ]
    },
    {
      "number": 348,
      "id": "PR_kwDOBphpts46hTy9",
      "title": "Update to v10, update test vectors",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/348",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "cc @kevinlewi and @bytemare, could you please verify vectors if convenient?",
      "createdAt": "2022-06-28T19:48:43Z",
      "updatedAt": "2022-07-01T15:34:50Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "main",
      "baseRefOid": "dde93524df1ad62cfe8ea3603ca17c9c11b4bbc9",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/v10",
      "headRefOid": "354dd71d6aaf1227d8cf564b84ae9bfd0d265500",
      "closedAt": "2022-06-30T12:23:22Z",
      "mergedAt": "2022-06-30T12:23:22Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "2e02c55c5c607991eea07dba8521bc59ed3302e6"
      },
      "comments": [
        {
          "author": "bytemare",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Works for [VOPRF ](https://github.com/bytemare/voprf) and [OPAQUE ](https://github.com/bytemare/opaque)as well \ud83d\udc4d ",
          "createdAt": "2022-07-01T15:34:50Z",
          "updatedAt": "2022-07-01T15:34:50Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOBphpts488lXJ",
          "commit": {
            "abbreviatedOid": "354dd71"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "just verified test vectors are ok both in CIRCL and voprf-ts.",
          "createdAt": "2022-06-28T21:53:14Z",
          "updatedAt": "2022-06-28T21:53:14Z",
          "comments": []
        }
      ]
    },
    {
      "number": 349,
      "id": "PR_kwDOBphpts46t2xi",
      "title": "Update supported versions for referenced implementations",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/349",
      "state": "MERGED",
      "author": "bytemare",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Both my implementations validate the new vectors",
      "createdAt": "2022-07-01T15:37:29Z",
      "updatedAt": "2022-07-06T17:12:44Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "main",
      "baseRefOid": "dff20b461c0de23fcd521116f3d058cfa5b80b90",
      "headRepository": "bytemare/draft-irtf-cfrg-voprf",
      "headRefName": "patch-6",
      "headRefOid": "32b30c6d33481fc3fe74cf6126579acd9b847466",
      "closedAt": "2022-07-06T17:12:44Z",
      "mergedAt": "2022-07-06T17:12:44Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "01462db432f6a68cc9928c4b79ffab7e38e38c5d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOBphpts49a2Jg",
          "commit": {
            "abbreviatedOid": "047d5de"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-06T17:12:09Z",
          "updatedAt": "2022-07-06T17:12:09Z",
          "comments": []
        }
      ]
    },
    {
      "number": 350,
      "id": "PR_kwDOBphpts46t_Cd",
      "title": "Updates CIRCL and Typescript implementations to v10.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/350",
      "state": "MERGED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-07-01T16:18:30Z",
      "updatedAt": "2022-07-01T19:24:11Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "main",
      "baseRefOid": "2e02c55c5c607991eea07dba8521bc59ed3302e6",
      "headRepository": "armfazh/draft-irtf-cfrg-voprf",
      "headRefName": "armfazh/refv10",
      "headRefOid": "0b191e23697ce2d18f24169943a63a3df0b49832",
      "closedAt": "2022-07-01T19:24:11Z",
      "mergedAt": "2022-07-01T19:24:11Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "a76090dc86dd0d769f4b3579232f00a3293863f5"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 351,
      "id": "PR_kwDOBphpts468CFW",
      "title": "Change Evaluate to BlindEvaluate, and add Evaluate",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/351",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This doesn't affect the test vectors, so I didn't bump the version string or update the test vectors.\r\n\r\ncc @raphaelrobert",
      "createdAt": "2022-07-06T13:32:26Z",
      "updatedAt": "2022-07-06T17:11:55Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "main",
      "baseRefOid": "a76090dc86dd0d769f4b3579232f00a3293863f5",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/add-evaluate",
      "headRefOid": "27fa4e7fbf8d58e69e32ee99ff57f9bef19f031f",
      "closedAt": "2022-07-06T17:11:55Z",
      "mergedAt": "2022-07-06T17:11:55Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "dff20b461c0de23fcd521116f3d058cfa5b80b90"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOBphpts49a0Og",
          "commit": {
            "abbreviatedOid": "27fa4e7"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-06T17:05:11Z",
          "updatedAt": "2022-07-06T17:05:11Z",
          "comments": []
        }
      ]
    },
    {
      "number": 352,
      "id": "PR_kwDOBphpts47I9jp",
      "title": "Fixing small typo in BlindEvaluate spelling",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/352",
      "state": "MERGED",
      "author": "kevinlewi",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "`BlindEvalute` -> `BlindEvaluate`",
      "createdAt": "2022-07-09T10:43:59Z",
      "updatedAt": "2022-07-11T12:43:32Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "main",
      "baseRefOid": "01462db432f6a68cc9928c4b79ffab7e38e38c5d",
      "headRepository": "kevinlewi/draft-irtf-cfrg-voprf",
      "headRefName": "fix_typo",
      "headRefOid": "dbf24adf0d04f3ca2ac6926e01bbb6a78b01de64",
      "closedAt": "2022-07-11T12:43:32Z",
      "mergedAt": "2022-07-11T12:43:32Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "ba3e5d44c75d18cc38c00fb92f5128e9e26e7644"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOBphpts49pcEu",
          "commit": {
            "abbreviatedOid": "dbf24ad"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thanks!",
          "createdAt": "2022-07-11T12:43:28Z",
          "updatedAt": "2022-07-11T12:43:28Z",
          "comments": []
        }
      ]
    },
    {
      "number": 353,
      "id": "PR_kwDOBphpts495kE9",
      "title": "Updates DOI links for two references.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/353",
      "state": "MERGED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-08-27T00:49:31Z",
      "updatedAt": "2022-08-30T22:24:47Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "main",
      "baseRefOid": "60cd86e69d93a24d87ef46e7d33861ae832cfec2",
      "headRepository": "armfazh/draft-irtf-cfrg-voprf",
      "headRefName": "twoDOIs",
      "headRefOid": "874943c4b9425f607a0da9d944f40916996324e4",
      "closedAt": "2022-08-30T22:24:47Z",
      "mergedAt": "2022-08-30T22:24:47Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "bc06de13996c5d8424db96796a207a4dad7dffd1"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOBphpts5BBdid",
          "commit": {
            "abbreviatedOid": "874943c"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-08-30T20:08:46Z",
          "updatedAt": "2022-08-30T20:08:46Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOBphpts5BBjdJ",
          "commit": {
            "abbreviatedOid": "874943c"
          },
          "author": "cjpatton",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-30T20:29:02Z",
          "updatedAt": "2022-08-30T20:29:02Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "Oooh, how does this get rendered in the doc? Do the authors and paper title show up?",
              "createdAt": "2022-08-30T20:29:02Z",
              "updatedAt": "2022-08-30T20:29:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts5BBmmM",
          "commit": {
            "abbreviatedOid": "874943c"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-30T20:40:38Z",
          "updatedAt": "2022-08-30T20:40:38Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "the kramdown tools added this feature recently",
              "createdAt": "2022-08-30T20:40:38Z",
              "updatedAt": "2022-08-30T20:40:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts5BBm0g",
          "commit": {
            "abbreviatedOid": "874943c"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-30T20:41:32Z",
          "updatedAt": "2022-08-30T20:41:32Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "https://github.com/cabo/kramdown-rfc/wiki/Syntax#references\r\n",
              "createdAt": "2022-08-30T20:41:32Z",
              "updatedAt": "2022-08-30T20:41:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts5BBosV",
          "commit": {
            "abbreviatedOid": "874943c"
          },
          "author": "cjpatton",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-30T20:48:39Z",
          "updatedAt": "2022-08-30T20:48:39Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "Neat!",
              "createdAt": "2022-08-30T20:48:39Z",
              "updatedAt": "2022-08-30T20:48:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts5BB_hg",
          "commit": {
            "abbreviatedOid": "874943c"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-08-30T22:24:43Z",
          "updatedAt": "2022-08-30T22:24:43Z",
          "comments": []
        }
      ]
    },
    {
      "number": 354,
      "id": "PR_kwDOBphpts495t-Q",
      "title": "Addresses some comments by JH",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/354",
      "state": "MERGED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses some of the comments by JH [posted here](https://mailarchive.ietf.org/arch/msg/cfrg/rHVKNpdHx8jWhwqpvlvEKV4pm-4/).\r\n\r\nThe best way to review this PR is going commit by commit.\r\nI am confident of all of them except of the last one related to naming the assumptions.\r\n\r\n## Addressed in this PR\r\n \r\n> - The introduction mentions POPRFs have been used for PPSS in JKK14, but \r\nthat paper uses only VOPRFs explicitly and I cannot spot implicit use of \r\na partially oblivious protocol in their PPSS construction.\r\n\r\n> - The document uses both \"base point\" and \"group generator\". Maybe unify?\r\n\r\n> - Member functions of the group are sometimes referred to as \r\nGroup.function() and sometimes just as function(). Some of the \r\nappearances, e.g., of Order() in 4.1.4, do appear in the context of a \r\ngroup Group, so the write-up could be clarified by putting Group.Order() \r\ninstead.\r\n\r\n> - First paragraph of 2.2.1 \"k*C[i]==D[i] for each element in the list.\" \r\nBetter \"for each i in {1,...,m}\".\r\n\r\n> - The terms (functions?) OPRFServerContext, VOPRFClientContext etc. do \r\nnot seem to be defined.\r\n\r\n> - Section 4.1.1 and following: some numbers are missing \"bytes\", e.g., \r\nthe Nh values, L = 48,...\r\n\r\n> - Section 6, first paragraph, has one POPRF that should be VOPRF\r\n\r\n> - 6.1 Pseudorandomness: pull \"for a random sampling of k\" to the first \r\npart of the sentence.\r\n\r\n> - \"with infinite compute\" - infinite computing power?\r\n\r\n> - \"Additionally, for the.... additional\" - remove the first one?\r\n\r\n> - \"One-More Gap Computational Diffie Hellman (CDH)\" This is not what CDH \r\nusually stands for.\r\n\r\n> - \"variant is based on\" - are based on?\r\n\r\n\r\n## Not addressed\r\n\r\n\r\n> - \"Verifiable POPRF\": the verifiability property is not optional in the \r\ndraft, but the fact that it is sometimes called \"verifiable POPRF\" hints \r\nthat it is. Why not avoid any confusion by calling it VPOPRF throughout \r\nthe document?\r\n\r\n> - Section 1.3 introduces PrivateInput and PublicInput as the exact same \r\ndata types. What distinguishes them? The terms Private and Public hint \r\nat something, but it seems never spelled out in the document.\r\n\r\n> - In general the distinction between \"Input\" and \"Parameters\" in the \r\nfunction descriptions confused me. What are the semantics here? First I \r\nthought Parameters are implementation-wide and fixed objects, like the \r\nGroup, but then the OPRF key skS appears as a Parameter of \r\nBlindEvaluate. Since the document also hints that keys can be updated \r\nduring the run of the protocol (\"key rotation\"), skS does not seem to be \r\na long-term parameter to me. Sometimes both the terms Input and \r\nParameter are  mixed, for example when \"PublicInput contextString\" \r\nappears under Parameters. Another example is in the flow diagram of \r\nPOPRF, where both Inputs (info) and Parameters (pkS,skS) appear in \r\nparantheses after a party's name.\r\nOverall it would be good to clarify why the function descriptions \r\ndistinguish between \"Inputs\" and \"Parameters\", as otherwise implementors \r\nmight interpret their own meaning to these terms.\r\n\r\n\r\n> - Explain the list notation []\r\n\r\n> - Section 3, protocol overviews: skS and pkS appear as input to the \r\nparties but are not used in the protocols. E.g., it should be \r\nBlindEvaluate(skS,blindedElement) instead of BlindEvaluate(blindedElement).\r\n\r\n> - Still protocol overviews: I find the term \"evaluatedElement\" computed \r\nby the server a bit misleading, as it sounds like the server is learning \r\nthe evaluation. On the other hand I don't have a better idea. \r\nBlindedEvaluatedElement would indicate more precisely what happens, but \r\nis probably too long.\r\n\r\n> - \"client and server augment the pkS and skS, respectively, using the \r\ninfo value\": this could be modified to explain the (otherwise \r\nunexplained) \"tweakedKey\" term that appears in the protocol overview. \r\nMaybe \"client and server tweak their pkS and skS, respectively, using \r\nthe info value\"?\r\n\r\n> - *If* I would implement this, I would wonder about Input \"opaque \r\nseed[Ns]\". Ns is an integer, and this seed appears to be a list of Ns \r\nopaque values. In the text it says \"randomly generated seed\". The seeds \r\nsuggested in the test vector section do not appear very random to me ;) \r\nNot sure if this is underspecified or just common knowledge.\r\n\r\n> - \"Recall that servers may batch multiple client inputs to \r\nBlindEvaluate.\" - Maybe one more sentence how this is done? Just \r\nrepeated execution of BlindEvaluate and concatenating the \r\nevaluatedElements in the message to the client?\r\n\r\n> - \"certain public inputs that map to invalid public keys for server \r\nevaluation.\" I could not parse \"public key for server evaluation\" here.\r\n\r\n> - I could not make any sense of 5.2, but again, not an implementor...\r\n\r\n\r\n> - Partial obliviousness: I don't understand this definition. Everything \r\nbut the last sentence are properties of any OPRF, as described already \r\nin the other properties. The sentence \"Both client and server learn the \r\npublic input (info)\" does not seem to have any meaning, since info is \r\n*input* to both parties and hence they of course learn it. The partial \r\nobliviousness property rather seems to enforce usage of info in an \r\nevaluation.\r\nI was also surprised that partial obliviousness is equivalent to \r\nunlinkability. Are OPRFs linkable, in the sense of linkability described \r\nin the draft?\r\n\r\n> - Risking a few hits on my head: JKK14 does *not* give a security proof \r\nfor the VOPRF protocol in Section 6.1. JKK14 requires session \r\nidentifiers and is in the random oracle model. Unless, e.g., hash domain \r\nseparation is put as a MUST in the draft, the analysis of JKK14 does not \r\napply to the protocol in Section 6.1.\r\n\r\n> - In reference [SJKS17] typos in Jareckiy, Krawczykz",
      "createdAt": "2022-08-27T02:53:43Z",
      "updatedAt": "2022-08-31T13:12:05Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "main",
      "baseRefOid": "bc06de13996c5d8424db96796a207a4dad7dffd1",
      "headRepository": "armfazh/draft-irtf-cfrg-voprf",
      "headRefName": "fixCommentsJH",
      "headRefOid": "453ae649ff5c6873b1dffd9d3d6b325b9d2a40fd",
      "closedAt": "2022-08-31T13:12:05Z",
      "mergedAt": "2022-08-31T13:12:05Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "c507ea2678140e4f60fd1ffa14a4e0b1cd43f9fa"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOBphpts5BBeFm",
          "commit": {
            "abbreviatedOid": "8081439"
          },
          "author": "alxdavids",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-08-30T20:10:54Z",
          "updatedAt": "2022-08-30T20:10:54Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOBphpts5BCAN_",
          "commit": {
            "abbreviatedOid": "8081439"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-08-30T22:28:17Z",
          "updatedAt": "2022-08-30T22:30:41Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "I think this change should be reverted, and instead fixed to say \"Verifiable OPRFs have also been used...\".",
              "createdAt": "2022-08-30T22:28:17Z",
              "updatedAt": "2022-08-30T22:30:41Z"
            },
            {
              "originalPosition": 76,
              "body": "```suggestion\r\nand `k*C[i] == D[i]` for each `i` in `[0, ..., m - 1]`.\r\n```",
              "createdAt": "2022-08-30T22:29:22Z",
              "updatedAt": "2022-08-30T22:30:41Z"
            },
            {
              "originalPosition": 94,
              "body": "I think we should revert this as well and simply clarify that `OPRFServerContext` et al. are implementation-specific data structures that store context string and relevant key material.",
              "createdAt": "2022-08-30T22:30:26Z",
              "updatedAt": "2022-08-30T22:30:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts5BCNC2",
          "commit": {
            "abbreviatedOid": "8081439"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-31T00:02:01Z",
          "updatedAt": "2022-08-31T00:02:02Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "done",
              "createdAt": "2022-08-31T00:02:01Z",
              "updatedAt": "2022-08-31T00:02:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts5BCNDW",
          "commit": {
            "abbreviatedOid": "8081439"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-31T00:02:05Z",
          "updatedAt": "2022-08-31T00:02:06Z",
          "comments": [
            {
              "originalPosition": 76,
              "body": "done",
              "createdAt": "2022-08-31T00:02:06Z",
              "updatedAt": "2022-08-31T00:02:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts5BCNFP",
          "commit": {
            "abbreviatedOid": "8081439"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-31T00:02:20Z",
          "updatedAt": "2022-08-31T00:02:20Z",
          "comments": [
            {
              "originalPosition": 94,
              "body": "done",
              "createdAt": "2022-08-31T00:02:20Z",
              "updatedAt": "2022-08-31T00:02:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts5BFHex",
          "commit": {
            "abbreviatedOid": "453ae64"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-08-31T13:12:01Z",
          "updatedAt": "2022-08-31T13:12:01Z",
          "comments": []
        }
      ]
    },
    {
      "number": 355,
      "id": "PR_kwDOBphpts4-Tl_j",
      "title": "Fix comments by JH (part 2)",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/355",
      "state": "MERGED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "armfazh"
      ],
      "labels": [],
      "body": "Together with #354 , this PR addresses all the comments by JH [posted here](https://mailarchive.ietf.org/arch/msg/cfrg/rHVKNpdHx8jWhwqpvlvEKV4pm-4/).\r\n\r\nThe best way to review this PR is going commit by commit.\r\n\r\n## Comments Addressed\r\n\r\n> \"Verifiable POPRF\": the verifiability property is not optional in the\r\ndraft, but the fact that it is sometimes called \"verifiable POPRF\" hints\r\nthat it is. Why not avoid any confusion by calling it VPOPRF throughout\r\nthe document?\r\n\r\n> Section 1.3 introduces PrivateInput and PublicInput as the exact same\r\ndata types. What distinguishes them? The terms Private and Public hint\r\nat something, but it seems never spelled out in the document.\r\n\r\n> In general the distinction between \"Input\" and \"Parameters\" in the\r\nfunction descriptions confused me. What are the semantics here? First I\r\nthought Parameters are implementation-wide and fixed objects, like the\r\nGroup, but then the OPRF key skS appears as a Parameter of\r\nBlindEvaluate. Since the document also hints that keys can be updated\r\nduring the run of the protocol (\"key rotation\"), skS does not seem to be\r\na long-term parameter to me. Sometimes both the terms Input and\r\nParameter are mixed, for example when \"PublicInput contextString\"\r\nappears under Parameters. Another example is in the flow diagram of\r\nPOPRF, where both Inputs (info) and Parameters (pkS,skS) appear in\r\nparantheses after a party's name.\r\nOverall it would be good to clarify why the function descriptions\r\ndistinguish between \"Inputs\" and \"Parameters\", as otherwise implementors\r\nmight interpret their own meaning to these terms.\r\n\r\n> Explain the list notation []\r\n\r\n> Section 3, protocol overviews: skS and pkS appear as input to the\r\nparties but are not used in the protocols. E.g., it should be\r\nBlindEvaluate(skS,blindedElement) instead of BlindEvaluate(blindedElement).\r\n\r\n> \"client and server augment the pkS and skS, respectively, using the\r\ninfo value\": this could be modified to explain the (otherwise\r\nunexplained) \"tweakedKey\" term that appears in the protocol overview.\r\nMaybe \"client and server tweak their pkS and skS, respectively, using\r\nthe info value\"?\r\n\r\n> If I would implement this, I would wonder about Input \"opaque\r\nseed[Ns]\". Ns is an integer, and this seed appears to be a list of Ns\r\nopaque values. In the text it says \"randomly generated seed\". The seeds\r\nsuggested in the test vector section do not appear very random to me ;)\r\nNot sure if this is underspecified or just common knowledge.\r\n\r\n> \"Recall that servers may batch multiple client inputs to\r\nBlindEvaluate.\" - Maybe one more sentence how this is done? Just\r\nrepeated execution of BlindEvaluate and concatenating the\r\nevaluatedElements in the message to the client?\r\n\r\n> \"certain public inputs that map to invalid public keys for server\r\nevaluation.\" I could not parse \"public key for server evaluation\" here.\r\n\r\n> I could not make any sense of 5.2, but again, not an implementor...\r\n\r\n> Partial obliviousness: I don't understand this definition. Everything\r\nbut the last sentence are properties of any OPRF, as described already\r\nin the other properties. The sentence \"Both client and server learn the\r\npublic input (info)\" does not seem to have any meaning, since info is\r\ninput to both parties and hence they of course learn it. The partial\r\nobliviousness property rather seems to enforce usage of info in an\r\nevaluation.\r\nI was also surprised that partial obliviousness is equivalent to\r\nunlinkability. Are OPRFs linkable, in the sense of linkability described\r\nin the draft?\r\n\r\n> In reference [SJKS17] typos in Jareckiy, Krawczykz\r\n\r\n**No change** \r\n\r\n> Still protocol overviews: I find the term \"evaluatedElement\" computed\r\nby the server a bit misleading, as it sounds like the server is learning\r\nthe evaluation. On the other hand I don't have a better idea.\r\nBlindedEvaluatedElement would indicate more precisely what happens, but\r\nis probably too long.\r\n\r\nWe remain using `evaluatedElement` for the output of the server computation.\r\n",
      "createdAt": "2022-09-02T22:37:09Z",
      "updatedAt": "2022-09-12T18:49:45Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "main",
      "baseRefOid": "5c08108ba58a8f5bdd1cb1aae8a3c816f8bca004",
      "headRepository": "armfazh/draft-irtf-cfrg-voprf",
      "headRefName": "fixCommentsJH2",
      "headRefOid": "96fbf19f37b21aaac2af6178d93e12e7f1b5aee3",
      "closedAt": "2022-09-12T18:49:45Z",
      "mergedAt": "2022-09-12T18:49:45Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "78a21be75e0c84744ef34b39484bb748fa094fbd"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOBphpts5B1s_7",
          "commit": {
            "abbreviatedOid": "fcf122c"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Looks good modulo a few changes. I don't quite agree with making skS a parameter, but if it moves us forward faster, let's do it!",
          "createdAt": "2022-09-12T17:56:43Z",
          "updatedAt": "2022-09-12T18:00:23Z",
          "comments": [
            {
              "originalPosition": 42,
              "body": "```suggestion\r\nThe `PrivateInput` data type refers to inputs that are known only to the client\r\nin the protocol, whereas the `PublicInput` data type refers to inputs that are \r\nknown to both client and server in the protocol. Both `PrivateInput` and\r\n`PublicInput` are opaque byte strings of arbitrary length no larger than 2^13 octets.\r\n```",
              "createdAt": "2022-09-12T17:56:43Z",
              "updatedAt": "2022-09-12T18:00:23Z"
            },
            {
              "originalPosition": 50,
              "body": "```suggestion\r\n  verified = (expectedC == c)\r\n```",
              "createdAt": "2022-09-12T17:56:54Z",
              "updatedAt": "2022-09-12T18:00:23Z"
            },
            {
              "originalPosition": 190,
              "body": "```suggestion\r\narray with the corresponding `evaluatedElement` values.\r\n```",
              "createdAt": "2022-09-12T17:57:45Z",
              "updatedAt": "2022-09-12T18:00:23Z"
            },
            {
              "originalPosition": 365,
              "body": "```suggestion\r\nEssentially, input secrecy is the property that, even if the server learns\r\n```",
              "createdAt": "2022-09-12T17:59:12Z",
              "updatedAt": "2022-09-12T18:00:23Z"
            },
            {
              "originalPosition": 368,
              "body": "```suggestion\r\nthe client's private input x at some point in the future, the server cannot\r\nlink any particular PRF evaluation to x. This property is also known as unlinkability {{DGSTV18}}.\r\n```",
              "createdAt": "2022-09-12T17:59:35Z",
              "updatedAt": "2022-09-12T18:00:23Z"
            },
            {
              "originalPosition": 408,
              "body": "```suggestion\r\nApplications SHOULD construct input to the protocol to provide domain\r\n```",
              "createdAt": "2022-09-12T17:59:49Z",
              "updatedAt": "2022-09-12T18:00:23Z"
            },
            {
              "originalPosition": 408,
              "body": "A MUST isn't enforceable.",
              "createdAt": "2022-09-12T17:59:57Z",
              "updatedAt": "2022-09-12T18:00:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts5B1-zB",
          "commit": {
            "abbreviatedOid": "96fbf19"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-09-12T18:49:40Z",
          "updatedAt": "2022-09-12T18:49:40Z",
          "comments": []
        }
      ]
    },
    {
      "number": 356,
      "id": "PR_kwDOBphpts4-TyKv",
      "title": "Warning during BlindEvaluate for POPRF.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/356",
      "state": "MERGED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses the comments by NG posted [in the list](https://mailarchive.ietf.org/arch/msg/cfrg/P4F00i3DbQR2KkHQ0Sl2E-i-D2E/)\r\n\r\n\r\n> pg. 11 In definition of GenerateProof appears the only use of the mod operator on scalars (it is used elsewhere on integers):\r\n> \r\n> \t\t\ts = (r - c*k) mod G.order().\r\n> To be consistent, consider replacing with s = (r - c*k) as scalars lie in GF(p).  \r\n\r\n> pg. 24. 3.3.3, raise InverseError when skS + m = 0.\r\n> While it is common practice to return an error message, here the server learns that the key skS is leaked as m is known externally.  Given that this is being checked, perhaps add a warning that it may be time to rekey.\r\n\r\n\r\n\r\n> The proof batching via ComputeCompositesFast requires 3 + i scalar multiplications to generate a proof for a batch of size i.  It's fairly complicated and spans over 4 pages.  However, the \"basic scheme\" in [ChaumPedersen] requires 2 such multiplications for a single proof, and is simple/intuitive.  Given that, I think it makes sense to include it in the draft and perhaps move the  batching method to an annex as an option.  (FWIW I did spend a few cycles looking at the batching proof and the steps taken do seem necessary).  \r\n\r\n**Comment:** The original proof by Chaum-Pedersen takes 2*N multiplications to process N instances of the proof. The batched proof in VOPRF document takes N+3 multiplications.\r\nThis means that the batched method has more advantage when:\r\n\r\n$$ \r\n\\begin{array}%\r\n2 N \\geq N+3 \\\\\r\n  N \\geq 3 \\\\\r\n\\end{array}\r\n$$\r\n\r\nThus, the cases N=1,2 could be subpar, but it is expected that applications relying on batched VOPRFs benefit from this method.\r\n\r\n",
      "createdAt": "2022-09-03T01:48:21Z",
      "updatedAt": "2022-09-12T18:49:13Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "main",
      "baseRefOid": "c507ea2678140e4f60fd1ffa14a4e0b1cd43f9fa",
      "headRepository": "armfazh/draft-irtf-cfrg-voprf",
      "headRefName": "fixCommentsNG",
      "headRefOid": "f52425d404036bcdb67fb766d4de92d31d49068d",
      "closedAt": "2022-09-12T18:49:13Z",
      "mergedAt": "2022-09-12T18:49:13Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "40670ebb808b463be31487c0493934e8965602f5"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOBphpts5B1vi9",
          "commit": {
            "abbreviatedOid": "7687522"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM pending the proposed suggestions.",
          "createdAt": "2022-09-12T18:05:35Z",
          "updatedAt": "2022-09-12T18:06:35Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "```suggestion\r\n`BlindEvaluate` triggers `InverseError` when the function is about to\r\ncalculate the inverse of a zero scalar, which does not exist and therefore\r\nyields a failure in the protocol.\r\n```",
              "createdAt": "2022-09-12T18:05:35Z",
              "updatedAt": "2022-09-12T18:06:35Z"
            },
            {
              "originalPosition": 16,
              "body": "```suggestion\r\nsecret key of the server. Clients that observe this signal are assumed to therefore\r\nknow the server secret key. Hence,\r\n```",
              "createdAt": "2022-09-12T18:06:27Z",
              "updatedAt": "2022-09-12T18:06:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts5B1-ol",
          "commit": {
            "abbreviatedOid": "63cd9d3"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-12T18:49:02Z",
          "updatedAt": "2022-09-12T18:49:03Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "```suggestion\r\nThis only occurs for `info` values that map to the secret key of the server. Thus, \r\nclients that observe this signal are assumed to know the server secret key. Hence,\r\n```",
              "createdAt": "2022-09-12T18:49:02Z",
              "updatedAt": "2022-09-12T18:49:03Z"
            }
          ]
        }
      ]
    },
    {
      "number": 357,
      "id": "PR_kwDOBphpts4-Tzag",
      "title": "Addresses comments by RH",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/357",
      "state": "MERGED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses comments by RH.\r\n\r\n\r\n> Section 2.1 says: \"... each element in the proof ...\".  In the previous\r\nsentence, there is a discussion of \"batching DLEQ proofs\".  I think\r\nthis is talking about each proof in the batch.  Please clarify.\r\n\r\n> Section 6.1: Please consider definitions for domain and range.\r\nThe definitions probably go in Section 1.3, nit in this section.\r\n\r\n**Comment:** I think the description is abstract, and there is no need to define these terms.\r\n\r\n> Nits:\r\n>\r\n> The document uses \"byte array\" and \"byte string\".  I think it would be\r\nhelpful to pick one and use it throughout.  (I have a mild preference\r\nfor byte string because it makes it easier to define \"ASCII string\r\nliterals\".)\r\n\r\n> Throughout the document: s/SHAKE-256/SHAKE256/\r\n\r\n> The curves referenced in [X9.62] are also available in [SEC2], which is\r\nalready being referenced.  I think you can get away with one less\r\nreference.\r\n\r\n**Comment:** Still using X9.62 as appeared before than SEC2.\r\n\r\n> Section 3.1: s/a one-byte value/a one-byte value (in hexadecimal)/\r\n\r\n> Section 3.2: s/optional public/an optional public/\r\n\r\n> Section 5.3: s/specification, however/specification; however,/\r\n\r\n> Section 6.2.1 says: \"... VOPRF protocol Section 6.1 ...\".  There seem\r\nto be some words missing.  I think this is trying to say: \"... VOPRF\r\nprotocol specified in Section 6.1 of this document ...\".\r\n\r\n> Suggestion:\r\n> \r\n> Once the change log is removed by the RFC Editor, the rationale for\r\nhaving both ComputeComposites and ComputeCompositesFast will be lost.\r\nPlease add some text to the body of the document to capture this\r\ndetail.\r\n",
      "createdAt": "2022-09-03T02:22:34Z",
      "updatedAt": "2022-09-12T18:04:39Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "main",
      "baseRefOid": "c507ea2678140e4f60fd1ffa14a4e0b1cd43f9fa",
      "headRepository": "armfazh/draft-irtf-cfrg-voprf",
      "headRefName": "fixCommentsRH",
      "headRefOid": "a794002649900212955f3ab09add4d4bce44a9fd",
      "closedAt": "2022-09-12T18:04:39Z",
      "mergedAt": "2022-09-12T18:04:39Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "5c08108ba58a8f5bdd1cb1aae8a3c816f8bca004"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOBphpts5B1vQf",
          "commit": {
            "abbreviatedOid": "a794002"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-09-12T18:04:31Z",
          "updatedAt": "2022-09-12T18:04:31Z",
          "comments": []
        }
      ]
    },
    {
      "number": 358,
      "id": "PR_kwDOBphpts4-zwFP",
      "title": "Add -13 change log",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/358",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-09-12T18:52:43Z",
      "updatedAt": "2022-09-12T18:54:05Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "main",
      "baseRefOid": "78a21be75e0c84744ef34b39484bb748fa094fbd",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/13-change-log",
      "headRefOid": "9c3c6a3e8a3b2030ef5b40df64dc0ca3247119ff",
      "closedAt": "2022-09-12T18:54:05Z",
      "mergedAt": "2022-09-12T18:54:05Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "284af1122eea66b1154b19329e5f4b54ca17265c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOBphpts5B1_0Q",
          "commit": {
            "abbreviatedOid": "9c3c6a3"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-09-12T18:53:19Z",
          "updatedAt": "2022-09-12T18:53:19Z",
          "comments": []
        }
      ]
    },
    {
      "number": 359,
      "id": "PR_kwDOBphpts5AM8Ck",
      "title": "Clarify JKK14 relevance",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/359",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-10-05T10:10:02Z",
      "updatedAt": "2022-10-06T11:46:43Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "main",
      "baseRefOid": "284af1122eea66b1154b19329e5f4b54ca17265c",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/clarify-JKK14",
      "headRefOid": "8e6b1a6bbf0c2f4123e019e875e7042ff2ed1dad",
      "closedAt": "2022-10-06T11:46:43Z",
      "mergedAt": "2022-10-06T11:46:43Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "c0861696dc8d4c9a78f108eeecd43504567bd6c6"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 360,
      "id": "PR_kwDOBphpts5ApIdn",
      "title": "Make ciphersuite function implementation explicit (including input validation)",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/360",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Per @wbl's feedback on the list:\r\n\r\n> The one change I'd make is make more clear in 2.1 what the forward reference to 4.2.1 will tell the reader about validation, and capitalize some of those MUSTs in 4.2.1\r\n\r\nWhile reviewing these sections, it seemed better to crib from [FROST](https://cfrg.github.io/draft-irtf-cfrg-frost/draft-irtf-cfrg-frost.html#name-ciphersuites), which makes these steps very explicit as part of the ciphersuite implementation requirements. So I did that and removed redundant text in 4.2.1.\r\n\r\ncc @kevinlewi for \ud83d\udc40 ",
      "createdAt": "2022-10-12T11:13:11Z",
      "updatedAt": "2022-11-21T23:07:45Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "main",
      "baseRefOid": "151e737c69d27e29444708703e3ecbe6d5d507fd",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/explicit-ciphersuite-functions",
      "headRefOid": "7b8bd404fdc9e554dce3c27e78a4d79926839069",
      "closedAt": "2022-11-21T23:07:45Z",
      "mergedAt": "2022-11-21T23:07:45Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "b679feafa68bac141c06384600444f0fc26b822e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOBphpts5D4vg3",
          "commit": {
            "abbreviatedOid": "97789b0"
          },
          "author": "thomwiggers",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-12T11:54:09Z",
          "updatedAt": "2022-10-12T11:56:31Z",
          "comments": [
            {
              "originalPosition": 73,
              "body": "are these some extra `}}` or am I missing something?",
              "createdAt": "2022-10-12T11:54:09Z",
              "updatedAt": "2022-10-12T11:56:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts5D45_n",
          "commit": {
            "abbreviatedOid": "97789b0"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-12T12:24:59Z",
          "updatedAt": "2022-10-12T12:25:00Z",
          "comments": [
            {
              "originalPosition": 73,
              "body": "The preceding `{{` were missing -- thanks!",
              "createdAt": "2022-10-12T12:24:59Z",
              "updatedAt": "2022-10-12T12:25:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts5D66WR",
          "commit": {
            "abbreviatedOid": "8c4495a"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-10-12T18:01:51Z",
          "updatedAt": "2022-10-12T18:28:52Z",
          "comments": [
            {
              "originalPosition": 135,
              "body": "```suggestion\r\n  - ScalarInverse(s): Returns the multiplicative inverse of input Scalar `s` mod `Group.Order()`.\r\n```\r\n\r\nand everywhere else",
              "createdAt": "2022-10-12T18:01:51Z",
              "updatedAt": "2022-10-12T18:30:33Z"
            },
            {
              "originalPosition": 100,
              "body": "I consider these two functions (ScalarInverse and RandomScalar) are generic over each group instantiation. So we might remove them from each group instance.\r\n",
              "createdAt": "2022-10-12T18:03:23Z",
              "updatedAt": "2022-10-12T18:28:52Z"
            },
            {
              "originalPosition": 178,
              "body": "```suggestion\r\n    {{!KEYAGREEMENT=DOI.10.6028/NIST.SP.800-56Ar3}}. This includes checking that the\r\n    coordinates of the resulting point are in the correct range, that the point is on\r\n    the curve, and that the point is not the group identity element.\r\n```\r\n\r\nThese sentences are redundant. \r\n",
              "createdAt": "2022-10-12T18:06:52Z",
              "updatedAt": "2022-10-12T18:28:52Z"
            },
            {
              "originalPosition": 152,
              "body": "For group order, be consistent about using hex or decimal numbers.",
              "createdAt": "2022-10-12T18:07:52Z",
              "updatedAt": "2022-10-12T18:28:52Z"
            },
            {
              "originalPosition": 212,
              "body": "We had normalized the document to use `byte array` or `array of bytes`, instead of `byte string`.\r\n\r\n```suggestion\r\n  - DeserializeElement(buf): Implemented by attempting to deserialize a 49-byte array  to\r\n```",
              "createdAt": "2022-10-12T18:10:34Z",
              "updatedAt": "2022-10-12T18:28:52Z"
            },
            {
              "originalPosition": 346,
              "body": "double check, does this `l` refers to `L` in has to curve draft? \r\nIf so, how the security parameter is involved in this instantiation?\r\n\r\n```suggestion\r\nGenerate a random byte array with `l = ceil(((3 * ceil(log2(G.Order()))) / 2) / 8)`\r\n```",
              "createdAt": "2022-10-12T18:15:08Z",
              "updatedAt": "2022-10-12T18:28:52Z"
            },
            {
              "originalPosition": 342,
              "body": "and reduce `mod p`?\r\nin other words, if after sampling one gets a number above `Order() <= s < 2^b`, is this a valid scalar?",
              "createdAt": "2022-10-12T18:19:35Z",
              "updatedAt": "2022-10-12T18:28:52Z"
            },
            {
              "originalPosition": 329,
              "body": "Section 5 of Hash to curve draft states:\r\n\r\n```\r\n   Implementors MUST NOT use rejection sampling to generate a uniformly\r\n   random element of F, to ensure that the hash_to_field function is\r\n   amenable to constant-time implementation.  The reason is that\r\n   rejection sampling procedures are difficult to implement in constant\r\n   time, and later well-meaning \"optimizations\" may silently render an\r\n   implementation non-constant-time.\r\n```\r\n\r\nhow this section in the voprf draft is in accordance to that recommendation?",
              "createdAt": "2022-10-12T18:25:57Z",
              "updatedAt": "2022-10-12T18:28:52Z"
            },
            {
              "originalPosition": 344,
              "body": "```suggestion\r\n### Random Number Generation Using Extra Random Bits\r\n```\r\n\r\n* Similar to Appendix B.4.1 of FIPS 186-4.",
              "createdAt": "2022-10-12T18:27:20Z",
              "updatedAt": "2022-10-12T18:28:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts5D7NW8",
          "commit": {
            "abbreviatedOid": "8c4495a"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-12T19:12:10Z",
          "updatedAt": "2022-10-12T19:12:11Z",
          "comments": [
            {
              "originalPosition": 100,
              "body": "I think we should be explicit and list every function, so I'm going to keep it as-is.",
              "createdAt": "2022-10-12T19:12:10Z",
              "updatedAt": "2022-10-12T19:12:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts5D7Nge",
          "commit": {
            "abbreviatedOid": "8c4495a"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-12T19:12:47Z",
          "updatedAt": "2022-10-12T19:12:47Z",
          "comments": [
            {
              "originalPosition": 152,
              "body": "Let's stick with this as-is for now. We can update later if needed.",
              "createdAt": "2022-10-12T19:12:47Z",
              "updatedAt": "2022-10-12T19:12:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts5D7Nnv",
          "commit": {
            "abbreviatedOid": "8c4495a"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-12T19:13:12Z",
          "updatedAt": "2022-10-12T19:13:12Z",
          "comments": [
            {
              "originalPosition": 346,
              "body": "This is correct and based on the hash-to-curve draft \ud83d\udc4d ",
              "createdAt": "2022-10-12T19:13:12Z",
              "updatedAt": "2022-10-12T19:13:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts5D7OBe",
          "commit": {
            "abbreviatedOid": "8c4495a"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-12T19:14:50Z",
          "updatedAt": "2022-10-12T19:14:50Z",
          "comments": [
            {
              "originalPosition": 342,
              "body": "Reduction is unnecessary here since it'll be less than p (by definition).",
              "createdAt": "2022-10-12T19:14:50Z",
              "updatedAt": "2022-10-12T19:14:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts5D7ORg",
          "commit": {
            "abbreviatedOid": "cde11e3"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-12T19:15:46Z",
          "updatedAt": "2022-10-12T19:15:47Z",
          "comments": [
            {
              "originalPosition": 329,
              "body": "It states \"Failure to implement `DeserializeScalar` in constant time can leak information about the underlying corresponding Scalar,\" so I think we're fine.",
              "createdAt": "2022-10-12T19:15:46Z",
              "updatedAt": "2022-10-12T19:15:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts5D7PEV",
          "commit": {
            "abbreviatedOid": "cde11e3"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-10-12T19:18:56Z",
          "updatedAt": "2022-10-12T19:18:57Z",
          "comments": [
            {
              "originalPosition": 347,
              "body": "```suggestion\r\nGenerate a random byte array with `L = ceil(((3 * ceil(log2(G.Order()))) / 2) / 8)`\r\nbytes, and interpret it as an integer; reduce the integer modulo `G.Order()` and return the\r\nresult. See {{I-D.irtf-cfrg-hash-to-curve, Section 5}} for the underlying derivation of `L`.\r\n```",
              "createdAt": "2022-10-12T19:18:57Z",
              "updatedAt": "2022-10-12T19:18:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts5D7SmR",
          "commit": {
            "abbreviatedOid": "7b8bd40"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-10-12T19:33:12Z",
          "updatedAt": "2022-10-12T19:33:12Z",
          "comments": []
        }
      ]
    },
    {
      "number": 361,
      "id": "PR_kwDOBphpts5ArjNS",
      "title": "Addresses Florence comments",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/361",
      "state": "MERGED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses editorial comments by Florence D posted at:\r\n\r\nhttps://mailarchive.ietf.org/arch/msg/cfrg/Hv55zEj8oZtSgAUlYPnoocYkza8/\r\n\r\n",
      "createdAt": "2022-10-12T20:00:03Z",
      "updatedAt": "2022-11-28T21:19:03Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "caw/explicit-ciphersuite-functions",
      "baseRefOid": "7b8bd404fdc9e554dce3c27e78a4d79926839069",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "fixFlorecenCom",
      "headRefOid": "f2e6054ed5ad32dc29df7502fac242783009d6ac",
      "closedAt": "2022-11-21T23:11:38Z",
      "mergedAt": "2022-11-21T23:11:38Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "2a36e7f28e46cdb3e5191d7c7e01b7769d2a8f19"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOBphpts5D7jFk",
          "commit": {
            "abbreviatedOid": "cb3d5af"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-10-12T20:33:25Z",
          "updatedAt": "2022-10-12T20:33:25Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOBphpts5G33J_",
          "commit": {
            "abbreviatedOid": "f2e6054"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-11-21T23:11:34Z",
          "updatedAt": "2022-11-21T23:11:34Z",
          "comments": []
        }
      ]
    },
    {
      "number": 363,
      "id": "PR_kwDOBphpts5A2fMN",
      "title": "Addresses Chris Patton comments.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/363",
      "state": "MERGED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses Chris Patton (@cjpatton) comments posted at https://mailarchive.ietf.org/arch/msg/cfrg/l4QDx8HbE0egEsVcW9qtX_AnN7Y/\r\n\r\nfixes #362 ",
      "createdAt": "2022-10-15T01:44:47Z",
      "updatedAt": "2022-11-28T21:19:05Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "fixFlorecenCom",
      "baseRefOid": "cb3d5afd483c2a9290aaa6390e4ad4f97172837e",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "armfazh/fixCJPattonRev",
      "headRefOid": "a89a6a112df23978afe90a597805810161eeb967",
      "closedAt": "2022-11-21T23:09:37Z",
      "mergedAt": "2022-11-21T23:09:36Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "f2e6054ed5ad32dc29df7502fac242783009d6ac"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOBphpts5EOpxd",
          "commit": {
            "abbreviatedOid": "6875323"
          },
          "author": "cjpatton",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-10-17T19:22:53Z",
          "updatedAt": "2022-10-17T19:22:53Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOBphpts5G32wv",
          "commit": {
            "abbreviatedOid": "6875323"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-11-21T23:09:15Z",
          "updatedAt": "2022-11-21T23:09:28Z",
          "comments": [
            {
              "originalPosition": 105,
              "body": "```suggestion\r\nThis section discusses the security of the protocols defined in this specification, along\r\n```",
              "createdAt": "2022-11-21T23:09:15Z",
              "updatedAt": "2022-11-21T23:09:28Z"
            }
          ]
        }
      ]
    },
    {
      "number": 364,
      "id": "PR_kwDOBphpts5C4rCd",
      "title": "Address some requirements by IRTF",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/364",
      "state": "MERGED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Solves errors reported by idnits tool.",
      "createdAt": "2022-11-14T23:58:52Z",
      "updatedAt": "2022-11-28T21:19:07Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "main",
      "baseRefOid": "151e737c69d27e29444708703e3ecbe6d5d507fd",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "irtfReq",
      "headRefOid": "8fd0cb9491e7a46181f8c8e6879491ccd8c87aca",
      "closedAt": "2022-11-21T23:08:07Z",
      "mergedAt": "2022-11-21T23:08:07Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "f4975ce032b4bbbc381ce40479523f7c5ecfb287"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 366,
      "id": "PR_kwDOBphpts5DtJ6_",
      "title": "Other changes",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/366",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I didn't notice that @armfazh's other PRs didn't target `main`, so they were merged into branches other than `main` and didn't make it into -15. This fixes that.",
      "createdAt": "2022-11-25T12:28:33Z",
      "updatedAt": "2022-11-25T12:29:11Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "main",
      "baseRefOid": "1c9c450638569b11b85a854f7af87bfbd83a2de5",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "other-changes",
      "headRefOid": "37ebe0e5c2e131911a234d37091c48bdd5a92dc1",
      "closedAt": "2022-11-25T12:29:11Z",
      "mergedAt": "2022-11-25T12:29:11Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "002ca6a8809186692984863cbb897bee1501abda"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 367,
      "id": "PR_kwDOBphpts5DtOf4",
      "title": "Stanislaw nits",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/367",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-11-25T12:48:16Z",
      "updatedAt": "2022-11-28T18:58:57Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "main",
      "baseRefOid": "002ca6a8809186692984863cbb897bee1501abda",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/stanislaw-nits",
      "headRefOid": "ea7928ea4082e3ded9c7c3191eaed5ffeaefd3e3",
      "closedAt": "2022-11-28T18:58:57Z",
      "mergedAt": "2022-11-28T18:58:57Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "f48457df90053a86f4037faeaf56d38a5cb5c94f"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@armfazh please approve or request changes so we can move this forward -- thanks!",
          "createdAt": "2022-11-28T12:39:53Z",
          "updatedAt": "2022-11-28T12:39:53Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOBphpts5HQdIc",
          "commit": {
            "abbreviatedOid": "2c9c5fd"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-28T09:47:22Z",
          "updatedAt": "2022-11-28T09:47:23Z",
          "comments": [
            {
              "originalPosition": 131,
              "body": "This change re-introduces an error in the notation, previously pointed during a review.\r\n\r\nObserve that the abbreviation `CDH` applies only to `Computational Diffie-Hellman` part and not to `One-More Gap Computational Diffie-Hellman`. \r\n\r\n",
              "createdAt": "2022-11-28T09:47:22Z",
              "updatedAt": "2022-11-28T09:47:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts5HRO-f",
          "commit": {
            "abbreviatedOid": "2c9c5fd"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-28T12:12:41Z",
          "updatedAt": "2022-11-28T12:12:41Z",
          "comments": [
            {
              "originalPosition": 131,
              "body": "I don't think this is an error. It's clear that CDH applies to a Computational Diffie Hellman. ",
              "createdAt": "2022-11-28T12:12:41Z",
              "updatedAt": "2022-11-28T12:12:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts5HRYE-",
          "commit": {
            "abbreviatedOid": "2c9c5fd"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-28T12:39:37Z",
          "updatedAt": "2022-11-28T12:39:37Z",
          "comments": [
            {
              "originalPosition": 131,
              "body": "I removed the abbreviation altogether. ",
              "createdAt": "2022-11-28T12:39:37Z",
              "updatedAt": "2022-11-28T12:39:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts5HTy4F",
          "commit": {
            "abbreviatedOid": "ea7928e"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-11-28T18:48:39Z",
          "updatedAt": "2022-11-28T18:48:39Z",
          "comments": []
        }
      ]
    },
    {
      "number": 368,
      "id": "PR_kwDOBphpts5FgN0K",
      "title": "update c implementation in readme",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/368",
      "state": "MERGED",
      "author": "aldenml",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Relevant files:\r\n\r\nhttps://github.com/aldenml/ecc/blob/master/src/voprf.h\r\nhttps://github.com/aldenml/ecc/blob/master/src/voprf.c\r\nhttps://github.com/aldenml/ecc/blob/master/test/test_voprf.c\r\n\r\nTest vectors (values copies from this repo):\r\n\r\nhttps://github.com/aldenml/ecc/blob/master/test/data/voprf/ristretto255_sha512_oprf.json\r\nhttps://github.com/aldenml/ecc/blob/master/test/data/voprf/ristretto255_sha512_poprf.json\r\nhttps://github.com/aldenml/ecc/blob/master/test/data/voprf/ristretto255_sha512_voprf.json",
      "createdAt": "2022-12-15T01:00:31Z",
      "updatedAt": "2022-12-16T17:58:05Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "main",
      "baseRefOid": "f3489eb19e25b3e36e8d711b24bc3fa7054f2d0e",
      "headRepository": "aldenml/draft-irtf-cfrg-voprf",
      "headRefName": "update-c-impl",
      "headRefOid": "19e9348f6ef2bd0baa1d9d9c8145961d4d4556bb",
      "closedAt": "2022-12-16T15:41:21Z",
      "mergedAt": "2022-12-16T15:41:21Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "93fe6dbf7291cc1b6562f1157dd1781d3868631b"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Great -- thank you!",
          "createdAt": "2022-12-16T15:41:18Z",
          "updatedAt": "2022-12-16T15:41:18Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOBphpts5Ix9fG",
          "commit": {
            "abbreviatedOid": "19e9348"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-16T15:41:11Z",
          "updatedAt": "2022-12-16T15:41:11Z",
          "comments": []
        }
      ]
    },
    {
      "number": 369,
      "id": "PR_kwDOBphpts5Fp1fw",
      "title": "Drop normative references to OPAQUE and Privacy Pass",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/369",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "These don't need to be normatively referenced.",
      "createdAt": "2022-12-16T15:40:57Z",
      "updatedAt": "2022-12-19T13:29:26Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "main",
      "baseRefOid": "f3489eb19e25b3e36e8d711b24bc3fa7054f2d0e",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/drop-normative-references",
      "headRefOid": "6955c16ed758565e87bd393910ca0e04ce5f51ee",
      "closedAt": "2022-12-19T13:29:26Z",
      "mergedAt": "2022-12-19T13:29:26Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "0ee6a58ec18dbea2213db8f0022cc645db9ea202"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOBphpts5IzOzD",
          "commit": {
            "abbreviatedOid": "6955c16"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-16T19:56:26Z",
          "updatedAt": "2022-12-16T19:56:26Z",
          "comments": []
        }
      ]
    },
    {
      "number": 370,
      "id": "PR_kwDOBphpts5FyH4s",
      "title": "Remove unused parameters from SetupXXX functions",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/370",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-12-19T13:26:25Z",
      "updatedAt": "2022-12-19T22:40:09Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "main",
      "baseRefOid": "93fe6dbf7291cc1b6562f1157dd1781d3868631b",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/remove-unused-params",
      "headRefOid": "e61cd3f4946198853232a30ef558e08a9af33c75",
      "closedAt": "2022-12-19T22:40:08Z",
      "mergedAt": "2022-12-19T22:40:08Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "bc0f2e2f8f6c3fd741310e90042390e788510aa3"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOBphpts5I7hl0",
          "commit": {
            "abbreviatedOid": "e61cd3f"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-19T21:38:26Z",
          "updatedAt": "2022-12-19T21:38:26Z",
          "comments": []
        }
      ]
    },
    {
      "number": 371,
      "id": "PR_kwDOBphpts5FyVlY",
      "title": "Change how suites are identified and finalize test vectors",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/371",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This is a breaking update that changes how ciphersuites are identified. Previously, we used two-byte identifiers under the assumption that these identifiers would be needed for agreement on ciphersuites in different applications. That's really not necessary, especially when applications can just require certain configurations as desired. For example, Privacy Pass only uses one ciphersuite (P384-SHA384), and we can just say \"use the (P384-SHA384) version\" instead of \"use the version identified by the two-byte value 0x0004.\" Plus, the two-byte value would require establishment of a registry to manage the space. Too much complexity!\r\n\r\nThis change follows in the footsteps of FROST. It identifies each ciphersuite by a unique string and then uses that string in place of the two-byte identifier. No registry is needed to manage these things. Protocols that need negotiation for different ciphersuites can establish identifiers (and an appropriate registry) as needed for their use case.\r\n\r\nWhile updating this part, I also \"finalized\" the test vectors by removing the draft version number from the context string.\r\n\r\ncc @kevinlewi, @bytemare, @aldenml, @rolfeschmidt for awareness and to help confirm the new (and final) test vectors",
      "createdAt": "2022-12-19T14:05:08Z",
      "updatedAt": "2023-01-09T12:19:50Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "main",
      "baseRefOid": "c126f84deb35c0ecaf00ee08b5a65c7357e77af1",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/no-iana",
      "headRefOid": "382a7e368757db7663800c6e9e94f05dcc644c9c",
      "closedAt": "2023-01-09T12:19:50Z",
      "mergedAt": "2023-01-09T12:19:50Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "5d7d94c8dc7589dc3baa116c1b9c169a7c33ac4e"
      },
      "comments": [
        {
          "author": "bytemare",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I strongly agree with this change. I think this is more convenient, even from a developer perspective. A one-byte identifier should be largely enough to cover a large scale of ciphersuites.",
          "createdAt": "2022-12-19T14:14:46Z",
          "updatedAt": "2022-12-19T14:14:46Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> A one-byte identifier should be largely enough to cover a large scale of ciphersuites.\r\n\r\nTo clarify (just in case there was confusion from the PR's description), this change replaces the two-byte identifier with an ASCII string identifier, not a one-byte identifier.",
          "createdAt": "2022-12-19T14:27:33Z",
          "updatedAt": "2022-12-19T14:27:33Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Good catch -- thanks. @armfazh, could you please verify the test vectors against the CIRCL implementation?",
          "createdAt": "2022-12-19T23:27:42Z",
          "updatedAt": "2022-12-19T23:27:42Z"
        },
        {
          "author": "kevinlewi",
          "authorAssociation": "CONTRIBUTOR",
          "body": "cc: @daxpedda as the change of identifier from u16 to string will mean we need to change the type of the \"ID\" that was defined in `VoprfParameters` here: https://github.com/RustCrypto/traits/pull/878",
          "createdAt": "2022-12-19T23:56:30Z",
          "updatedAt": "2022-12-19T23:56:30Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "> could you please verify the test vectors against the CIRCL implementation?\r\n\r\nconfirmed test vectors at: https://github.com/cloudflare/circl/pull/388",
          "createdAt": "2022-12-20T00:05:02Z",
          "updatedAt": "2022-12-20T00:05:02Z"
        },
        {
          "author": "bytemare",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@chris-wood my bad, I misread. Why use an ASCII identifier?\r\nI understand you want to lift identifier handling to higher-level applications",
          "createdAt": "2022-12-20T22:06:54Z",
          "updatedAt": "2022-12-20T22:06:54Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> @chris-wood my bad, I misread. Why use an ASCII identifier? I understand you want to lift identifier handling to higher-level applications\r\n\r\nWe use the identifiers for domain separation across the different suites.",
          "createdAt": "2022-12-20T22:44:51Z",
          "updatedAt": "2022-12-20T22:44:51Z"
        },
        {
          "author": "bytemare",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Vectors look good for [bytemare/voprf](https://github.com/bytemare/voprf) and [bytemare/opaque](https://github.com/) \ud83d\udc4d ",
          "createdAt": "2022-12-23T23:22:45Z",
          "updatedAt": "2022-12-23T23:22:45Z"
        },
        {
          "author": "bytemare",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Should #347 be merged into this ?",
          "createdAt": "2022-12-27T12:37:53Z",
          "updatedAt": "2022-12-27T12:37:53Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> Should #347 be merged into this ?\r\n\r\nI'm going to leave that change out for now. It's aesthetic in nature and something we can address separately without changing the test vectors.",
          "createdAt": "2022-12-29T01:39:54Z",
          "updatedAt": "2022-12-29T01:39:54Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@kevinlewi do you think you'd be able to verify test vectors?",
          "createdAt": "2022-12-29T01:40:06Z",
          "updatedAt": "2022-12-29T01:40:06Z"
        },
        {
          "author": "kevinlewi",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@chris-wood Unfortunately I cannot really do so until the type change is registered in the upstream RustCrypto/traits library. But it seems like we want to wait until making that change until this one is confirmed. I think it's ok to land this without me verifying the test vectors.",
          "createdAt": "2022-12-29T20:54:25Z",
          "updatedAt": "2022-12-29T20:54:25Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Sounds good @kevinlewi. I think I'm comfortable merging this and revving the document based on confirmation from @armfazh and @bytemare. I'll do so early next week. ",
          "createdAt": "2022-12-31T12:44:50Z",
          "updatedAt": "2022-12-31T12:44:50Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOBphpts5I75oa",
          "commit": {
            "abbreviatedOid": "17d3c42"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "remove this file: `poc/opaque_drbg.sage` ?\r\n",
          "createdAt": "2022-12-19T23:26:44Z",
          "updatedAt": "2022-12-19T23:26:44Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOBphpts5I79XR",
          "commit": {
            "abbreviatedOid": "17d3c42"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-19T23:54:30Z",
          "updatedAt": "2022-12-19T23:54:31Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "here we can remove the `name` field in favour of `identifier`",
              "createdAt": "2022-12-19T23:54:31Z",
              "updatedAt": "2022-12-19T23:54:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts5I8FSq",
          "commit": {
            "abbreviatedOid": "17d3c42"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-20T00:56:07Z",
          "updatedAt": "2022-12-20T00:56:08Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "Let's address this in a change that cleans up test vector code?",
              "createdAt": "2022-12-20T00:56:07Z",
              "updatedAt": "2022-12-20T00:56:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts5I8RZf",
          "commit": {
            "abbreviatedOid": "17d3c42"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-20T02:02:21Z",
          "updatedAt": "2022-12-20T02:02:21Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "ok",
              "createdAt": "2022-12-20T02:02:21Z",
              "updatedAt": "2022-12-20T02:02:21Z"
            }
          ]
        }
      ]
    },
    {
      "number": 372,
      "id": "PR_kwDOBphpts5FylQ0",
      "title": "Not A Standard (apparently)",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/372",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Per Colin's request.",
      "createdAt": "2022-12-19T14:52:23Z",
      "updatedAt": "2022-12-19T22:40:31Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "main",
      "baseRefOid": "0ee6a58ec18dbea2213db8f0022cc645db9ea202",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/not-a-standard",
      "headRefOid": "56f1c46bb4e9423ae977004117e7ea5815f0e1c3",
      "closedAt": "2022-12-19T22:40:30Z",
      "mergedAt": "2022-12-19T22:40:30Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "c126f84deb35c0ecaf00ee08b5a65c7357e77af1"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOBphpts5I7inb",
          "commit": {
            "abbreviatedOid": "56f1c46"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-19T21:42:45Z",
          "updatedAt": "2022-12-19T21:42:45Z",
          "comments": []
        }
      ]
    },
    {
      "number": 373,
      "id": "PR_kwDOBphpts5F03B3",
      "title": "replaces HTML by ASCII in equation",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/373",
      "state": "CLOSED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-12-19T23:26:05Z",
      "updatedAt": "2022-12-20T23:44:03Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "main",
      "baseRefOid": "c126f84deb35c0ecaf00ee08b5a65c7357e77af1",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "armfazh/ascii",
      "headRefOid": "97a22b57c6a039735e49e3e74c9142887cf7055a",
      "closedAt": "2022-12-20T23:44:03Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't think we should take this change as this renders fine in HTML. ",
          "createdAt": "2022-12-20T00:54:59Z",
          "updatedAt": "2022-12-20T00:54:59Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "looks like the browser disagrees.\r\n\r\nhttps://datatracker.ietf.org/doc/html/draft-irtf-cfrg-voprf#name-rejection-sampling\r\n\r\n![image](https://user-images.githubusercontent.com/10335519/208563614-0a150ebd-64ce-44f6-9ddd-b2af15ab0019.png)\r\n",
          "createdAt": "2022-12-20T02:01:24Z",
          "updatedAt": "2022-12-20T02:01:24Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I fixed this in #374 -- please take a look!",
          "createdAt": "2022-12-20T11:57:33Z",
          "updatedAt": "2022-12-20T11:57:33Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't know what is wrong with the changes in this pr, could you please elaborate.\r\nThe pro's of these changes is that we don't need to embed HTML codes in the document that is rendered not only in HTML, but PDF and ASCII versions too.\r\n",
          "createdAt": "2022-12-20T23:17:03Z",
          "updatedAt": "2022-12-20T23:17:03Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "The problem is that this doesn't render like we'd want it to in HTML. Please take a look at #374 -- this produces the desired output.",
          "createdAt": "2022-12-20T23:28:14Z",
          "updatedAt": "2022-12-20T23:28:14Z"
        },
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "declined in favour of PR-374 ",
          "createdAt": "2022-12-20T23:44:03Z",
          "updatedAt": "2022-12-20T23:44:03Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 374,
      "id": "PR_kwDOBphpts5F3HyN",
      "title": "Fix math rendering",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/374",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Alternative to #373 \r\n\r\ncc @armfazh ",
      "createdAt": "2022-12-20T11:57:12Z",
      "updatedAt": "2022-12-20T23:55:33Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "main",
      "baseRefOid": "c126f84deb35c0ecaf00ee08b5a65c7357e77af1",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/fix-render",
      "headRefOid": "233f1f89defbfd0b750e7938ebccedc78f9400d4",
      "closedAt": "2022-12-20T23:55:33Z",
      "mergedAt": "2022-12-20T23:55:33Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "4f7e49b3c0bd912df29fe53f23acdc610c79c057"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOBphpts5JCEyw",
          "commit": {
            "abbreviatedOid": "233f1f8"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "~the problem I see is not with the comparison symbol, but with the HTML tags. \r\nHTML tags do not render in the PDF & TXT versions.~\r\n\r\nOk, I just checked the artifacts produced in this job, and confirm this solves the issue.",
          "createdAt": "2022-12-20T23:39:18Z",
          "updatedAt": "2022-12-20T23:43:11Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOBphpts5JCFWh",
          "commit": {
            "abbreviatedOid": "233f1f8"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-20T23:43:20Z",
          "updatedAt": "2022-12-20T23:43:20Z",
          "comments": []
        }
      ]
    },
    {
      "number": 375,
      "id": "PR_kwDOBphpts5HQfI0",
      "title": "Address Stanislav nits",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/375",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-01-12T15:32:43Z",
      "updatedAt": "2023-01-23T17:01:01Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "main",
      "baseRefOid": "64bd145cce22e9f9e2b8371fcb0714a16f6b786f",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/stanislav-nits",
      "headRefOid": "8fb461d1505312e0d1dea1c0acb8cce89e58af7b",
      "closedAt": "2023-01-23T17:01:01Z",
      "mergedAt": "2023-01-23T17:01:00Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "e02dee42ad7ed37f5f04e6ef574b0cf722dae04c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOBphpts5LXIam",
          "commit": {
            "abbreviatedOid": "8fb461d"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-01-20T21:14:39Z",
          "updatedAt": "2023-01-20T21:14:39Z",
          "comments": []
        }
      ]
    },
    {
      "number": 376,
      "id": "PR_kwDOBphpts5HUtWl",
      "title": "Cleanup and clarify input lengths",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/376",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The 2^13 length restriction was asked about before, and I thought we fixed it, but apparently not. ",
      "createdAt": "2023-01-13T11:42:14Z",
      "updatedAt": "2023-01-23T17:02:36Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "main",
      "baseRefOid": "64bd145cce22e9f9e2b8371fcb0714a16f6b786f",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/cleanup",
      "headRefOid": "b7125cb7d5b7e04b66f8ad4766a2d193338f11ff",
      "closedAt": "2023-01-23T17:02:36Z",
      "mergedAt": "2023-01-23T17:02:36Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "ff1f027c9037c43c4cde7ec2bde5446969a75e50"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOBphpts5KYpuK",
          "commit": {
            "abbreviatedOid": "bc78959"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-13T16:28:04Z",
          "updatedAt": "2023-01-13T16:28:04Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\n`PublicInput` are opaque byte strings of arbitrary length no larger than 2<sup>16</sup> - 1 bytes.\r\n```",
              "createdAt": "2023-01-13T16:28:04Z",
              "updatedAt": "2023-01-13T16:28:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts5LXI4P",
          "commit": {
            "abbreviatedOid": "b7b8860"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-01-20T21:15:49Z",
          "updatedAt": "2023-01-20T21:16:40Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\nare two-byte length-prefixed before use throughout the protocol.\r\n```",
              "createdAt": "2023-01-20T21:15:50Z",
              "updatedAt": "2023-01-20T21:16:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOBphpts5LdXJP",
          "commit": {
            "abbreviatedOid": "b7b8860"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-23T17:01:17Z",
          "updatedAt": "2023-01-23T17:01:18Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\nare length-prefixed with two bytes before use throughout the protocol.\r\n```",
              "createdAt": "2023-01-23T17:01:18Z",
              "updatedAt": "2023-01-23T17:01:18Z"
            }
          ]
        }
      ]
    },
    {
      "number": 378,
      "id": "PR_kwDOBphpts5JB3mM",
      "title": "Address Stephen's IRSG feedback",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/378",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-02-01T17:24:47Z",
      "updatedAt": "2023-02-01T20:57:34Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "main",
      "baseRefOid": "d8ab8925565d27d0aa05e6ae0c519209e227fd40",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "caw/sftcd-comments",
      "headRefOid": "83edc35813b89ddd46d2f92fa312b692f17ce6ed",
      "closedAt": "2023-02-01T20:57:34Z",
      "mergedAt": "2023-02-01T20:57:33Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "66beda492fe2ac7ad12f578df0ea2f628f39b4b7"
      },
      "comments": [
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "new changes look good too.\r\nFixes #377 ",
          "createdAt": "2023-02-01T20:01:10Z",
          "updatedAt": "2023-02-01T20:01:10Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOBphpts5MRQ9W",
          "commit": {
            "abbreviatedOid": "02670ed"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-01T17:47:28Z",
          "updatedAt": "2023-02-01T17:47:28Z",
          "comments": []
        }
      ]
    },
    {
      "number": 379,
      "id": "PR_kwDOBphpts5JuMN7",
      "title": "Improve consistency of language and other nits.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/379",
      "state": "MERGED",
      "author": "jhoyla",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-02-10T15:10:52Z",
      "updatedAt": "2023-02-21T11:35:30Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "main",
      "baseRefOid": "59dc7726a0bb3bef741db390933b23cc82a648c8",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "jhoyla/nits",
      "headRefOid": "dc023cc811998f8927d6cccd1b7d5e4fbbb11a07",
      "closedAt": "2023-02-21T11:35:29Z",
      "mergedAt": "2023-02-21T11:35:29Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "5f044d5f9c02b41925093d00a32f6f5c966b8e22"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOBphpts5NFx96",
          "commit": {
            "abbreviatedOid": "dc023cc"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-10T15:12:58Z",
          "updatedAt": "2023-02-10T15:12:58Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOBphpts5NH2w3",
          "commit": {
            "abbreviatedOid": "dc023cc"
          },
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-10T19:50:31Z",
          "updatedAt": "2023-02-10T19:50:31Z",
          "comments": []
        }
      ]
    },
    {
      "number": 381,
      "id": "PR_kwDOBphpts5KQrN4",
      "title": "update c implementation in readme to v21",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/381",
      "state": "MERGED",
      "author": "aldenml",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Relevant files:\r\n\r\nhttps://github.com/aldenml/ecc/blob/master/src/voprf.h\r\nhttps://github.com/aldenml/ecc/blob/master/src/voprf.c\r\nhttps://github.com/aldenml/ecc/blob/master/test/test_voprf.c\r\n\r\nTest vectors (values copies from this repo):\r\n\r\nhttps://github.com/aldenml/ecc/blob/master/test/data/voprf/ristretto255_sha512_oprf.json\r\nhttps://github.com/aldenml/ecc/blob/master/test/data/voprf/ristretto255_sha512_poprf.json\r\nhttps://github.com/aldenml/ecc/blob/master/test/data/voprf/ristretto255_sha512_voprf.json",
      "createdAt": "2023-02-18T01:34:22Z",
      "updatedAt": "2023-02-22T13:21:58Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "main",
      "baseRefOid": "befa0568ee98c042e09811ce572f759235e0ce44",
      "headRepository": "aldenml/draft-irtf-cfrg-voprf",
      "headRefName": "update-c-impl",
      "headRefOid": "d09c76275bd4601ac92fe5aecaa98d7363a6c256",
      "closedAt": "2023-02-22T01:59:32Z",
      "mergedAt": "2023-02-22T01:59:32Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "a9efad0f6416717d467927e7aff41bc33167671f"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 383,
      "id": "PR_kwDOBphpts5L2RkF",
      "title": "Update README.md",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/383",
      "state": "MERGED",
      "author": "stef",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "updated libopaque version compliancy",
      "createdAt": "2023-03-13T01:46:57Z",
      "updatedAt": "2023-06-06T04:01:50Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "main",
      "baseRefOid": "a9efad0f6416717d467927e7aff41bc33167671f",
      "headRepository": "stef/draft-irtf-cfrg-voprf",
      "headRefName": "patch-1",
      "headRefOid": "31eb44c02eb162ba16eca16ef45ea3833a0a53a4",
      "closedAt": "2023-03-14T14:47:25Z",
      "mergedAt": "2023-03-14T14:47:25Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "37aa59cbc142945578b0a9f5f6b701b19dce09d7"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOBphpts5XRjcs",
          "commit": {
            "abbreviatedOid": "31eb44c"
          },
          "author": "Mitsuecom",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-06T04:01:50Z",
          "updatedAt": "2023-06-06T04:01:50Z",
          "comments": []
        }
      ]
    },
    {
      "number": 387,
      "id": "PR_kwDOBphpts5ZSvw_",
      "title": "Adding aasvg diagrams for protocols.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/387",
      "state": "OPEN",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Updates diagrams to be rendered using SVG.",
      "createdAt": "2023-09-01T01:22:35Z",
      "updatedAt": "2023-09-01T01:22:35Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "main",
      "baseRefOid": "3a651b9f148953ddedbd2a120f6c0b092b41c0d9",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "svgDiagrams",
      "headRefOid": "63229cb12a66dd2282b954072d51f7958cb19f24",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 388,
      "id": "PR_kwDOBphpts5ZS0V7",
      "title": "Replacing hash to curve draft with RFC9380.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/388",
      "state": "CLOSED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Referencing to published RFC9380",
      "createdAt": "2023-09-01T01:35:08Z",
      "updatedAt": "2023-10-10T16:49:36Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "main",
      "baseRefOid": "3a651b9f148953ddedbd2a120f6c0b092b41c0d9",
      "headRepository": "armfazh/draft-irtf-cfrg-voprf",
      "headRefName": "rfc9380",
      "headRefOid": "f6d0fe6440ad36a6a52119a5eed4a611d6088bce",
      "closedAt": "2023-10-10T16:49:36Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "armfazh",
          "authorAssociation": "COLLABORATOR",
          "body": "this will be done by rfc editor",
          "createdAt": "2023-10-10T16:49:36Z",
          "updatedAt": "2023-10-10T16:49:36Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 390,
      "id": "PR_kwDOBphpts5cU_WI",
      "title": "Set seed size to Ns, which is the size of a scalar.",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/390",
      "state": "CLOSED",
      "author": "armfazh",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "In the case we opt for updating test vectors, \r\n\r\nFixes #384 ",
      "createdAt": "2023-10-10T04:30:12Z",
      "updatedAt": "2023-11-03T12:03:54Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "main",
      "baseRefOid": "3a651b9f148953ddedbd2a120f6c0b092b41c0d9",
      "headRepository": "cfrg/draft-irtf-cfrg-voprf",
      "headRefName": "solveIssue384",
      "headRefOid": "f6f3827a0df4c062bdfb88a3ab0909f0e7715084",
      "closedAt": "2023-11-03T12:03:54Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 391,
      "id": "PR_kwDOBphpts5g8qmy",
      "title": "Update README.md",
      "url": "https://github.com/cfrg/draft-irtf-cfrg-voprf/pull/391",
      "state": "OPEN",
      "author": "stef",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "add liboprf reference",
      "createdAt": "2023-12-02T02:00:55Z",
      "updatedAt": "2023-12-02T02:00:55Z",
      "baseRepository": "cfrg/draft-irtf-cfrg-voprf",
      "baseRefName": "main",
      "baseRefOid": "43da59f797c92248c0362e4c74cc10a8bd2b7b7d",
      "headRepository": "stef/draft-irtf-cfrg-voprf",
      "headRefName": "patch-1",
      "headRefOid": "6a4f553afba11010e49db73e9f4bb215533eba30",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    }
  ]
}